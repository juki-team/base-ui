{
  "success": true,
  "message": "OK",
  "contents": [
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "P-PNM",
      "name": "Aaah!",
      "tags": [
        "kattis",
        "condicionales"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Mario gritó demasiado en el último concierto que hubo en su ciudad y ahora necesita ir al médico por su dolor de garganta. Las instrucciones del médico son decir “aaah”. Desafortunadamente, los médicos a veces necesitan que Mario diga \"aaah\" por un tiempo, algo en lo que Mario nunca ha sido bueno. Cada médico requiere un cierto nivel de \"aah\"; algunos requieren \"aaaaaah\", mientras que otros pueden diagnosticar su garganta con solo una \"h\". (A menudo diagnostican erróneamente, pero eso está más allá del alcance de este problema). Como Mario no quiere ir al médico y perder el tiempo, quiere comparar cuánto tiempo logra mantener el “aaah” con el requisitos del médico. (Después de todo, ¿quién quiere decir “aaah” cuando el médico quiere que usted diga “aaaaaah”?)\n\nCada día, Mario llama a un médico diferente y les pregunta cuánto tiempo debe durar su \"aaah\". Descubra si Mario perdería el tiempo yendo al médico indicado."
        },
        "input": {
          "ES": "",
          "EN": "La entrada tiene 2 lineas, la primera línea es el \"aaah\" que Mario puede decir ese día. La segunda línea es el \"aah\" que el médico quiere escuchar. Solo se utilizarán 'a' y 'h' minúsculas en la entrada, y se tendrán entre 0 a 999, letras 'a' seguidas de una 'h'."
        },
        "output": {
          "ES": "",
          "EN": "Imprime \"VE\" si Mario puede ir al doctor, imprime \"NO\" en caso contrario."
        },
        "sampleCases": [
          {
            "input": "aaaah\naah",
            "output": "VE"
          },
          {
            "input": "aaaah\naaaaaaaah",
            "output": "NO"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PRIVATE",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6685bab51057e3317eafbcad"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1601",
      "name": "Pizza con Queso",
      "tags": [
        "kattis",
        "operaciones"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "",
          "EN": "George ha comprado una pizza. A George le encanta el queso. George piensa que la pizza no tiene suficiente queso. George se enoja.\n\nLa pizza de George es redonda y tiene un radio de $R$ cm, $C$\n cm de la parte externa son de corteza, y no lleva queso. ¿Qué porcentaje de la pizza de George tiene queso?"
        },
        "input": {
          "ES": "",
          "EN": "La entrada consiste en una única línea con dos enteros $R$ y $C$ cuyo significado se describió en el problema."
        },
        "output": {
          "ES": "",
          "EN": "Debes imprimir el porcentaje de la pizza que contiene queso, debes imprimir este porcentaje con 8 decimales de precision."
        },
        "sampleCases": [
          {
            "input": "1 1",
            "output": "0.00000000"
          },
          {
            "input": "2 1",
            "output": "25.00000000"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6683256477b07cbdcd2eb494"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1600",
      "name": "Encontrando el número que falta",
      "tags": [
        "kattis",
        "operaciones"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "",
          "EN": "El promedio de dos números puede ser obtenido sumando ambos y dividiendolos entre 2. Por ejemplo el promedio de 11 y 9 es 10.\n\nDiogo es un niño al cual le gustan mucho los números, es asi que su amigo Vladimir, le regala para su cumpleaños un reto matemático. Vladimir le da dos números a Diogo, el primero $S$ que representa el promedio de dos números y el segundo $X$ que representa uno de los números incluidos en el promedio. El reto de Diogo es encontrar el otro número $Y$ tal que el promedio de $X$ y $Y$ es igual a $S$.\n\nPor ejemplo si Vladimir le da a Diogo $S=10$ y $X=11$ entonces el número $Y$ que debe encontrar Diogo es $Y=9$"
        },
        "input": {
          "ES": "",
          "EN": "La primera y única linea de entrada, contiene dos números enteros $S$ y $X$, cuyo significado se dió en el problema."
        },
        "output": {
          "ES": "",
          "EN": "Debes imprimir un único número entero, que representa el número $Y$ que esta buscando Diogo."
        },
        "sampleCases": [
          {
            "input": "5 7",
            "output": "3"
          },
          {
            "input": "10 7",
            "output": "13"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {
          "142": {
            "type": "USER",
            "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
            "nickname": "142",
            "companyKey": "juki-app"
          },
          "672": {
            "type": "USER",
            "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
            "nickname": "672",
            "companyKey": "juki-app"
          }
        },
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6683233a77b07cbdcd2eb486"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1599",
      "name": "K. Tesoros",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "667127b7f368e587a6fd16aa"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1598",
      "name": "J. Super Alfil",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "El ajedrez siempre ha sido una disciplina legendaria y tiene variedad de piezas, como alfiles, torres, rey, reina, caballos y peones. Cada una de estas piezas tiene movimientos definidos y en esta ocasión hablaremos del alfil. Tendremos un tablero de $n$ filas y $m$ columnas donde lanzaremos un alfil desde la esquina superior izquierda, y en este caso el alfil siempre ira hasta tocar el borde del tablero (va rebotando en los bordes). Veamos los siguientes ejemplos:\n\nPara $n=4$ , $m=6$\n\n![image alt](https://images.juki.pub/o/b2ef10bd-6234-4ca5-b05f-4d84a19b6817.png)\n\n![image alt](https://images.juki.pub/o/11943137-552a-4cb4-a8ea-03d69a5709bb.png)\n\n![image alt](https://images.juki.pub/o/5a2e6a32-a56c-4983-93ab-ba74d91cacb0.png)\n\nY asi sucesivamente\n\n![image alt](https://images.juki.pub/o/fa0a8056-89a2-421a-a49d-feec4d07a833.png)\n\nPor tanto el numero de casillas que no fueron visitadas es 12.\n\nAhora para el caso Para $n=5$ , $m=5$\n\n![image alt](https://images.juki.pub/o/82ec8640-a1fb-4ec3-8f52-8a15add96c6b.png)\n\nPor tanto el numero de casillas que no fueron visitadas es 20.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada consiste de múltiples casos de prueba, cada uno en una línea.\n\nCada caso contiene dos enteros $n, m$ $(2 \\leq n,m \\leq 10^9)$ con las dimensiones del tablero de ajedrez. El total de casos de prueba es menor que $5\\cdot 10^4$. ",
          "EN": ""
        },
        "output": {
          "ES": "Por cada caso, imprimir un entero con el numero de casillas no visitadas por el súper alfil. ",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 6\n5 5\n",
            "output": "12\n20\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "66712704f368e587a6fd16a8"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1597",
      "name": "I. Pizzas",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 7,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 26,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 67,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "667125bcf368e587a6fd16a6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1596",
      "name": "H. Montañas",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 28,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 72,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "667124cdf368e587a6fd16a2"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1594",
      "name": "F. Franklin ha vuelto",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Franklin Richards es un niño muy curioso y juguetón, que a diferencia de los otros niños, él cuenta con poderes extraordinarios. Franklin estuvo viendo videos en YouTube de cómo colocan fichas de dominó y éstas caen una después de otra. Franklin se dispuso a hacer algo parecido y creó una bolsa de la que puede sacar cualquier cantidad de fichas de dominó uni-dimensionales de cualquier altura y con anchura infinitesimal, también creó una mesa de juago unidimensional (a Franklin también le gusta crear palabras de vez en cuando).\n\nFranklin sacó $n$ fichas de dominó numeradas del $1$ al $n$ y las colocó verticalmente sobre la mesa (parece que es imposible que se equilibren, pero como Franklin tiene poderes más allá de tu imaginación, esto es posible), se sabe que siempre hay una distancia entera $x_i$ mayor a $0$ entre la ficha $i$ y la ficha $i - 1$, para cada $i > 1$. Después de colocar todas las fichas le pareció que si empujaba alguna ficha, esto desencadenaría que todas las fichas caigan. Averigua si Franklin tiene razón. Se sabe que una ficha de dominó $a$ puede hacer caer otra ficha $b$ si es que la altura $h_a$ es mayor a la distancia entre $a$ y $b$ y la ficha $a$ cae en dirección hacia $b$.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada consiste en múltiples casos de prueba. La primera línea contiene un entero $t$ $(1 \\le t \\le 10^4)$, el número de casos de prueba. Cada caso de prueba se describe de la siguiente manera:\n\nPrimera línea: Un entero $n$ $(2 \\le n \\le 10^5)$, el número de fichas de dominó.\n\nSegunda línea: $n$ enteros $h_1, h_2, \\ldots, h_n$ $(1 \\le h_i \\le 10^9)$, donde $h_i$ representa la altura de la ficha $i$.\n\nTercera línea: $(n-1)$ enteros $x_2, x_3, \\ldots, x_n$ $(1 \\le x_i \\le 10^9)$, donde $x_i$ es la distancia entre la ficha $i$ y la ficha $i-1$.\n\nLa suma de $n$ en todos los casos de prueba no excede $10^5$.",
          "EN": ""
        },
        "output": {
          "ES": "Para cada caso de prueba: imprimir la palabra \"habibi\" si empujar alguna ficha puede hacer que todas las demás caigan, o \"which\" si es que no es posible.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4\n2\n10 10\n10\n3\n10 20 30\n9 10\n3\n30 5 10\n10 10\n3\n10 5 30\n10 10\n",
            "output": "which\nhabibi\nhabibi\nhabibi\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "667110f240bc64b446ba1f84"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1593",
      "name": "E. Gran Producto",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "$n \\leq 5$\n",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "$n$ siempre es una potencia de $2$.",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 70,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales. ",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Armando es un niño muy curioso; siempre se obsesiona con algo distinto y, ahora, está obsesionado con los números. En particular, le interesa mucho el hecho de que muchos números naturales puedan ser representados como el producto de otros más pequeños. Por ejemplo $2002$ puede ser representado por $14 \\times 143$; $2880$ puede ser representado por $2 \\times 2 \\times 16 \\times 45$. \n\nTambién se dio cuenta de que puede añadir una cantidad infinita de unos a cualquier número y seguirá siendo el mismo número ($2002 = 14 \\times 143 \\times 1 \\times 1 \\times ...$). Esto le parece absurdo, así que decidió nunca usar unos en sus representaciones.\n\nAhora se pregunta: ¿Cuál es la representacion de un número $n$ como producto de números menores o iguales, que utilice la mayor cantidad de factores posibles y no use unos? \n\nDebes ayudarlo a encontrar este producto. Para que Armando entienda mejor la respuesta, debes imprimir los factores en orden no decreciente y separar cada uno con la letra 'x' (equis minúscula, sin comillas).",
          "EN": ""
        },
        "input": {
          "ES": "La primera y única línea contiene un número entero $n$ ($2 \\leq n \\leq 10^5$).",
          "EN": ""
        },
        "output": {
          "ES": "Una línea con los factores en orden no decreciente, separados por la letra `x`.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "12\n",
            "output": "2x2x3\n"
          },
          {
            "input": "5",
            "output": "5"
          },
          {
            "input": "94202\n",
            "output": "2x19x37x67\n"
          }
        ],
        "note": {
          "ES": "En el primer ejemplo, $12$ puede ser representado como $4 \\times 3$, $12$, $2 \\times 6$ o $2 \\times 2 \\times 3$. La respuesta es $2 \\times 2 \\times 3$ porque es la representación con más factores.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "66710e4a40bc64b446ba1f7b"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1592",
      "name": "D. Secuencia de Divisores",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq a_i \\leq 100$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 70,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Para este problema se van a hallar la suma de los divisores propios de un número excluyendo al mismo, por ejemplo, la suma de los divisores de $n=10$ es $5+2+1=8$.\nEste proceso puede repetirse hasta que no haya más divisores en la suma. Vea el caso $n=10$:\n\n- Suma de los divisores de $10$: $5 + 2 + 1 = 8$.\n- Suma de los divisores de $8$: $4 + 2 + 1 = 7$.\n- Suma de los divisores de $7$: $1$.\n- Suma de los divisores de $1$: $0$.\n\nSe pueden clasificar los números según el comportamiento de la suma de sus divisores. Por ahora, se considerarán los siguientes tipos de números:\n\n- Números \\textbf{perfectos}. Son aquellos cuya suma de divisores es igual al mismo número. Por ejemplo, la suma de los divisores de 6 es $3+2+1=6$.\n- Números \\textbf{románticos}. Si la suma de los divisores de un número da un número distinto, y la suma de los divisores de este último da el número original, entonces se dice que el número es romántico. Por ejemplo, la suma de los divisores de $220$ es $284$, y la suma de los divisores de $284$ es $220$; ambos son números románticos.\n- Números \\textbf{abundantes}. Son aquellos cuya suma de divisores es estrictamente mayor al mismo número. Por ejemplo, la suma de los divisores de $12$ es $6+4+3+2+1=16$; $12$ es un número abundante.\n- Números \\textbf{complicados}. Son aquellos que no son perfectos, románticos ni abundantes.\n\nSe te dará una lista de números y deberás clasificarlos según el tipo de número que sean. \n\nEn caso de que un número sea romántico y abundante a la vez, se debe imprimir primero su clasificación de romántico y luego de abundante. Vea los casos de ejemplo para mayor claridad.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea contiene un número entero $n$ ($1 \\leq n \\leq 10^5$), indicando la cantidad de números que se deben clasificar.\n\nLas siguientes $n$ líneas contienen un número entero $a_i$ ($1 \\leq a_i \\leq 10^5$) cada una, indicando el número que se debe clasificar.",
          "EN": ""
        },
        "output": {
          "ES": "Por cada número se debe imprimir una línea con el número seguido de su clasificación. El número y cada clasificación deben estar separados por un espacio.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n28\n220\n276\n1\n287\n",
            "output": "28 perfecto\n220 romantico abundante\n276 abundante\n1 complicado\n287 complicado\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "66710bb240bc64b446ba1f78"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1590",
      "name": "B. Juego de Cartas",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 50,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq k, a_i \\leq 30$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 50,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Se está jugando un juego, donde el jugador (tú) debe adivinar el número en el que está pensando el otro jugador. Para esto se cuenta con un set de 60 tarjetas que contienen una lista infinita de números; el jugador que piensa en un número debe elegir **todas** las tarjetas donde su número aparece. Y, para que el juego sea justo, el número en el que piensa deber ser positivo y menor o igual a $10^{18}$.\n\nA continuación se presenta el contenido de las primeras 5 tarjetas:\n\n- $1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, ...$\n- $2, 3, 6, 7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31, 34, 35, 38, 39, ...$\n- $4, 5, 6, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31, 36, 37, 38, 39, ...$\n- $8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, ...$\n- $16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 48, 49, 50, 51, ...$\n\nY así sucesivamente hasta llegar a la tarjeta número 60.\n\nSe juegan $q$ rondas del juego. En cada una de ellas se da una lista de $k$ números, indicando **todas** las tarjetas que contienen el número en el que está pensando el otro jugador. Debes adivinar el número secreto en cada ronda.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea contiene un número entero $q$ ($1 \\leq q \\leq 1000$), indicando la cantidad de rondas que se jugarán.\n\nLas siguientes $q$ líneas empiezan con un número entero $k$ ($1 \\leq k \\leq 60$), indicando la cantidad de tarjetas que contiene la ronda. Luego, se presentan $k$ números enteros $a_i$ ($1 \\leq a_i \\leq 60$) separados por un espacio, indicando el número de la tarjeta $i$. Se garantiza que no habrán tarjetas repetidas en una misma ronda.",
          "EN": ""
        },
        "output": {
          "ES": "Por cada una de las $q$ rondas, imprimir en una línea el número secreto en el que estaba pensando el otro jugador.\n\nSe garantiza que la respuesta siempre será un número en el rango de $[1, 10^{18}]$.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4\n4 1 2 3 4\n2 1 2\n3 1 3 4\n7 3 6 9 10 22 29 45\n",
            "output": "15\n3\n13\n17592456577828\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6671032c40bc64b446ba1f65"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1589",
      "name": "A. Áreas",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Dentro de las materias básicas de ingeniería, tenemos el calculo de áreas entre curvas. En este caso tendremos que calcular el área comprendida entre una parábola y el eje X.\n\nPor ejemplo sea la parábola $x^2-4$ para el rango $[-3, 3]$:\n\n![image alt](https://images.juki.pub/o/a6cb21da-0d2a-4235-80eb-a82b57fc1680.png)\n\nEn ese caso las áreas son: \n$$$\nA_1 = \\Bigg | \\int_{-3}^{-2} (x^2-4) \\cdot dx \\Bigg | = \\frac{7}{3}\\\\\nA_2 = \\Bigg | \\int_{-2}^{2} (x^2-4) \\cdot dx \\Bigg | = \\frac{32}{3}\\\\\nA_3 = \\Bigg | \\int_{2}^{3} (x^2-4) \\cdot dx \\Bigg | = \\frac{7}{3}\n$$$\n\nPor tanto el área pedida sera\n\n$A_1 + A_2 + A_3 = \\displaystyle\\frac{46}{3}$\n\nNote que existen casos donde la función puede no presentar raíces en el rango, $x^2+4\\cdot x -5$ en el rango $[-3,0]$\n\n![image alt](https://images.juki.pub/o/3a696171-3bf2-4770-9e13-0e724d8629a7.png)\n\n$$$\nA = \\Bigg | \\int_{-3}^{0} (x^2+4\\dot x- 5) \\cdot dx \\Bigg | = \\frac{24}{1}\n$$$\n",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea contiene un número entero $t$ ($1 \\leq t \\leq 5000$), indicando el número de casos de prueba. Siguen $t$ líneas, una por cada caso de prueba.\n\nCada caso contiene 5 enteros $A, B, C, L, R$ $(-10^4 \\leq A, B, C, L, R \\leq 10^4)$ que son los coeficientes de la ecuación $A\\cdot x^2+B\\cdot x+C = 0$ y el rango $[L,R]$ donde evaluar la función. Se garantiza que $L \\leq R$ y que en caso de existir intersección con el eje de la X, estas intersecciones ocurrirán en valores enteros. Además $A \\neq 0$.",
          "EN": ""
        },
        "output": {
          "ES": "Por cada caso imprima una linea con el área solicitada en la forma $p/q$ donde se garantiza que $p$ y $q$ son números enteros tal que $GCD(p,q)=1$.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n1 0 -4 -3 3\n1 0 -4 0 3\n1 4 -5 -3 0\n",
            "output": "46/3\n23/3\n24/1\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6671014840bc64b446ba1f63"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1591",
      "name": "C. Cumpleañito",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Mateo está exageradamente aburrido pasando clases virtuales. Está mirando la lista de asistentes a la clase, hay hartas personas, en total son 2880 (es una materia compartida con muchas carreras de la Facultad en la cual el docente aprovechó la virtualidad para dar clases a todos sus grupos al mismo tiempo incluyendo grupos de las 5 universidades privadas en la que el dichoso docente trabaja. Esto no está basado en la vida real por si acaso, por favor no se enojen si se sienten identificados :p). Mateo piensa en sus 3 personas favoritas de la clase (sus crush UwU) y se pregunta cuál es la probabilidad de que entre el grupo de estudiantes existan 3 personas que cumplan años en el mismo día del año y que al mismo tiempo no existan más personas que compartan cumpleaños, ni entre ellas ni con las 3 personas.\n\n![image alt](https://images.juki.pub/o/d1a38061-83c9-4202-9a34-fdd19e12546e.png)\n\nAl día siguiente, en su examen de Probabilidad le hacen exactamente la misma pregunta, solo que le piden que generalice la fórmula para $x$ personas dentro de un grupo de $n$. Mateo odia las matemáticas y por eso no estudió probabilidad para la ICPC, así que te pide que le ayudes con esta molesta pregunta de examen (considerar que un año tiene 365 días).",
          "EN": ""
        },
        "input": {
          "ES": "La entrada consiste en múltiples casos de prueba. La primera línea contiene un entero $t$ $(1 \\le t \\le 10^3)$, el número de casos de prueba.\n\nCada caso de prueba está compuesto por una única línea que contiene dos enteros $n, x$ $(2 \\le x \\le n \\le 10^{18} )-$ la cantidad de personas en el grupo y cuántas personas deben tener el mismo cumpleaños.",
          "EN": ""
        },
        "output": {
          "ES": "Para cada caso de prueba imprima la respuesta al problema. Se puede demostrar que la respuesta puede ser representada como una fracción irreducible $\\frac{x}{y}$.\n\nImprima $xy^{-1}$ modulo $10^9 + 7$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4\n2 2\n3 2\n28 3\n100 99\n",
            "output": "882191787\n839324457\n542713201\n259255172\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "666e140b40bc64b446ba158e"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1595",
      "name": "G. Grandes Factores",
      "tags": [],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 9,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 40,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 51,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "666e104840bc64b446ba1579"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1586",
      "name": "Reino de Numerolandia",
      "tags": [
        "arreglos",
        "busqueda",
        "array"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "",
          "EN": "En el reino de Numerolandia, donde viven todos los números, se llevará a cabo pronto\nunas elecciones para elegir al nuevo rey. \n\nLos números tienen una forma curiosa de elegir al nuevo rey. Ellos escogen a $N$ números\nenteros positivos, de los cuales saldrá el nuevo rey.\n\nLos encargados de elegir al nuevo rey son los números negativos. Los números negativos\nestan tristes porque ellos jamas podran ser el rey, asi que algunas veces eligen como rey\na un número que no esta en la lista de N números.\n\nTu tarea es determinar si el rey elegido esta en la lista de $N$ números. "
        },
        "input": {
          "ES": "",
          "EN": "La primera linea de entrada consiste en un número entero positivo $N$ $(1 \\leq N \\leq 100)$\nque indica la cantidad de numeros que estan en la lista de números.\n\nLa segunda linea contiene a $N$ números enteros positivos separados por un espacio, que \nson la lista de N elegidos.\n\nLa tercera línea consiste en un número entero $x$ que es el número que eligen como rey\nlos números negativos."
        },
        "output": {
          "ES": "",
          "EN": "La salida debe ser **SI** en caso de que $x$ este en la lista de $N$ elegidos o **NO** en caso\ncontrario."
        },
        "sampleCases": [
          {
            "input": "5\n3 7 8 9 10\n4",
            "output": "NO\n"
          },
          {
            "input": "6\n1 3 4 9 2 8\n9",
            "output": "SI\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "666a1b16cb10881ed745168d"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1585",
      "name": "Sucesión Fibonacci",
      "tags": [
        "math"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq Q \\leq 100$\n- Solo consultas de tipo 1\n- $1 \\leq i \\leq 10$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 15,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq Q \\leq 1000$\n- Solo consultas de tipo 1\n- $1 \\leq i \\leq 46$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq Q \\leq 100$\n- Consultas de tipo 1 y 2\n- $1 \\leq i \\leq j \\leq 10$",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 25,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq Q \\leq 1000$\n- Consultas de tipo 1 y 2\n- $1 \\leq i \\leq j \\leq 40$",
              "EN": ""
            }
          },
          "5": {
            "group": 5,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq Q \\leq 100000$\n- Consultas de tipo 1 y 2\n- $1 \\leq i \\leq j \\leq 90$",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "La sucesión Fibonacci es una secuencia de números naturales que establece que cada término de la sucesión es la suma de los dos términos anteriores, comenzando con los valores iniciales 0 y 1.\n\nPodemos definir recursivamente de la siguiente manera:\n\n$$\nF_0 = 0 \\\\\nF_1 = 1 \\\\\nF_n = F_{n - 1} + F_{n - 2}, \\text{para } n \\ge 2\n$$\n\nLos primeros 10 términos de la sucesión Fibonacci son: $0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...$.\n\nDado un número entero Q y una lista de consultas, cada consulta puede ser de dos tipos:\n\n1. Imprimir el i-ésimo número de Fibonacci.\n2. Imprimir la suma de los números de Fibonacci desde el i-ésimo hasta el j-ésimo término (inclusive).",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea sera un único número entero $Q$, el número de consultas.\n\nSeguirán $Q$ líneas, cada una describiendo una consulta. Cada consulta puede ser de tos tipos\n- Tipo 1: `1 i`, donde $i$ es el índice del número de Fibonacci a imprimir.\n- Tipo 2: `2 i j`, donde $i$ y $j$ son los índices que delimitan el rango de la suma.",
          "EN": ""
        },
        "output": {
          "ES": "Para cada consulta, imprime el resultado correspondiente:\n\n- Para las consultas del tipo `1 i`, imprime el i-ésimo número de Fibonacci.\n- Para las consultas del tipo `2 i j`, imprime la suma de los números de Fibonacci desde el i-ésimo hasta el j-ésimo término (inclusive).",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n1 5\n2 2 5\n1 10\n",
            "output": "5\n11\n55\n"
          },
          {
            "input": "4\n1 0\n1 1\n2 0 1\n2 0 2\n",
            "output": "0\n1\n1\n2\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "66451744be3d505a34b6a0a3"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1584",
      "name": "Imprimir 1 o 2",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Ernesto es un chico muy curioso, el quiere saber si el numero A es uno o es dos. Ayudalo con esta tarea."
        },
        "input": {
          "ES": "",
          "EN": "La entrada sera un entero $A$ que sera 1 o 2."
        },
        "output": {
          "ES": "",
          "EN": "La salida sera una cadena. Si es 1 la respuesta sera \"Es 1\" y si la respuesta es 2 la respuesta sera \"Es 2\"."
        },
        "sampleCases": [
          {
            "input": "1",
            "output": "Es 1"
          },
          {
            "input": "2",
            "output": "Es 2"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "661a900608e3063b6ba2155f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1583",
      "name": "LOS 3 OSOS",
      "tags": [
        "basico"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Polar el Oso, vive junto a sus hermanos Pardo y Panda en un gran bosque, como Polar es muy meticuloso, quiere saber cuantos panales de miel hay en el bosque, como el bosque es muy grande los osos deciden dividirse el mismo. Así cada oso va a contar los panales que hay en una determinada zona. Al final cada oso contó lo siguiente, Polar contó **a** panales, Pardo contó **b** panales y Panda contó **c** panales. Ahora piden tu ayuda para saber cuantos panales hay en total.",
          "EN": ""
        },
        "input": {
          "ES": "Se te darán 3 números enteros positivos $a$, $b$ y $c$, que son las cantidades de panales que contaron los osos.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir un solo número que indique cuántos panales hay en total en el bosque.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5  10  12",
            "output": "27"
          },
          {
            "input": "1  5  100",
            "output": "106"
          },
          {
            "input": "50  1  1",
            "output": "52"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6619ba68c02ac8174a2e31f2"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1582",
      "name": "MAXIMO DE DOS NÚMEROS",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/39be7994-21f8-4a02-8ff2-e69066fed73c.png",
        "nickname": "rzeballos",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "rzeballos",
      "statement": {
        "description": {
          "ES": "Se te entregan dos números enteros, separados por un espacio. Ambos números son mayores que cero y menores a 10^6. Escribe un programa para escribir el mayor de los dos números, se asegura que ambos números son diferentes. ",
          "EN": ""
        },
        "input": {
          "ES": "Dos números enteros separados por un espacio.",
          "EN": ""
        },
        "output": {
          "ES": "Escribe el número mayor entre los dos números.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5 6",
            "output": "6"
          },
          {
            "input": "3 9",
            "output": "9"
          },
          {
            "input": "25 23",
            "output": "25"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6610785ecc02a54cef8003c1"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1581",
      "name": "NÚMEROS UNITARIOS",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/39be7994-21f8-4a02-8ff2-e69066fed73c.png",
        "nickname": "rzeballos",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "rzeballos",
      "statement": {
        "description": {
          "ES": "Un número unitario es aquel número que, es divisible por su unidad.\nPor ejemplo, si el número fuera 213, vamos a verificar si es un número unitario, verificando si 213 es un múltiplo de su UNIDAD, que en este caso es 3.\n213 / 3 = 71",
          "EN": ""
        },
        "input": {
          "ES": "Un número único N ( 10 < N < 10^4 )",
          "EN": ""
        },
        "output": {
          "ES": "Escribe un SI cuando el número completo sea divisible por su unidad. Y escribe NO en caso contrario.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "213",
            "output": "SI"
          },
          {
            "input": "725",
            "output": "SI"
          },
          {
            "input": "857",
            "output": "NO"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "66106d18cc02a54cef8003b2"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1580",
      "name": "EL OSO MÁS PESADO",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/39be7994-21f8-4a02-8ff2-e69066fed73c.png",
        "nickname": "rzeballos",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "rzeballos",
      "statement": {
        "description": {
          "ES": "Juki quiere convertirse en el más grande de los osos, o al menos en ser más grande que su propio hermano Patricio. \n\nEn este momento, Juki y Patricio pesan A y B respectivamente. Está garantizado que el peso de Juki es menor o igual al peso de su hermano. \n\nJuki come mucho y su peso se triplica cada año, mientras que el peso de Patricio se duplica cada año. \n\n¿Después de cuántos años completos Juki llegará a ser estrictamente más grande (estrictamente más pesado) que Patricio?",
          "EN": ""
        },
        "input": {
          "ES": "La única línea de entrada contiene dos números enteros A y B (1 ≤ A ≤ B ≤ 10): el peso de Juki y el peso de Patricio, respectivamente.",
          "EN": ""
        },
        "output": {
          "ES": "Imprime un número entero, que indica el número entero de años después de los cuales Juki será estrictamente más grande que su hermano Patricio.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 7",
            "output": "2"
          },
          {
            "input": "4 9",
            "output": "3"
          },
          {
            "input": "1 1",
            "output": "1"
          }
        ],
        "note": {
          "ES": "En el caso de prueba, Juki pesa 4 y Patricio pesa 7 inicialmente. Después de un año, sus pesos son 4·3 = 12 y 7·2 = 14 respectivamente (un peso se triplica mientras que el otro se duplica). Juki aún no es más grande que Patricio. Después del segundo año los pesos son 36 y 28, por lo que el primer peso es mayor que el segundo. Juki se volvió más grande que Patricio después de dos años, por lo que deberías imprimir 2.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "65f320debb674bc93d0993cc"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1573",
      "name": "Frogo",
      "tags": [
        "greedy",
        "sortings"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "pacha2880",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "Los fieles integrantes del \\\"Club de Algoritmos 2880\\\" salieron de\nexcursión, ellos aprovechan cada Domingo para subir las gradas del\n\\\"Cristo de la Concordia\\\". Esta vez quisieron imponerse un nuevo reto,\nsubir las gradas del Parque Tunari, en esta ocación solo lograron llegar\nhasta la mitad (les falta entrenamiento a estos maestros). Sin embargo,\nno volvieron con las manos vacias, se habían encontrado a una rana\nsaltarina que no paraba de seguirles, así que decidieron adoptarla y\nbautizarla como \\\"Frogo\\\".\n\nFrogo es una rana que cuenta con un límite de salto, solo puede saltar\ncomo máximo una altura de $k$ y, convenientemente, Frogo máximo puede caer\nuna altura de $k$; si cae de una altura mayor a $k$ o si debe saltar una\naltura mayor a $k$ se desvive.\n\nArmando convenció al Club de Algoritmos de dejar a Frogo en su casa,\nya que cuenta con un patio amplio y tiene planeado un pequeño juego para\nla dichosa rana. Ha colocado a Frogo en una pecera, la cual\ncontiene peldaños de distintas alturas, y quiere divertirse observando a\nla rana saltar y ver si es que puede llegar desde el peldaño que se\nencuentra mas hacia la izquierda hasta el que se encuentra mas hacia la\nderecha.\n\nFrogo no quiere morir, así que te pide tu ayuda, quiere saber si es que\nreorganizando los peldaños es posible que se salve, por favor ayuda a\nFrogo.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea contiene un número entero $t$ $(1\\le t\\le 10^3)-$ el número de casos de prueba.\n\nLa primera línea de cada caso de prueba contiene dos números enteros $n$, $k$ $(2\\le n \\le 1000 ; 1\\le k \\le 10^9)-$ donde $n$ es el número de peldaños en la pecera y $k$ es el límite de salto de Frogo.\n\nLa segunda linea continene $n$ numeros enteros $a_1,a_2,...,a_n(1 \\le a_i \\le 10^9)-$ las alturas de los peldaños de izquierda a derecha.\n\nSe garantiza que la sumatoria de $n$ entre todos los casos de prueba no excede $2000$.",
          "EN": ""
        },
        "output": {
          "ES": "Para cada caso de prueba imprime \"S\" si es que Frogo puede sobrevivir reorganizando los peldaños, caso contrario imprime \"F\".",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n2 3\n1 3\n2 2\n1 3\n2 2\n1 4\n4 4\n10 9 2 5\n5 4\n10 20 4 15 17\n",
            "output": "S\nS\nF\nS\nF\n"
          }
        ],
        "note": {
          "ES": "Para el tercer caso de ejemplo, no importa si el orden de los peldaños se deja como está ($1$ $4$) o si se los reorganiza de otra forma ($4$ $1$), siempre habrá un salto o caída de altura mayor a $2$.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "Nos conviene que, cuando alguien esté parado en un peldaño, el siguiente sea aquel que minimice la diferencia con el actual. El peldaño con la menor diferencia respecto al de menor tamaño es el segundo de menor tamaño. Ahora, si ya hemos pasado por el de menor tamaño y por el segundo de menor tamaño, entonces el siguiente más cercano sería el de tercer menor tamaño, y así sucesivamente. Por lo tanto, podemos ordenar los peldaños de menor a mayor y verificar que las diferencias entre peldaños sean menores o iguales a $k$. La complejidad es $O(n \\log n)$.",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6581f41238d5dd0e37e9b4e3"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1579",
      "name": "El Club del Juego",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 5000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 5000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 10000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 15000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Disclaimer: Esta historia es tan solo un \"What if\", se recomienda discreción.\n\nLos miembros del \"Club de algoritmos 2880\" estan hartos de dar tantos contests y ya no quieren hacer programación competitiva :( han entrenado ya por años y no han logrado sus metas. Las promesas hechas por los miembros del equipo \"Que Empató\" no se han cumplido, todos ya han llegado a azul o a morado, pero aún asi no ha sido suficiente para vencer a los demás equipos y no entienden el motivo de tantas derrotas. Pero la verdad es que los orgullosos miembros del club no hicieron caso a sus mentores, se dejaron llevar por su inidividualidad y nunca se atrevieron a entrenar aquello que realmente nos hace grandes, el trabajo en equipo.\n\nEs por eso que los miembros del \"Club de algoritmos 2880\" decidieron cerrar el club y abrir un nuevo club, \"El Club del Juego\" desonrando a uno de sus mentores eliminando el número sagrado del nombre. El club del juego se reune cada jueves en el Cowork Café y juegan a las apuestas, se sientan en una mesa redonda y cada miembro del club escoge su número favorito (el número 2880 está prohibido de ser escogido), luego proceden a lanzar un dado de $m$ caras con números enteros del $1$ al $m$, donde cada número tiene la misma probabilidad de salir. Los jugadores se sientan en cierto orden y lanza cada uno el dado en sentido horario, el juego se termina si al jugador que lanza el dado le toca un divisor de su número favorito y este sale como ganador del juego, cabe recalcar que la mesa es redonda, asi que el juego puede dar varias vueltas a dicha mesa.\n\nCalcula para cada miembro la probabilidad de que gane."
        },
        "input": {
          "ES": "",
          "EN": "La primera línea contiene dos número enteros $n$, $m$ $(2\\le n \\le 10^5 ; 1\\le m \\le 10^{13})-$ donde $n$ es el número de miembros del club y $m$ es el número de caras que tiene el dado.\n\nLa segunda linea continene $n$ numeros enteros $a_1,a_2,...,a_n(1 \\le a_i \\le m; a_i \\neq 2880)-$ los números favoritos de cada miembro en el orden en el que se encuentran sentados."
        },
        "output": {
          "ES": "",
          "EN": "Imprima la respuesta al problema, $n$ números enteros, donde el i-ésimo representa la probabilidad de que el i-ésimo miembro gane.\n\nSe puede demostrar que la probabilidad puede ser representada como una fracción irreducible $\\frac{x}{y}$.\n\nPara cada probabilidad imprima $xy^{-1}$ modulo $10^9 + 9$"
        },
        "sampleCases": [
          {
            "input": "5 1\n1 1 1 1 1",
            "output": "1\n0\n0\n0\n0\n"
          },
          {
            "input": "5 2\n1 2 1 1 1",
            "output": "499122177\n499122177\n0\n0\n0\n"
          },
          {
            "input": "5 2\n1 1 1 1 1",
            "output": "64402862\n32201431\n515222892\n257611446\n128805723\n"
          },
          {
            "input": "1 5\n3",
            "output": "1"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "658205a37f2a8c7d7bb46879"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1578",
      "name": "Construyendo palomares",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Luego de años de arduo trabajo y sacrificio, Angeloh pudo comprar una casa con un gran jardín. Siempre soñó con un jardín lleno de palomas viviendo felices en muchas casas pequeñas (con todas las necesidades y lujos que una paloma podría querer), formando una mini ciudad.\n\nEn el criadero local le dijeron que hay $n$ especies distintas, y que tienen $p_i$ palomas de la $i$-ésima especie disponibles para venderle.\n\nEstudios demuestran que las palomas son más felices si viven en casas habitadas por exactamente $k$ palomas. Angeloh quiere que las suyas sean óptimamente felices, también le encanta ver los diversos colores de todas las especies; por esto, quiere comprar palomas de modo que pueda asignar cada una a una casa, que cada casa albergue a **exactamente $k$** palomas, y que todas las palomas de cada casa sean de **especies distintas**.\n\nAngeloh no está seguro de cuántas o cuáles palomas comprar para realizar su visión; pero, más importante aún, debe empezar a construir las casas para que sus palomas estén sanas y salvas. Ese es el motivo por el que pide tu ayuda. Por ahora, Angeloh no necesita saber cuáles palomas comprar, pero quiere que le digas cuál es el máximo número de casas que puede construir, de modo que sea posible comprar y asignar palomas a cada casa siguiendo sus especificaciones y que ninguna casa quede vacía."
        },
        "input": {
          "ES": "",
          "EN": "La primera línea contendrá dos enteros $n$ y $k$ (1 $\\leq n \\leq 10^5, 1 \\leq k \\leq 10^4$), indicando el número de especies de palomas que hay en el criadero y la cantidad de palomas que deben vivir en una misma casa para que sean óptimamente felices.\n\nLa siguiente línea contiene $n$ enteros $p_i$ ($1 \\leq p_i \\leq 10^9$), indicando la cantidad de palomas de la $i$-ésima especie disponibles para comprar."
        },
        "output": {
          "ES": "",
          "EN": "Se debe imprimir un solo número entero, indicando el máximo número de casas que Angeloh puede construir siguiendo sus especificaciones."
        },
        "sampleCases": [
          {
            "input": "3 2\n3 4 1\n",
            "output": "4\n"
          },
          {
            "input": "2 3\n5 4\n",
            "output": "0"
          },
          {
            "input": "5 3\n5 20 7 2 13\n",
            "output": "13"
          }
        ],
        "note": {
          "ES": "",
          "EN": "Para el primer caso de ejemplo, es posible tener palomas de la primera y segunda especie en 3 casas, y palomas de la segunda y tercera especie en 1 casa. Nótese que es imposible construir más casas sin que queden vacías porque Angeloh compraría todas las palomas disponibles en del criadero.\n\nPara el segundo caso de ejemplo, es imposible que exista una casa con 3 especies distintas de palomas."
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": "Temas: Búsqueda binaria, Principio del palomar\n\nLa primera observación para resolver el problema es que si Angeloh puede construir $x$ casas de forma que se cumplan sus especificaciones, entonces también puede construir $x-1$; simplemente comprando $k$ palomas menos. Del mismo modo, si no puede construir $x$ casas, entonces tampoco puede construir $x+1$. Esto indica a una solución con búsqueda binaria.\n\nAhora, para verificar si es posible construir $x$ casas, seguimos la estrategia de comprar el máximo número de palomas posible y asignarlas a las casas. \n\nPara cumplir la condición de que no existan dos palomas de la misma especie en la misma casa, usamos el _principio del palomar_: \n\n\\textAlign=center\nSi tenemos $n$ palomas y $m$ palomares con $n > m$, entonces existe al menos un palomar con más de una paloma. \n\nEn nuestro caso, si tenemos $p_i$ palomas de la $i$-ésima especie, $x$ casas y $p_i > x$, entonces existirá al menos una casa con más de una paloma de dicha especie. Por lo tanto, si hay $p_i$ palomas de la $i$-ésima especie, la máxima cantidad de palomas de esa especie que Angeloh puede comprar es $\\min(p_i, x)$.\n\nAsumiendo que hay $tot$ palomas que pueden ser compradas; para asignarlas a las casas, podemos visualizarlas todas en una línea. Luego, asignamos la primera paloma a la casa $1$, la segunda a la casa $2$, ..., la $x$-ésima a la casa $x$, la $x+1$-ésima a la casa $1$, y así sucesivamente. Podemos observar que la casa con menos palomas tendrá $\\lfloor \\frac{tot}{x} \\rfloor$ palomas; Angeloh quiere que cada casa albergue a exactamente $k$ palomas, por lo que si $\\lfloor \\frac{tot}{x} \\rfloor \\geq k$, entonces es posible construir $x$ casas con $k$ palomas de distintas especies en cada una.\n\nComo dato interesante, durante la competencia hubo varios envíos que usaban la misma idea, pero tenían un error en la implementación que causaba overflow en el resultado de una multiplicación. Nótese que la máxima cantidad de casas que Angeloh puede construir es $10^{14}$ si $k=1$, por lo que no es necesario revisar valores mayores en la búsqueda binaria.\n\n```CPP\ntypedef long long ll;\n...\nll res = 0;\nll lo = 1, hi = (ll)1e14;\nwhile (lo <= hi) {\n  ll mid = (lo + hi) / 2;\n  ll tot = 0;\n  for (int i = 0; i < n; i++) {\n    tot += min(p[i], mid);\n  }\n  if (tot/mid >= k) {\n    res = mid;\n    lo = mid + 1;\n  }\n  else {\n    hi = mid - 1;\n  }\n}\ncout << res << endl;\n```\n"
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "658204dd7f2a8c7d7bb46877"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1577",
      "name": "Randy Rangos",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Randy es un estudiante universitario apasionado por la ICPC. Hace un tiempo, durante los entrenamientos semanales que tiene con su equipo, aprendió sobre problemas de consultas en rangos y quedó fascinado. Desde entonces, Randy siempre molesta a sus amigos insistiendo en que resuelvan problemas de este estilo; incluso a sus amigos de otras carreras...\n\nDurante una visita al parque Lincoln, Randy se encuentra con un señor haciendo ejercicio en una polera de ICPC. Con aire de superioridad, se acerca al señor con el problema de rangos más dificil que conocía; para su sorpresa, le da una solución correcta menos de un segundo después de escuchar el problema. Al mirarlo de cerca, Randy se da cuenta de que está hablando con Poly, el primer boliviano en obtener el titulo de _Grandmaster_ en Codeforces y último miembro viviente del Club de Algoritmos 2880.\n\nPoly sonríe, alegre de encontrarse con alguien que comparte su misma pasión. Siguiéndole el juego a Randy, dice \"Si no resuelves este problema, te golpeo\". El problema es el siguiente:\n\nSe define la función $f(x)$ como la suma de los dígitos en base $10$ de $x$ menos el dígito con menor valor. Por ejemplo, $f(324) = 3 + 2 + 4 - 2 = 7$ o $f(1100) = 1 + 1 + 0 + 0 - 0 = 2$.\n\nDado un arreglo $a$ de $n$ enteros numerados de $1$ a $n$, procesar $q$ consultas de dos tipos:\n\n1. Dados dos enteros $x$ y $v$, reemplazar el valor de $a_x$ por $v$\n2. Dados dos enteros $l$ y $r$, calcular la mínima cantidad de veces que se debe aplicar la función $f(a_i)$ a los elementos de $a$ en el rango $[l, r]$, de modo que todos los elementos en ese rango se vuelvan iguales.\n\nNótese que, mientras se procesan las consultas de tipo 2, los elementos de $a$ no cambian.\n\nRandy no logra resolver el problema, incluso luego de irse a su casa y pensarlo por días. Afortunadamente, hoy se celebra la primera versión de la SanSi Cup, una competencia de programación donde se reúnen los mejores programadores de todo el país. Va uno por uno, pero parece que nadie puede resolver el problema. Eres la única persona que falta, debes resolverlo para evitar que golpeen a Randy."
        },
        "input": {
          "ES": "",
          "EN": "La primera línea contiene un entero $n$ ($1 \\leq n \\leq 10^5$).\n\nLa segunda línea contiene $n$ enteros que forman el arreglo $a$ ($0 \\leq a_i \\leq 10^{18}$).\n\nLa tercera línea contiene un entero $q$ ($1 \\leq q \\leq 10^5$), indicando la cantidad de consultas que se deben procesar.\n\nLas siguientes $q$ líneas contienen tres enteros cada una, indicando lo siguiente:\n\n  - Si el primer entero es igual a $1$, siguen dos enteros $x$ y $v$ $(1 \\leq x \\leq n, 0 \\leq v \\leq 10^{18})$, indicando los valores para la consulta de tipo $1$. \n  - Si el primer entero es igual a $2$, siguen dos enteros $l$ y $r$ ($1 \\leq l \\leq r \\leq n$), indicando el rango para la consulta de tipo $2$.\n"
        },
        "output": {
          "ES": "",
          "EN": "Por cada consulta de tipo $2$, se debe imprimir un entero indicando su respuesta."
        },
        "sampleCases": [
          {
            "input": "4\n50 5 15 4\n3\n2 1 3\n1 3 14\n2 2 4",
            "output": "2\n4"
          },
          {
            "input": "8\n88 178 146 95 84 198 55 103\n5\n2 6 8\n2 2 5\n2 3 8\n1 8 169\n2 6 7",
            "output": "7\n10\n14\n5"
          }
        ],
        "note": {
          "ES": "",
          "EN": "Para el primer caso de ejemplo:\n\n  - La primera consulta es de tipo $2$, se necesita aplicar la función $f(a_i)$ dos veces para que todos los elementos en el rango $[1,3]$ sean iguales: $f(50)=5, f(15)=5$.\n\n  - La segunda consulta es de tipo $1$, se reemplaza el valor de $a_3$ por $14$.\n\n  - La tercera consulta es de tipo $2$, se necesita aplicar la función $f(a_i)$ cuatro veces para que todos los elementos en el rango $[2,4]$ sean iguales: $f(5)=0, f(f(14))=0, f(4)=0$."
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": "Temas: Segment Tree, Lowest Common Ancestor\n\nPrimero veamos la solución para una versión más fácil del problema: Dados dos números $a$ y $b$, ¿cuál es el mínimo número de veces que se debe aplicar $f(x)$  para que ambos sean iguales?\n\nPor ejemplo, si $a = 192$ y $b = 100$, entonces la respuesta es $3$: $f(f(192)) = f(100) = 1$. Viéndolo como caminos en un grafo:\n\n|        |        |        |        |        |        |        |\n| ------ | ------ | ------ | ------ | ------ | ------ | ------ |\n| $192$ | $\\rightarrow$ | $11$ | $\\rightarrow$ | $1$ | $\\rightarrow$ | $0$ |\n| | |                    $100$ | $\\rightarrow$ | $1$ | $\\rightarrow$ | $0$ |\n\nPodemos observar tres propiedades de $f(x)$:\n  1. Aplicar $f(x)$ repetidas veces, no genera un ciclo excepto para $x = 0$.\n  2. Todos los valores válidos del problema llegan a $0$ después de aplicar $f(x)$ no más de $4$ veces.\n  3. El grafo resultante de usar las aristas $x \\rightarrow f(x)$ para todo $x > 0$ es un árbol con raíz en $0$.\n\nLas demostraciones quedan como ejercicio.\n\nSabemos que cualquier par de valores $a$ y $b$ pueden volverse iguales aplicando $f(x)$ hasta que lleguen a $0$, pero para aplicar la función la menor cantidad de veces, debemos hacer que se vuelvan iguales al primer valor donde sus caminos se crucen. En el ejemplo anterior, $1$ es el primer valor donde los caminos se cruzan. \n\nEsto equivale a encontrar el ancestro común más bajo de $a$ y $b$ en el árbol que forma $x \\rightarrow f(x)$. Nótese que, por la propiedad 2, encontrar este ancestro con fuerza bruta es prácticamente $O(1)$. La cantidad de veces que se debe aplicar $f(x)$ es la distancia de $a$ a este ancestro, más la distancia de $b$ a este ancestro.\n\nAhora, para resolver el problema original, podemos usar la misma idea para la operación de unión de dos nodos en un _segment tree_. En cada nodo, guardamos $val$ (el valor del nodo), $opSum$ (la cantidad de operaciones necesarias para que todos los valores en su rango se vuelvan iguales a $val$) y $tam$ (la cantidad de elementos en su rango). Para unir dos nodos $izq$ y $der$:\n\n  - $val = lca(izq.val, der.val)$\n  - $opSum = dist(izq.val, val)*izq.tam + dist(der.val, val)*der.tam + izq.opSum + der.opSum$\n  - $tam = izq.tam + der.tam$\n\nUna vez definida esta operación de unión de nodos, basta con preguntar por el valor de $opSum$ en los rangos $[l, r]$ de las consultas de tipo $2$. Las consultas de tipo $1$ se procesan con una actualización estándar de una posición en el segment tree. La complejidad de esta solución es $O(n\\log n)$."
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "658204337f2a8c7d7bb46876"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1576",
      "name": "Sufijos",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 3000,
        "memoryLimit": 1024000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 6000,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 9000,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 9002,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Dadas $n$ **_palabras diccionario_** y $q$ preguntas, para cada pregunta responder lo siguiente:\n\n- Leer $s$, la **_palabra pregunta_**.\n- Leer el entero $k$.\n- Encontrar todas las **_palabras diccionario_** que tengan un sufijo en común con la **_palabra pregunta_**.\n- Entre las **_palabras diccionario_** que tengan un sufijo en común con la **_palabra pregunta_** seleccionar las que contengan el sufijo en común más largo.\n- Ordenar lexicográficamente las palabras seleccionadas.\n- Seleccionar la palabra que se encuentre en la $k$-ésima posición.\n- Imprimir la posición de la palabra seleccionada respecto al orden original de las _palabras diccionario_.\n- Si es que existen menos de $k$ palabras con sufijo común más largo, imprimir $-1$.\n"
        },
        "input": {
          "ES": "",
          "EN": "La primera línea contine un número entero $n$ $(1 \\leq n \\le 10^5)-$la cantidad de **_palabras diccionario_**.\n\nCada una de las siguientes $n$ lineas contienen contienen una palabra $d_i$ $(1 \\le |d_i| \\le 5; 1 \\le i \\le n)$, consistida por letras latinas en minúscula, se garantiza que todas estas palabras son distintas entre sí.\n\nLa siguiente linea continene un número entero $q$ $(1 \\le q \\le 10^5)-$la cantidad de preguntas.\n\nCada una de las siguientes $q$ lineas continenen la información de cada pregunta, una palabra $s_i$ compuesta por letras latinas en minúscula y un número entero $k_i$ $(1 \\le |s_i| \\le 5; 1 \\le k_i \\le 10^5; 1 \\le i \\le q)$.\n\nSe garantiza que el tamaño total de las **_palabras diccionario_** no exede $5*10^5$. De igual forma, se garantiza que el tamaño total de las **_palabras pregunta_** no exede $5*10^5$."
        },
        "output": {
          "ES": "",
          "EN": "Para cada pregunta imprime la respuesta."
        },
        "sampleCases": [
          {
            "input": "4\nvaca\nbaca\nhola\nabola\n6\na 1\na 3\na 4\na 5\nlola 2\nahaca 1\n",
            "output": "4\n3\n1\n-1\n3\n2\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": "Para la quinta pregunta en el caso de ejemplo, las palabras diccionario que tienen el sufijo común más largo con \"lola\" son \"hola\" y \"abola\". De esas dos palabras, la 2da en orden lexicográfico es \"hola\", que se encuentra en la 3ra posición de la lista original."
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "658200d27f2a8c7d7bb46872"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1575",
      "name": "El Juego",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1999,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Un soleado sábado por la mañana, Oliver y Armando, miembros entusiastas del \"Club de Algoritmos 2880\", decidieron pasar un día saludable en el Parque Lincoln. Después de unas intensas sesiones de dominadas en las barras del parque, decidieron tomarse un descanso y saciar su apetito con un poco de yogurt griego. Emprendieron su camino hacia la tienda más cercana, charlando animadamente sobre sus proezas físicas.\n\nMientras se dirigían a la tienda, su atención fue capturada por un antiguo árbol de aspecto peculiar. El árbol, con sus ramas retorcidas y hojas que susurraban historias del pasado, parecía esconder un misterio. Armando, siempre curioso, sugirió que hicieran una pausa y jugaran un juego en el que el árbol sería el escenario.\n\nOliver aceptó el desafío, intrigado por la idea de un juego espontáneo en medio del parque. Armando explicó las reglas: \"Aquí, cada jugador tiene su turno maestro, y para aclarar, la raiz del árbol es el nodo $1$. Yo empiezo desde la raiz y escojo a un vecino, luego, tú escojerás a un vecino del nodo que yo escogí y así sucesivamente. El jugador que ya no pueda escojer un vecino del nodo actual, pierde. Además, cabe recalcar que no puedes escoger un vecino que ya habiamos escogido anteriormente maestro.\"\n\nCon una sonrisa en el rostro, Oliver se volvió hacia tí y dijo: \"¡Amigo, necesito tu ayuda para ganar este juego! ¿Puedes indicarme si es que teniendo una estrategia optima, yo ganaré? ¡Sería genial llevarnos la victoria en este desafío improvisado!\"."
        },
        "input": {
          "ES": "",
          "EN": "La primera línea contiene un número entero $t(1\\le t\\le 10^5)-$ el número de casos de prueba.\n\nLa primera línea de cada caso de prueba contiene un número entero $n$ $(2\\le n \\le 10^5)-$ donde $n$ es el número de nodos que contiene el árbol.\n\nLas siguientes $n-1$ líneas contienen la descripción del árbol. Cada línea contiene dos enteros $a_i$, $b_i$ $(1 \\le a_i, b_i \\le n, a_i \\neq b_i)$, indicando que existe una arista entre el nodo $a_i$ y el nodo $b_i$ (está garantizado que las aristas forman un árbol, un grafo en el que existe un camino único entre cada par de nodos y que además no contiene ciclos).\n\nSe garantiza que la sumatoria de $n$ entre todos los casos de prueba no excede $10^5$."
        },
        "output": {
          "ES": "",
          "EN": "Para cada caso de prueba imprime \"O\" si es que Oliver puede ganar el juego con la estrategia optima, caso contrario imprime \"F\"."
        },
        "sampleCases": [
          {
            "input": "5\n2\n1 2\n3\n1 2\n3 2\n3\n1 2\n1 3\n4\n1 2\n1 3\n2 4\n5\n1 2\n2 3\n1 4\n4 5\n",
            "output": "F\nO\nF\nF\nO\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6582001d7f2a8c7d7bb46870"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1574",
      "name": "El Misterio del Triángulo Sagrado",
      "tags": [
        "geometry"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "Pacha",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "En la cima de la Montaña de la Sabiduría, el triángulo sagrado permanecía como un enigma sin resolver, esperando a que un nuevo héroe emprendiera la búsqueda de su conocimiento oculto. Los sabios del reino, conscientes de la antigua tradición, proclamaron que el próximo individuo capaz de calcular el área sombreada bajo el triángulo sería digno del tesoro que la montaña guardaba.\n\nEl destino eligió a un joven talentoso llamado Alex, cuyas habilidades matemáticas eran conocidas en todo el reino. Inspirado por las leyendas y desafiado por la tarea que yacía ante él, Alex se aventuró hacia la cima de la montaña.\n\nAl llegar, el triángulo sagrado se erigía majestuosamente, proyectando su sombra en un patrón intrincado debido a los rayos paralelos verticales que caían desde la luz divina en lo alto. Los sabios presentes instaron a Alex a tomar la responsabilidad de calcular el área sombreada, recordándole la antigua promesa de sabiduría para quien lograra resolver el enigma.\n\nCon papel, pluma y una mente aguda, Alex se sumergió en la tarea desafiante. Los cálculos se convirtieron en un baile matemático, cada número y fórmula una pieza vital para desentrañar el secreto. La sombra danzaba sobre el triángulo, revelando la complejidad del problema geométrico.\n\nFinalmente, Alex llegó a una solución. El área sombreada bajo el triángulo sagrado, incluyendo la sombra proyectada por los rayos divinos, estaba ahora registrada en el papel. La emoción y la anticipación llenaron el aire mientras los sabios observaban con atención.\n![image alt](https://images.juki.pub/o/d430e5a6-62f0-4867-a7d9-65c97fd459cf.png)\nLa luz sobre el triángulo sagrado parpadeó por un momento, como si reconociera el logro de Alex. La roca se estremeció levemente, y una puerta secreta se abrió, revelando la cámara llena de conocimiento ancestral.\n\nLa historia de Alex se extendió por todo el reino, inspirando a otros a enfrentar desafíos matemáticos y descubrir los misterios que el mundo antiguo había dejado atrás. Ahora, tu también tienes la oportunidad de sumergirte en este desafío. ¿Podrás calcular el área sombreada y desvelar el conocimiento oculto detrás del triángulo sagrado? ¡La Montaña de la Sabiduría espera tu respuesta!\n\nDados tres puntos en el plano, calcular el área sombreada que se encuentra debajo el triangulo (incluyendo el triángulo).",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea contiene un número entero $t$ $(1\\le t\\le 10^3)-$ el número de casos de prueba.\n\nLa primera línea de cada caso de prueba contiene seis números enteros $x_1$, $y_1$, $x_2$, $y_2$, $x_3$, $y_3$ $(-1000\\le x_1, x_2, x_3 \\le 1000 ; 2\\le y_1, y_2, y_3 \\le 1000)-$ las coordenadas del triángulo, se garantiza que los tres puntos no son colineales y que todas las coordenadas son números pares.",
          "EN": ""
        },
        "output": {
          "ES": "Para cada caso de prueba imprime un número entero, el área sombreada (se garantiza que la respuesta siempre es entera).",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n-4 4 4 4 0 8\n0 2 0 4 2 2\n0 4 -4 8 4 8\n",
            "output": "48\n6\n64\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "Dado únicamente el segmento, se calcula el área de la sombra de la siguiente manera: tenemos $X_{min}$, $\\Delta X$, y $\\Delta Y$. El área es igual a $Delta X * X_{min} + \\frac{\\Delta X * \\Delta Y}{2}$.\n\nExisten dos casos para calcular el área sombreada: uno cuando el punto del medio se encuentra por debajo del lado opuesto, y el otro cuando el punto del medio se encuentra por encima.\n\n![image alt](https://images.juki.pub/o/02d364f4-43f0-4fa8-b17e-b74f273fa112.png)\n\nPara el primer caso, la respuesta es el área de la sombra del segmento $\\overline{AB}$ más el área de la sombra del segmento $\\overline{CB}$. Para el segundo caso, basta con el área de la sombra del segmento $\\overline{DF}$.\n\nNo es necesario detectar con cuál caso nos enfrentamos; basta con responder con $\\max({área primer caso},{área segundo caso})$.",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6581fec57f2a8c7d7bb4686e"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1572",
      "name": "2880",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "pacha2880",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "yo",
      "ownerNickname": "pacha2880",
      "statement": {
        "description": {
          "ES": "",
          "EN": "aadasfd"
        },
        "input": {
          "ES": "",
          "EN": "asdfasdf"
        },
        "output": {
          "ES": "",
          "EN": "asdfasdf"
        },
        "sampleCases": [
          {
            "input": "",
            "output": ""
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "657278996d57a514b87b618f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1571",
      "name": "Neurona",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f6b4f0deed17632e7683841.",
        "nickname": "Micky",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 4000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "Micky",
      "ownerNickname": "Micky",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Las neuronas son un tipo de células especiales que reaccionan a pequeños impulsos eléctricos. El cerebro está, entre otras cosas, compuesto de neuronas especializadas en la transmisión de información. En este problema vamos a estudiar el comportamiento de alguna neurona del cerebro de un ser vivo moribundo. Una neurona va muriendo por que las conexiones que tiene son muy débiles, y esto va produciéndose poco a poco. \n\nPara la simplicidad del estudio se considera una neurona como un grafo conexo de $n$ nodos y $n-1$ conexiones (no direccionadas) entre estas. Una neurona tarda una cierta cantidad de tiempo en morir.\nSe dice que una neurona muere cuando todos sus nodos han muerto.\n\nSi la neurona no ha muerto aun, entonces para el siguiente día todo nodo que sólo tenga conexión a otro muere para el día siguiente, es decir todo nodo con grado menos igual a $1$.\n\n\\center\n![image alt](https://images.juki.pub/o/a6d794a4-2f2a-40c8-88b5-a167feaea304.png)\n\nEn el grafo de la imagen el proceso va da la siguiente forma:\n\n* Día $0$. Al principio los nodos $[1,2,3,4,5,6,7]$ están intactos.\n* Día $1$. Los nodos $[1,3,5,7]$ mueren quedando sólo los nodos $[2,4,6]$.\n* Día $2$. Los nodos ${2,6}$ mueren quedando sólo el nodo $[4]$.\n* Día $3$. El nodo $[4]$ muere, entonces la neurona muere."
        },
        "input": {
          "ES": "",
          "EN": "La primera línea de entrada contiene la cantidad de nodos $1 \\leq n \\leq 100000$ de la neurona a estudiar. Las siguiente $n-1$ lineas tienen dos enteros $u$ y $v$, $1 \\leq u,v \\leq n$, que representan una conexión entre los nodos $u$ y $v$. Se garantiza que la neurona será conexa."
        },
        "output": {
          "ES": "",
          "EN": "Imprimir el número de días en los que la neurona muere."
        },
        "sampleCases": [
          {
            "input": "7\n1 2\n2 4\n4 5\n4 6\n3 2\n7 6",
            "output": "3"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "657228de6d57a514b87b42e4"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1570",
      "name": "Mi primera chamba",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/64c2a40b-4341-4d3b-a29d-7992f6d5abf5.png",
        "nickname": "luchxDD",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "LuchxDD",
      "ownerNickname": "luchxDD",
      "statement": {
        "description": {
          "ES": "",
          "EN": "a"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n8\n7\n3",
            "output": "Cartas desechadas: 1 3 5 7 2 6 4\nCarta sobrante: 8\nCartas desechadas: 1 3 5 7 4 2\nCarta sobrante: 6\nCartas desechadas: 1 3\nCarta sobrante: 2"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "65548f8809034970313943b0"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1569",
      "name": "Michi-Learning",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/64c2a40b-4341-4d3b-a29d-7992f6d5abf5.png",
        "nickname": "luchxDD",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "luchxDD",
      "statement": {
        "description": {
          "ES": "",
          "EN": "a"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\nBAABCBCCABCAC\nABCABC\nAAABBCCABC",
            "output": "BCAC\n\nAAABBCC"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "655484e0090349703139411f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1568",
      "name": "Los PELUCHEs de Briegal",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dep",
        "OBI2023DepN3"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 3,
            "partial": 0,
            "description": {
              "ES": "$N = 2$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 6,
            "partial": 0,
            "description": {
              "ES": "$N = 3$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 14,
            "partial": 0,
            "description": {
              "ES": "$N = 2k − 1$ para algún valor de $k$ entero no negativo.",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 9,
            "partial": 0,
            "description": {
              "ES": "$N = 16$  y  $378 ≤ A, B ≤ 610$",
              "EN": ""
            }
          },
          "5": {
            "group": 5,
            "points": 4,
            "partial": 0,
            "description": {
              "ES": "$A = 0$ siempre.",
              "EN": ""
            }
          },
          "6": {
            "group": 6,
            "points": 11,
            "partial": 0,
            "description": {
              "ES": "$N = 16 y 0 ≤ A ≤ 377, 378 ≤ B ≤ 610$",
              "EN": ""
            }
          },
          "7": {
            "group": 7,
            "points": 26,
            "partial": 0,
            "description": {
              "ES": "Los valores de $A$ y $B$ siempre serán algún valor de la secuencia $Fibonacci$.",
              "EN": ""
            }
          },
          "8": {
            "group": 8,
            "points": 27,
            "partial": 0,
            "description": {
              "ES": " Limites originales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Durante incontables ediciones de la OBI hemos leído distintas y variadas anécdotas de nuestro\ncreador de problemas más odiado: Penguino.\n\nPocos participantes han tenido la desdicha de escuchar las verdaderas anécdotas, sin el filtro de\ncomedia que se usa para la Olimpiada.\n\nMuchos de estos participantes decidieron dejar la programación competitiva, todo con tal de ya no\nser amigos con el infame Penguino.\n\nNo fue hasta el año 2023, que Penguino encontró a 3 competidores completamente inmunes a sus\naburridas anécdotas e infinitas historias repetitivas: Briegal, Saitam y rimahS\n\nBriegal, que va encaminado a ser un maestro Pokémon del sexto Monte de la región Kanto, decide\nvoltear la estrategia de Penguino contra él, y le cuenta sobre una cantidad impresionante de PELUCHEs (Problemas Encargados de Lidiar con Unos Cochinos pero Hermosos Enigmas).\n\nPenguino entiende poco sobre los PELUCHEs de Briegal, pero le queda una incógnita enorme,\n¿Como se relacionan todos estos problemas?\n\nEl aburrimiento de Penguino en su diario vivir lo lleva a diseñar un árbol binario para medir justamente esto.\n\nRecordemos que un árbol binario es un conjunto de nodos, donde cada nodo tiene exactamente un\nnodo padre a excepcion del nodo raiz, y puede tener cero, uno o dos nodos hijos.\n\nEn este caso, el nodo $0$ será el nodo raíz, tendrá a los nodos $1$ y $2$, el nodo $2$ tendrá de hijos a los\nnodos $3$ y $4$, y así...\nPara generalizar; podemos decir que siempre en este árbol binario, el $n-esimo$ nodo tendrá de hijos\na los nodos $2n + 1$ y $2n + 2$\nPenguino podrá ser loco, explosivo, mal creador de problemas, mentiroso, pero nunca una estrella\nde $TikTok$.\nEs por esto, que te garantiza que cada árbol tendrá exactamente $N$ nodos, estos puestos en orden.\n¡Además, añadimos el hecho de que los nodos llevan valores $Fibonacci!$\n\nRecordemos, la secuencia de números $Fibonacci$ empieza por los números $0$ y $1$.\nLuego, el siguiente número es la suma de los anteriores dos en la secuencia, es decir: el tercer valor\nseria $0 + 1 = 1$.\n\nEl cuarto valor seria: $1 + 1 = 2$, y así...\nPara usar una fórmula más general, decimos que el $m-simo$ $Fibonacci$ es igual a $F(m)$, donde:\n![image alt](https://images.juki.pub/o/f813f11c-7064-4b94-a101-8f36000d201a.png)\nVolviendo a hablar de nuestro FiboArbol:\n\nEl Nodo $0$ lleva el valor $0$.\n\nEl Nodo $1$ lleva el valor $1$.\n\nEl Nodo $2$ lleva el valor $1$.\n\nEl Nodo $3$ lleva el valor $2$.\n\nEl Nodo $4$ lleva el valor $3$.\n\nEl Nodo $5$ lleva el valor $5$.\n\nY así consecuentemente...\n\n![image alt](https://images.juki.pub/o/a68fe31d-a5ad-41a3-b524-18cda7f2e3e7.png)\n\nPenguino puede acomodar los problemas en todo lugar en este árbol, tanto en los nodos como en\nlas conexiones entre nodos.\n\nCada nodo simplemente representa una subcategoría de PELUCHE, y el punto en el que está el\nPELUCHE representa la dificultad del PELUCHE.\n\nEsto quiere decir, que podemos tener un PELUCHE exactamente en el nodo número $8$, el cual tiene\nun valor de $21$, es decir que este PELUCHE tendrá dificultad $21$. Otro PELUCHE entre los nodos\n$4$ y $9$(nodos con valores $3$ y $34$) el cual tenga una dificultad también de $21$.\nPero al hacer esto, notamos que la distancia entre estos PELUCHEs no es de $0$(ya que ambos tienen\nla misma dificultad), la distancia es en realidad de $40$; ya que para conectarlos tendríamos que ir\ndel nodo con valor $21$ hasta el nodo con valor $1$, y bajando al nodo con valor $34$ nos quedaríamos\nexactamente en el punto $21$, donde está el otro PELUCHE, haciendo una distancia de $40$.\n\nPor suerte para ti, y porque Penguino debe trabajar urgentemente en resolver la seria adicción\nde Nickyta a las galletas, Penguino no te pedirá la distancia entre dos PELUCHEs específicos, te\npedirá algo mucho más simple.\n\nDadas dos dificultades, respóndele a Penguino la máxima distancia que podrían tener dos PELUCHEs con estas dificultades en el árbol de tamaño $N$ que Penguino está usando (Las distancias\ndeben ser por el camino más corto, es decir no puedes ir dos veces por el mismo camino para alargar\nla distancia).\n\nPor ejemplo, si Die... digo Penguino te dice que el árbol tendrá $6$ nodos, y las dificultades de los\nPELUCHEs son $2$ y $4$, la máxima distancia posible en el árbol seria de $6$.\n\n![image alt](https://images.juki.pub/o/2215dad8-2483-45f2-a273-800be9c31342.png)\n\nEn caso de que $N = 8$, y las dificultades sean $9$ y $11$, la distancia seria de $2$.\n\n![image alt](https://images.juki.pub/o/85db074d-0101-438b-ad2d-5ff7da6c1140.png)\n\nY finalmente, si $N = 8$, y las dificultades son $7$ y $9$, la distancia seria de $16$.\n\n![image alt](https://images.juki.pub/o/4e78f38d-b601-4a51-91f7-d762e1365211.png)\n\nCon el único fin de que no sea un problema tan sencillo, Penguino te hará T consultas, para cada\nuna de estas consultas debes responderle la máxima distancia que podrían tener dos PELUCHEs\ncon las dificultades dadas.",
          "EN": "[peluche.pdf](https://files.juki.pub/temp/peluche.pdf)"
        },
        "input": {
          "ES": "En la primera linea vendran dos valores $T$ y $N$, representando la cantidad de consultas que tendras\nque responder, y la cantidad de nodos que tendra el arbol con el que trabajaras.\nSiguen $T$ lineas, cada una contiene dos valores $A$ y $B$, representando la dificultad de los dos $PELUCHEs$.\n\n$Límites$\n\n$1 ≤ T ≤ 10^4$\n\n$1 ≤ N ≤ 63$\n\n$0 ≤ A, B ≤ F(N − 1)$",
          "EN": ""
        },
        "output": {
          "ES": "Para cada consulta de $Penguino$ debes responder la máxima distancia posible en el árbol para las\ndos dificultades que se te dieron.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "2 6\n2 4\n1 1",
            "output": "6\n2"
          },
          {
            "input": "4 8\n9 11\n7 9\n9 9\n8 8",
            "output": "2\n16\n0\n16"
          },
          {
            "input": "3 9\n9 9\n12 14\n15 20",
            "output": "14\n22\n5"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654ecca00903497031380488"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1567",
      "name": "Tienda de dulces",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dep",
        "OBI2023DepN3"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 17,
            "partial": 0,
            "description": {
              "ES": "Se garantiza que para todo $i$ y $j, (1 ≤ i, j ≤ N), ai = aj = X = Y$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 32,
            "partial": 0,
            "description": {
              "ES": "$1 ≤ N, X, Y ≤ 200$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 51,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Obilan es una ciudad muy particular. Esto porque en la ciudad existe una sola tienda de dulces y, lo más sorprendente es que esta tienda abrió no hace mucho; es decir, que los habitantes de\nObilan vivieron en una ciudad sin tienda de dulces durante muchos años. El dueño de esta tienda es\nEnrique, que es un emprendedor que sueña con que su tienda se extienda en una cadena sucursales\nabiertas por todo el país.\n\nEnrique tiene una promoción para las nuevas personas que lo visitan. Siempre que una nueva persona visita su tienda, él les propone un reto y si superan el reto podrán llevarse la cantidad de\ndulces que deseen; pero bueno este problema no trata de empresas, ni de dinero, ni mucho menos\nde Enrique (él solo es el dueño de la tienda).\n\nLa verdadera protagonista del problema es Kamila, que es una ciudadana de Obilan ganadora\nde competencias de lógica. Todos la conocen por su inteligencia sobresaliente. Un día, uno de los\namigos de Kamila le comentó respecto a la tienda de Enrique y la animó a participar en sus retos,\nya que ella tendría grandes posibilidades de ganar.\n\n![image alt](https://images.juki.pub/o/6fd5931f-8bb3-4a57-9e99-1a68aa61f432.png)\n\nCuando Kamila se encontraba en la tienda de Enrique, el sacó una bolsa de dulces y los puso en\nfila sobre la mesa. Enrique le dijo: “Aquí hay una fila de N dulces. Cada dulce tiene un nivel de\nazúcar, si eres capaz de decirme cuantos subarreglos continuos de la forma $Al\n, Al + 1, Al + 2, . . .\nAr − 1, Ar. (1 ≤ l ≤ r ≤ N)$ existen, donde el dulce con nivel de azúcar maximo del subarreglo\ntiene un valor igual a X y el dulce con menor nivel de azúcar del subarreglo tiene un valor igual a\nY ; entonces podrás llevarte los dulces que quieras de mi tienda”.\nA Kamila le encantan esta clase de retos, pero ella no es programadora así que te pide tu ayuda\npara que pueda resolver correctamente este reto y ella pueda llevarse a casa todos los dulces que\nquiera. (Kamila te dará cierta cantidad de dulces por ayudarla en este reto, Kamila es buena onda\n:D )",
          "EN": "[tienda.pdf](https://files.juki.pub/temp/tienda.pdf)"
        },
        "input": {
          "ES": "La primera línea de entrada contendrá tres enteros, $N, X$ y $Y$ , que corresponde a la cantidad de\ndulces en la fila, y $X$ y $Y$ que delimitan los valores que deben tener los subarreglos que debes contar.\n\nLa siguiente linea de entrada contiene $N$ números enteros $ai$ para $(1 ≤ i ≤ N)$ que corresponde a\nlos dulces que Enrique puso en fila para el reto de Kamila.\n\n$Límites$\n\n$1 ≤ N ≤ 5 ∗ 10^5$\n\n$1 ≤ X, Y ≤ 2 ∗ 10^5$\n\n$1 ≤ ai ≤ 2 ∗ 10^5$",
          "EN": ""
        },
        "output": {
          "ES": "La salida debe ser un único número entero, que corresponde a la cantidad de subarreglos continuos\nque cumplen con la condición deseada.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 3 1\n1 2 3 1",
            "output": "4"
          },
          {
            "input": "5 1 1\n1 1 1 1 1",
            "output": "15"
          }
        ],
        "note": {
          "ES": "$Explicación$: En el ultimo caso de ejemplo, $X = 1$ y $Y = 1$, entonces como la fila de dulces\nesta llena de dulces con nivel de azucar igual a $1$, entonces todos los subarrays continuos tienen\ncomo dulce con valor de azucar minimo y maximo igual a 1, por lo que la respuesta seria $15$.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654ec8dc09034970313803c6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1566",
      "name": "rimahS y el problema sin sentido",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023DepN3"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 14,
            "partial": 0,
            "description": {
              "ES": "$n≤50$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 32,
            "partial": 0,
            "description": {
              "ES": "$ n≤2000$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 54,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "rimahS participa en muchas competencias de programación, en una de ellas viajó y llevó con él $n$\nllaveros para regalar a los otros participantes. \n\nSin embargo, el último día de la competencia, ya\nestando en el areopuerto para volver, rimahS se dió cuenta de que se había olvidado regalar sus\nllaveros! Junto a él hay sólo hay $3$ participantes a quienes rimahS tendrá que dar sus llaveros.\n\nrimahS piensa regalar una cantidad entera y positiva (posiblemente nula) de llaveros a cada participante, regalara $a$ llaveros al primero, $b$ llaveros al segundo y $c$ al tercero. Naturalmente rimahS quiere regalar todos sus llaveros, por lo tanto $a+b+c = n$. rimahS siendo fanatico de las matématicas quiere regalar los llaveros de tal forma que $(a, b, c)$ forme una trica pitagórica i.e. que $a^2+b^2 = c^2$.\n\nDespués de regalar los llaveros, rimahS se preguntó de cuantas maneras distintas podría haber\nregalado los llaveros a los $3$ participantes. Una forma de regalar llaveros se asimila a elegir tres\nenteros positivos $(a, b, c)$ que cumplan las condiciones ya explicadas.\n\nSe considera que dos maneras de regalar $(a, b, c)$ y $(d, e, f)$ son diferentes si y solamente si $a!=d$, o $b!=e$, o $c!=f$. Por ejemplo si $n = 12$, la trica $(3, 4, 5)$ es valida porque $3 + 4 + 5 = 12$ y $3^2 + 4^2 = 9 + 16 = 25 = 5^2$\n. \n\nEsta trica es diferente de la trica (4, 3, 5).",
          "EN": "[llaveros.pdf](https://files.juki.pub/temp/llaveros.pdf)"
        },
        "input": {
          "ES": "La primera línea contiene un entero $t$, la cantidad de casos.\nLas siguientes $t$ líneas describen cada uno de los casos con un solo entero $n$, la cantidad de llaveros\nque tiene que regalar rimahS.\n\n$Límites$\n\n$1 ≤ t ≤ 10$\n\n$0 ≤ n ≤ {10^5}$",
          "EN": ""
        },
        "output": {
          "ES": "Un entero que indique la cantidad de maneras diferentes que rimahS podría haver regalado sus\nllaveros. Notece que la respuesta puede llegar a ser $0$.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n12\n15\n456",
            "output": "4\n0\n6"
          }
        ],
        "note": {
          "ES": "$Explicación$: En el primer caso, las tricas validas son: $(0, 6, 6),(6, 0, 6),(3, 4, 5) y (4, 3, 5)$.\nEn el segundo caso no existen tricas que cumplan las condiciones.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654ec68f090349703138034f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1565",
      "name": "Leirbag y los Paquetes ",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dep",
        "OBI2023DepN2"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 4,
            "partial": 0,
            "description": {
              "ES": "Se garantiza que $N$ es par.\n",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 4,
            "partial": 0,
            "description": {
              "ES": "Se garantiza que $N$ es primo.\n",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 39,
            "partial": 0,
            "description": {
              "ES": "$2 ≤ N ≤ 10^7$\n",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 53,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "En el mundo de los negocios, siempre es importante la cantidad. Leirbag, trabaja en una planta empacadora de nueces, Leirbag tomo este trabajo porque decidió distraerse un poco de su importante investigación en PELUCHES.\n\nUn día el jefe de Leirbag el temible Racso, a quien recordarán de otros problemas de la\nolimpiada, le propone un reto a todos los empleados de la planta. El jefe Racso ofrece un\nascenso estrepitoso en la planta a quien responda la siguiente cuestión: ¿Cuántas nueces se\ndebe poner en cada paquete para maximizar la cantidad de paquetes que produce la planta?,\nconsiderando que en un día la planta produce $N$ nueces listas para empacar y que todas las\nnueces deben ser empacadas (esto significa que no deben sobrar nueces).\n\nInmediatamente después de que el jefe Racso lanza el reto, Leirbag se da cuenta que si hace\npaquetes de una nuez, se maximizará la producción de paquetes, sin embargo al decirle esta\nrespuesta a su temible jefe Racso, este le dice que no pueden producir paquetes de una nuez.\nPor lo que la respuesta debe ser mayor a uno.\n\nLeirbag necesita ser ascendido en su trabajo pues debe ganar mas dinero para comprar más\nPELUCHES, sin embargo se da cuenta que algunas veces la respuesta es muy difícil de\ncalcular. Por ejemplo si $N = 211648433$, entonces la respuesta es que se deben hacer $14929$\npaquetes con $14177$ nueces cada uno. Un ejemplo más sencillo de la tarea que dió el jefe\nRacso, es si $N = 24$, con $24$ nueces se tienen las siguientes posibilidades:\n\n- Hacer paquetes de $24$ nueces, con lo que se tendrá $1$ paquete.\n\n- Hacer paquetes de $12$ nueces, con lo que se tendrán $2$ paquetes.\n\n- Hacer paquetes de $8$ nueces, con lo que se tendrán $3$ paquetes.\n\n- Hacer paquetes de $6$ nueces, con lo que se tendrán $4$ paquetes.\n\n- Hacer paquetes de $4$ nueces, con lo que se tendrán $6$ paquetes.\n\n- Hacer paquetes de $3$ nueces, con lo que se tendrán $8$ paquetes.\n\n- Hacer paquetes de $2$ nueces, con lo que se tendrán $12$ paquetes.\n\nClaramente en este ejemplo la opción que maximiza la cantidad de paquetes (que genera\nmás paquetes) es poner $2$ nueces en cada paquete, de este modo la respuesta es $2$. \n\nAyuda a Leirbag a poder responder el reto que dió el temible jefe Racso.",
          "EN": "[paquetes.pdf](https://files.juki.pub/temp/paquetes.pdf)"
        },
        "input": {
          "ES": "La entrada unicamente consistirá de un número entero positivo mayor a $1$, $N$ que representa\nla cantidad de nueces que produce la empresa en un determinado día.\n\n$Límites$\n\n$2 ≤ N ≤ 10^14$",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir la cantidad de nueces que debe tener cada paquete, con el fin de maximizar\nel número de paquetes.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "24",
            "output": "2"
          },
          {
            "input": "17",
            "output": "17"
          },
          {
            "input": "211648433",
            "output": "14177"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654ec312090349703138029c"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1564",
      "name": "Torneo de Frontón",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dep",
        "OBI2023DepN2",
        "OBI2023DepN3"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 7,
            "partial": 0,
            "description": {
              "ES": "$T ≤ 100$, $N ≤ 5$\n",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 16,
            "partial": 0,
            "description": {
              "ES": "$T ≤ 100$, $N ≤ 100$\n",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 27,
            "partial": 0,
            "description": {
              "ES": "$T ≤ 10^5$\n\n$N$ es una potencia de $2$ y $N ≤ 1018$.\n",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 33,
            "partial": 0,
            "description": {
              "ES": "$T ≤ 10^5$\n, $N ≤ 10^{18}$",
              "EN": ""
            }
          },
          "5": {
            "group": 5,
            "points": 17,
            "partial": 0,
            "description": {
              "ES": " \n$T ≤ 100$, $N ≤ 10^{10000}$",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "*“Too many times, people don’t try their best. They don’t have the keen spirit, the winning spirit.\nAnd once you make it, you’ve got to guard your reputation – every day, go in like an unknown to\nprove yourself. That’s why I don’t clown around. I don’t believe in wasting time. My goal is to win\nthe World Chess Championship; to beat the Russians. I take this very seriously.”\n(Bobby Fischer)*\n\nComo parte de la preparación del Club de Frontón $2880$ para el próximo Mundial de Frontón,\ndecidieron participar en torneos locales con un formato ampliamente conocido en este deporte. En\nuno de estos torneos, surgió la pregunta: ¿Cuántos partidos se juegan en el torneo?\n\n$N$ jugadores participan en un torneo de eliminación directa con llaves. En cada fase, los jugadores que no han sido eliminados juegan un partido contra otro jugador que tampoco ha sido eliminado. El jugador que pierde es eliminado del torneo. Si el número de jugadores en alguna fase es impar, uno de los jugadores pasa a la siguiente ronda directamente sin jugar ningún partido. Debes imprimir la cantidad total de partidos que se jugarán en el torneo.\n\n![image alt](https://images.juki.pub/o/9dd08a7a-3dd1-4241-8f98-0120e8a94889.png)",
          "EN": "[torneo.pdf](https://files.juki.pub/temp/torneo.pdf)"
        },
        "input": {
          "ES": "La primera línea de entrada contendrá un entero positivo, que representa la cantidad de casos de\nprueba $T$.\n\nLas siguientes $T$ lineas contienen un entero positivo $N$ que representa la cantidad de jugadores en el torneo.\n\n$Límites$\n\n- $T$ $(ver$ $subtareas)$\n\n-  $N ≤ 10^{10000}$",
          "EN": ""
        },
        "output": {
          "ES": "Para cada caso de prueba, imprime la cantidad de partidos que se jugarán en el torneo de eliminación directa según las reglas dadas.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n1\n3\n8",
            "output": "0\n2\n7"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654ec1880903497031380246"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1563",
      "name": "El Fiboarbol",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dep",
        "OBI2023DepN2"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 4,
            "partial": 0,
            "description": {
              "ES": "$A$ y $B$ solo pueden ser $0$ o $1$.",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 12,
            "partial": 0,
            "description": {
              "ES": "$A = 0$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 35,
            "partial": 0,
            "description": {
              "ES": "$A$ nunca será igual a $B$.",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 19,
            "partial": 0,
            "description": {
              "ES": "$A = B$, donde $9 ≤ A, B ≤ 13$",
              "EN": ""
            }
          },
          "5": {
            "group": 5,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "Limites originales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "*“Si tuviera una moneda por cada vez que cambiaste una palabra en un problema creando así uno\ncompletamente diferente... Tendría tres monedas, lo cual no es mucho pero es curioso que haya\npasado tres veces”*(Roger Enriquez a Diego Angulo, 2023)\n\nDurante incontables ediciones de la OBI hemos leído distintas y variadas anécdotas de nuestro\ncreador de problemas más odiado: Penguino.\n\nPocos participantes han tenido la desdicha de escuchar las verdaderas anécdotas, sin el filtro de comedia que se usa para la Olimpiada.\n\nMuchos de estos participantes decidieron dejar la programación competitiva, todo con tal de ya no\nser amigos con el infame Penguino.\n\nNo fue hasta el año 2023, que Penguino encontró a 3 competidores completamente inmunes a sus\naburridas anécdotas e infinitas historias repetitivas: Briegal, Saitam y rimahS\n\nBriegal, que va encaminado a ser un maestro Pokémon del sexto Monte de la región Kanto, decide\nvoltear la estrategia de Penguino contra él, y le cuenta sobre una cantidad impresionante de PELUCHEs (Problemas Encargados de Lidiar con Unos Cochinos pero Hermosos Enigmas).\n\nPenguino entiende poco sobre los PELUCHEs de Briegal, pero le queda una incógnita enorme,\n¿Como se relacionan todos estos problemas?\n\nEl aburrimiento de Penguino en su diario vivir lo lleva a diseñar un árbol binario para medir justamente esto.\n\nRecordemos que un árbol binario es un conjunto de nodos, donde cada nodo tiene exactamente un\nnodo padre a excepcion del nodo raiz, y puede tener cero, uno o dos nodos hijos.\n\nEn este caso, el nodo $0$ será el nodo raíz, tendrá a los nodos $1$ y $2$, el nodo $2$ tendrá de hijos a los nodos $3$ y $4$, y así...\nPara generalizar; podemos decir que siempre en este árbol binario, el $n-esimo$ nodo tendrá de hijos\na los nodos $2n + 1$ y $2n + 2$\nPenguino podrá ser loco, explosivo, mal creador de problemas, mentiroso, pero nunca una estrella\nde $TikTok$.\nEs por esto, que te garantiza que cada árbol tendrá exactamente $N$ nodos, estos puestos en orden.\n¡Además, añadimos el hecho de que los nodos llevan valores $Fibonacci!$\n\nRecordemos, la secuencia de números $Fibonacci$ empieza por los números $0$ y $1$.\nLuego, el siguiente número es la suma de los anteriores dos en la secuencia, es decir: el tercer valor\nseria $0 + 1 = 1$.\n\nEl cuarto valor seria: $1 + 1 = 2$, y así...\n\nPara usar una fórmula más general, decimos que el $m-simo$ $Fibonacci$ es igual a $F(m)$, donde:\n![image alt](https://images.juki.pub/o/f813f11c-7064-4b94-a101-8f36000d201a.png)\nVolviendo a hablar de nuestro FiboArbol:\n\nEl Nodo $0$ lleva el valor $0$.\n\nEl Nodo $1$ lleva el valor $1$.\n\nEl Nodo $2$ lleva el valor $1$.\n\nEl Nodo $3$ lleva el valor $2$.\n\nEl Nodo $4$ lleva el valor $3$.\n\nEl Nodo $5$ lleva el valor $5$.\n\nY así consecuentemente...\n\n![image alt](https://images.juki.pub/o/a68fe31d-a5ad-41a3-b524-18cda7f2e3e7.png)\n\nPenguino puede acomodar los problemas en todo lugar en este árbol, tanto en los nodos como en\nlas conexiones entre nodos.\n\nCada nodo simplemente representa una subcategoría de PELUCHE, y el punto en el que está el\nPELUCHE representa la dificultad del PELUCHE.\n\nEsto quiere decir, que podemos tener un PELUCHE exactamente en el nodo número $8$, el cual\ntiene un valor de $21$, es decir que este PELUCHE tendrá dificultad $21$. Otro PELUCHE entre los\nnodos $4$ y $9$(nodos con valores $3$ y $34$) el cual tenga una dificultad también de $21$(quede claro que este PELUCHE esta en la conexion entre los nodos con valores $3$ y $34$, no esta en ninguno de los nodos.\n\nPero al hacer esto, notamos que la distancia entre estos PELUCHEs no es de $0$(ya que ambos tienen\nla misma dificultad), esto debido a que se encuentran en distintas categorias. La distancia es en realidad de $40$; ya que para conectarlos tendríamos que ir del nodo con valor $21$ hasta el nodo con valor $1$, y bajando al nodo con valor $34$ nos quedaríamos exactamente en el punto $21$, donde está el otro PELUCHE, haciendo una distancia de $40$.\n\n![image alt](https://images.juki.pub/o/26efbead-1414-43af-98a7-6006cacfebaf.png)\n\nPor suerte para ti, y porque Penguino debe trabajar urgentemente en resolver la seria adicción\nde Nickyta a las galletas, Penguino no te pedirá la distancia entre dos PELUCHEs específicos, te\npedirá algo mucho más simple.\n\nDadas dos dificultades, respóndele a Penguino la mínima distancia que podrían tener dos PELUCHEs diferentes con estas dificultades en el árbol de tamaño $N$ que Penguino está usando.\n\nDos PELUCHEs diferentes quiere decir que los dos PELUCHEs no estarán en la misma posición\ndel árbol.\n\nPor ejemplo, si Die... digo Penguino te dice que las dificultades serán $9$ y $11$, la distancia mínima seria de $2$.\n\n![image alt](https://images.juki.pub/o/998fa468-2590-4a63-9106-2876c92d48cc.png)\n\nO digamos que las dificultades son de $1$ y $1998$, la distancia mínima seria de $1997$.\n\nNótese que no importa cuantos nodos tiene el árbol, imaginemos que es un árbol infinito.\n\nCon el único fin de que no sea un problema tan sencillo, Penguino te hará T consultas, para cada\nuna de estas consultas debes responderle la mínima distancia que podrían tener dos PELUCHEs\ndiferentes con las dificultades dadas.\n\n$Nota$.- Penguino jamas pedira que calcules la respuesta para dificultades $0$ y $0$, ya que no pueden haber dos PELUCHEs distintos con dificultad $0$.",
          "EN": "[fiboarbol.pdf](https://files.juki.pub/temp/fiboarbol.pdf)"
        },
        "input": {
          "ES": "En la primera linea vendran un solo valor $T$, representando la cantidad de consultas que tendras\nque responder.\n\nSiguen $T$ lineas, cada una contiene dos valores $A$ y $B$, representando la dificultad de los dos PELUCHEs.\n\n$Límites$\n\n$1 ≤ T ≤ 10^4$\n\n$0 ≤ A, B ≤ 63245986$",
          "EN": ""
        },
        "output": {
          "ES": "Para cada consulta de Penguino debes responder la mínima distancia posible en el árbol para las\ndos dificultades que se te dieron.\n\n$NOTA$: Toma en cuenta que esta distancia jamás debe ser 0, ya que esto significaría que estamos\nhablando del mismo PELUCHE, y eso no son dos PELUCHEs diferentes.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "2\n2 4\n1 1",
            "output": "2\n2"
          },
          {
            "input": "4\n9 11\n9 9\n8 8\n0 1000",
            "output": "2\n2\n6\n1000"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654ebe700903497031380194"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1562",
      "name": "La cola de uno",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dep",
        "OBI2023DepN2"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 8,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 19,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 38,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 35,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "654c244309034970313776f1"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1561",
      "name": "Meeting Point",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 450,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 3750,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 450,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[M.pdf](https://files.juki.pub/icpc-latam-2023/M.pdf)\n"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 5\n1 3\n1 3 1\n2 1 3\n2 4 3\n4 3 1\n3 2 1\n",
            "output": "2 4\n"
          },
          {
            "input": "4 5\n1 3\n1 3 1\n2 1 2\n2 4 3\n4 3 1\n3 2 1\n",
            "output": "4\n"
          },
          {
            "input": "3 2\n1 2\n1 2 100000\n2 3 99999\n",
            "output": "*\n"
          },
          {
            "input": "4 4\n4 3\n3 4 1\n4 1 1\n1 2 1\n2 3 1\n",
            "output": "*\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c954b2395c3d7ac0bcf0"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1560",
      "name": "Latam++",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 150,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 150,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[L.pdf](https://files.juki.pub/icpc-latam-2023/L.pdf)\n"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "a+b(c+b)\n",
            "output": "7\n"
          },
          {
            "input": "aa\n",
            "output": "3\n"
          },
          {
            "input": "a-a\n",
            "output": "3\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c8498305e6696ec41ca5"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1559",
      "name": "Keen on Order",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 300,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 750,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 300,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[K.pdf](https://files.juki.pub/icpc-latam-2023/K.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "9 3\n1 2 3 1 2 3 1 2 3\n",
            "output": "*\n"
          },
          {
            "input": "11 4\n1 2 3 4 2 3 3 2 4 1 4\n",
            "output": "3 4 1 2\n"
          },
          {
            "input": "11 4\n1 2 3 4 2 3 3 2 4 1 4\n",
            "output": "4 1 2 3\n"
          },
          {
            "input": "5 6\n6 5 4 3 2\n",
            "output": "6 5 4 3 2 1\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c7bb65b7cff3a9013e09"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1558",
      "name": "Journey of the Robber",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 6750,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 21000,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 6750,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[J.pdf](https://files.juki.pub/icpc-latam-2023/J.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "6\n1 6\n2 5\n4 5\n3 5\n5 6\n",
            "output": "6 5 5 5 6 6\n"
          },
          {
            "input": "5\n5 1\n1 3\n3 2\n2 4\n",
            "output": "3 3 4 5 5\n"
          },
          {
            "input": "1\n",
            "output": "1\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c6eb8305e6696ec41c5e"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1557",
      "name": "Inversions",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 150,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 450,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[I.pdf](https://files.juki.pub/icpc-latam-2023/I.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "ba\n1",
            "output": "1\n"
          },
          {
            "input": "ab\n3",
            "output": "3\n"
          },
          {
            "input": "zkba\n1\n",
            "output": "6"
          },
          {
            "input": "cab\n7\n",
            "output": "77\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c5b065b7cff3a9013da0"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1556",
      "name": "Health in Hazard",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 5250,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 5250,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[H.pdf](https://files.juki.pub/icpc-latam-2023/H.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5 4.321\n-2 -1 3 -2\n1 6 3 -2\n1 6 -2 -1\n-3 4 3 3\n-2 1 5 4\n",
            "output": "4\n"
          },
          {
            "input": "5 2\n1 0 1 1\n-1 0 -1 -1\n3 1 1 3\n1 3 3 1\n0 4 4 0\n",
            "output": "*"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c50db2395c3d7ac0bc14"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1555",
      "name": "GPS on a Flat Earth",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 300,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1050,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 300,
            "memoryLimit": 1024000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 300,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[G.pdf](https://files.juki.pub/icpc-latam-2023/G.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "2\n1 1 5\n7 0 4\n",
            "output": "4 -1\n5 2\n"
          },
          {
            "input": "2\n1 1 5\n5 5 3\n",
            "output": "2 5\n3 4\n4 3\n5 2\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c467ddec83fde2d85e55"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1554",
      "name": "Forward and Backward",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 450,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 6000,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 6000,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[F.pdf](https://files.juki.pub/icpc-latam-2023/F.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "33\n",
            "output": "2 10 32\n"
          },
          {
            "input": "3\n",
            "output": "2\n"
          },
          {
            "input": "2\n",
            "output": "*\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c3ac8305e6696ec41bb7"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1553",
      "name": "Elevated Profits",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 3000,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 12000,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[E.pdf](https://files.juki.pub/icpc-latam-2023/E.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "7 3\n3 5\n3 7\n5 1\n5 4\n7 2\n7 6\n",
            "output": "121"
          },
          {
            "input": "1 1\n",
            "output": "1"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c2b2b2395c3d7ac0bb9a"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1552",
      "name": "Deciphering WordWhiz",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 150,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 450,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 150,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[D.pdf](https://files.juki.pub/icpc-latam-2023/D.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "6\nhotel\nweary\nheart\nblast\npilot\nvague\n3\nX!XX!\n*!XX!\n*****\n",
            "output": "1\n1\n1\n"
          },
          {
            "input": "3\nscale\ntable\nmaple\n5\nX!X**\nX!X**\nX!X**\nX!X**\nX!X**\n",
            "output": "2\n2\n2\n2\n2\n"
          },
          {
            "input": "4\nscale\ntable\nmaple\nsmile\n4\nX!X**\n*XX**\nX!X**\n*****\n",
            "output": "2\n1\n2\n1\n"
          },
          {
            "input": "5\nlatin\nmrica\nthink\nsolve\ndebug\n1\n*****\n",
            "output": "1"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c1d7ddec83fde2d85dd0"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1551",
      "name": "Candy Rus",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 3000,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 3000,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 3751,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3750,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[C.pdf](https://files.juki.pub/icpc-latam-2023/C.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "6 2\n2 2 1 1 2 2\n",
            "output": "4\n"
          },
          {
            "input": "7 3\n2 1 2 1 2 2 3\n",
            "output": "0\n"
          },
          {
            "input": "3 4\n3 4 2\n",
            "output": "0\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536c0c68305e6696ec41b20"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1550",
      "name": "Blackboard Game",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 150,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 750,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 150,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 150,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[B.pdf](https://files.juki.pub/icpc-latam-2023/B.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n",
            "output": "N\n"
          },
          {
            "input": "2\n1 2 4 8 16 32\n",
            "output": "Y\n"
          },
          {
            "input": "1\n2 3 3\n",
            "output": "Y\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536bfbe8305e6696ec41aeb"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1549",
      "name": "Analyzing Contracts",
      "tags": [
        "ICPC",
        "ICPC2023",
        "ICPC2023Latam"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1500,
        "memoryLimit": 1024000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 3750,
            "memoryLimit": 1024000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1500,
            "memoryLimit": 1024000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "",
          "EN": "[A.pdf](https://files.juki.pub/icpc-latam-2023/A.pdf)"
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4\n28\n45\n73\n92\n11\ns1\nc 10 10 s1\ns2\ns3\ns4\nc 7 26 s2\ns4\ns3\ns1\n",
            "output": "0\n18\n35\n28\n16\n84\n16\n28\n108\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6536bea18305e6696ec41aad"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1548",
      "name": "Henrry el agricultor",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dist"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "- $N=2$\n- $Q=1$\n- $l=1$\n- $r=N$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq N \\leq 1000$\n- $1 \\leq Q \\leq 1000$\n",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 25,
            "partial": 0,
            "description": {
              "ES": "Se garantiza que el tamaño de las porciones de terreno en cada consulta siempre será impar.",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 45,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Henrry es un agricultor muy entusiasta, el tiene un terreno donde tiene plantados manzanos a lo largo de un valle. El terreno se encuentra dividido en $N$ casillas, cada manzano está plantado en cierta casilla del terreno. Henrry no planto manzanos en todo su terreno, en algunas casillas de su terreno no tiene plantado nada.\n\n![\\size=x300 image alt](https://images.juki.pub/o/4992d3dc-57d6-4fa1-a132-ae85b3f16593.png)\n\nYerko que es amigo de Henrry, un agricultor muy competitivo y que tiene como hobbie principal sacar de sus casillas a Henrry. Se propuso plantar perales (árboles de peras) en el terreno de Henrry. Yerko plantó perales en las porciones de terrenos en los que Henrry no plantó manzanos. Cuando Henrry se enteró de esto y fue a reclamarle a Yerko, Yerko le dijo que el terreno ahora era suyo, ya que como tiene plantado varios árboles de Peral, el terreno tambien le corresponde.\n\nHenrry enojado llevó el caso a un jurado y el encargado del caso es el juez HUBIC, para la mala suerte de Henrry decreto lo siguiente: dado que la cantidad de perales que plantó Yerko no es conocida el terreno deberá partirse en dos. Yerko al enterarse de esto se apiado de Henrry y le propuso el siguiente reto: \"Dada una cierta porcion del terreno ¿La cantidad de Perales es la misma que la cantidad de manzanos?\".\nYerko no es tonto y sabe que si solo le hace una consulta la tarea le resultaria extremadamente facil a Henrry, por lo que Yerko le hara $Q$ consultas a Henrry, en cada consulta Yerko le dara dos valores $l$ y $r$, donde $l$ representa la posicion inicial del terreno a ser considerado y $r$ la posicion final.\n\nYerko le dijo a Henrry que si responde correctamente todas las consultas le devolverá los derechos de su terreno. Henrry se encuentra muy molesto y ocupado, así que te pidió ayuda en esta tarea.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada tendrá un entero $N$, que representa la cantidad de árboles en el terreno de Henrry y un entero $Q$ que representa la cantidad de consultas que le hará Yerko.\n\nLas siguientes líneas de entrada tendrá $N$ enteros $a_1$, $a_2$, ..., $a_N$, donde cada entero $a_i$ representa un árbol en la posicion $i$, si el valor de $a_i$ es un $1$, representara un manzano y si es un $0$, representara un peral.\n\nLas siguientes $Q$ lineas de codigo tendran dos enteros, $l$ y $r$, que representan las porciones de terreno en las que Henrry debe contar manzanos y perales para salvar su terreno.\n\n# Límites\n\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq Q \\leq 10^5$\n- $1 \\leq l \\leq r \\leq N$\n",
          "EN": ""
        },
        "output": {
          "ES": "La salida consta de $Q$ lineas, si la cantidad de perales es igual a la cantidad de manzanos imprimir: \"`OK`\" sin comillas.\nSi la cantidad de perales y manzanos en la porción de terreno es diferente imprimir: \"`F nomas`\".",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "8 3\n1 0 0 1 1 0 1 1\n1 3\n2 3\n3 6\n",
            "output": "F nomas\nF nomas\nOK\n"
          },
          {
            "input": "6 3\n1 0 1 0 1 0\n1 1\n1 2\n1 6\n",
            "output": "F nomas\nOK\nOK\n"
          }
        ],
        "note": {
          "ES": "En este caso se realizaron 3 consultas\nLa primera es el rango de $1$ a $1$, este solo tiene un manzado, por lo que la respuesta es `F nomas`. La segunda consulta es el rango de $1$ a $2$, la respuesta es `OK` porque hay la misma cantidad de manzanos que de perales.\nLa tercera consulta es el rango de $1$ a $6$, la respuesta es `OK` porque hay la misma cantidad de manzanos que de perales.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a9f02abc249b3fb8d34e3"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1547",
      "name": "En busca de Chocolates",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dist"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 8,
            "partial": 0,
            "description": {
              "ES": "Habra una sola tienda, es decir $N = 1$.",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 9,
            "partial": 0,
            "description": {
              "ES": "Habran exactamente $2$ tiendas, es decir $N = 2$.",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "Habran exactamente $3$ tiendas, Nickyta quiere comprar solo dos chocolates y en todas las tiendas hay un solo chocolate, es decir $K = 2$, $N = 3$,$C_1 = C_2 = C_3 = 1$.\n",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 13,
            "partial": 0,
            "description": {
              "ES": "Todas las tiendas estaran al lado derecho de la casa de Nickyta.",
              "EN": ""
            }
          },
          "5": {
            "group": 5,
            "points": 17,
            "partial": 0,
            "description": {
              "ES": "Habra exactamente una tienda al lado izquierdo de la casa de Nickyta.",
              "EN": ""
            }
          },
          "6": {
            "group": 6,
            "points": 43,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "_**\"¿CHOCOLATE? CHOCOLATE. ¡CHOCOLATE!\"**_\n\n\\textAlign=right Tom el pez, Bob Esponja, 2002\n\nDiego \"retirado\" Alejandro Penguino de Murillo Perez, nuestro amigo creador de problemas y entusiasta de las caricaturas ha tenido un año entero para reflexionar sobre sus ultimos problemas para la Olimpiada Boliviana de Informatica.\nAun no puede creer la baja aceptacion que tuvo su problema sobre las grillas, ¿Habra sido el enunciado de 4 paginas? ¿La solucion simple? ¿Estaba fuera de onda? No... los niños estan mal.\n\nSin embargo su problema del chocolate fue muy aclamado por la critica y casi gana un premio por su redaccion y sus referencias a su vida.\n¿Sera este el camino a seguir? ¿Chocolates? ¿Es esa la clave para un problema perfecto?\n\nNickyta, la bruja; esta harta de toda estas dudas existenciales por parte de Diego y al escucharlo hablar por horas de chocolates y mas chocolates, decide ir a comprar muchos chocolates.\nEl barrio de Nickyta es un barrio muy peculiar, ya que es una sola calle que va en linea recta tanto hacia el lado izquierdo(donde las casas tienen numeros negativos) y hacia el lado derecho (donde las casas tienen numeros positivos). Y obviamente Nickyta vive en la casa numero $0$.\nNickyta sabe bien el numero de todas las tiendas en el barrio, y como Nickyta es una bruja tambien sabe la cantidad de chocolates que encontrara disponibles en cada tienda.\n\nCon toda esta informacion disponible, Nickyta quiere que la ayudes a calcular cual es la distancia minima que debe caminar para comprar $K$ chocolates.\n",
          "EN": ""
        },
        "input": {
          "ES": "Se te daran $3$ lineas de entrada.\nEn la primera linea vendran dos enteros $K$ y $N$, representando la cantidad de chocolates que quiere comprar Nickyta y la cantidad de tiendas que hay en el barrio.\nEn la segunda linea vendran $N$ enteros($D_1$, $D_2$, ..., $D_N$), donde el entero $D_i$ representa el numero o ubicacion de la i-esima tienda.\nFinalmente, en la tercera linea vendran $N$ enteros($C_1$, $C_2$, ..., $C_N$), donde el entero $C_i$ representa la cantidad de chocolates que hay en la i-esima tienda.\nNo puede haber $2$ tiendas en la misma ubicacion, y jamas habra una tienda en casa de Nickyta.\n\n## Límites\n\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq K \\leq 10^9$\n- $0 \\leq C_i \\leq 10^9$ para todo $i$ ($1 \\leq i \\leq N$)\n- $-10^9 \\leq D_i \\leq 10^9$ para todo $i$ ($1 \\leq i \\leq N$)\n",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir la distancia minima que debe caminar Nickyta para comprar $K$ chocolates. O imprime $−1$ si es que no hay suficientes chocolates en todo el barrio.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 2\n-2 2\n2 2\n",
            "output": "6\n"
          },
          {
            "input": "10 5\n1 2 3 4 5\n1 1 1 1 1\n",
            "output": "-1\n"
          },
          {
            "input": "100 3\n-1 2 4\n90 10 100\n",
            "output": "4\n"
          }
        ],
        "note": {
          "ES": "Se recomienda usar el tipo de dato long long en C++.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a971cf8c40cec316393bc"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1546",
      "name": "Tarea de Matemática",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dist"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 2000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 7,
            "partial": 0,
            "description": {
              "ES": "Se garantiza que $a_i = b_i$ es decir que solo se debe probar si un número es o no unitario.",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 23,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq Q \\leq 10^3$ y además $1 \\leq a_i,b_i \\leq 10^3$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 70,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "Pierre es un joven brillante en matemáticas y un estudiante en un colegio con profesores algo extravagantes, un día caluroso su profesor Racso, quien es un expero en el antiguo arte de contar sin contar, les comenta a sus estudiantes acerca de los números unitarios. Los números unitarios, según el profesor Racso, son aquellos que son divisibles por su dígito de las unidades.\n\nAlgunos ejemplos de números unitarios son por ejemplo el número $213$, que es un número unitario debido a que $213$ es divisible por su dígito de las unidades que es $3$; por otro lado el número $179$ no es un número unitario pues $179$ no es divisible por su dígito de las unidades que es $9$.\n\nComo el profesor Racso es una fan de la combinatoria y además esta muy ocupado resolviendo una conjetura muy famosa acerca de los números primos, decide darles una tarea muy extensa a sus estudiantes, Racso les dará a sus estudiantes $Q$ consultas, cada consulta consiste en dos números enteros positivos $a$ y $b$, la tarea es responder a cada consulta con la cantidad de números unitarios que son mayores o iguales a $a$ y menores o iguales a $b$. Pierre trata de buscar algún patrón o teorema para resolver este problema de manera más sencilla, a pesar de que encuentra un patrón para algunos números unitarios, no encuentra un patrón para todos, así que pide tu ayuda como un brillante joven programador para que le ayudes a realizar la tarea que le dio el profesor Racso.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada contiene un entero $Q$ que representa la cantidad de consultas que tiene la tarea de Pierre.\n\nLas siguientes $Q$ lineas de la entrada, contienen dos números cada una, $a_i$ y $b_i$ que representan el rango de consulta.\n\n## Límites\n\n- $1 \\leq Q \\leq 10^6$\n- $1 \\leq a_i,b_i \\leq 10^7$\n",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir $Q$ líneas, donde la i-ésima linea contiene la respuesta a la i-ésima consulta, que es la cantidad de números unitarios que hay entre $a_i$ y $b_i$ inclusive.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n10 54\n8 26\n1 10\n",
            "output": "19\n9\n9\n"
          },
          {
            "input": "2\n44 44\n79 79\n",
            "output": "1\n0\n"
          },
          {
            "input": "4\n1 1000\n2 300\n87 800\n51 982\n",
            "output": "470\n141\n332\n435\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a910e780f652bcb1c3a36"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1545",
      "name": "Empatizando con el juez",
      "tags": [
        "OBI",
        "OBI2023",
        "OBI2023Dist"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 4,
            "partial": 0,
            "description": {
              "ES": "El texto que se te da, tendrá tamaño 2.",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 13,
            "partial": 0,
            "description": {
              "ES": "El texto que se te da, tendrá tamaño 3.",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 22,
            "partial": 0,
            "description": {
              "ES": "El texto que se te da, tendrá una sola línea de texto.",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 25,
            "partial": 0,
            "description": {
              "ES": "El texto que se te da, tendrá dos líneas de texto.",
              "EN": ""
            }
          },
          "5": {
            "group": 5,
            "points": 36,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "\\textAlign=right \"Esa máquina de movimiento continuo no sirve para nada, cada vez camina más rápido\"\n\n\\textAlign=right Homero Simpson, 1994\n\nPenguino, nuestro amigo amante de las pizzas cuadradas ha estado meses sin crear nuevos problemas para competencias de programación.\n\nDebido a esta falta de práctica, ha cometido un error terrible en el juez de la Olimpiada de Ositos Barrigoncitos Imaginarios(OOBI), y necesita de tu ayuda para solucionar este horror en el juez! Se te nombra juez honorario de la OOBI y se te pide crees un programa que resuelva el error creado por Penguino.\n\n\nPasa que el programa creado por Penguino para juzgar los problemas imprime muchísimo texto completamente al azar junto con la respuesta del juez, por ejemplo imprime “wurhgiwOKwjenfiwfwf” en vez de solo “OK”.\nO incluso imprime múltiples líneas de texto con la respuesta del juez escondida por ahí.\n\nPenguino está seguro que se imprime una sola respuesta entre todo el texto mostrado por el juez, ya sea “OK”, “AC” o “WA”, el texto que se te da jamás tendrá dos veredictos.",
          "EN": ""
        },
        "input": {
          "ES": "Se te dará una o múltiples líneas de entrada con caracteres de texto en ellas, en alguna de estas líneas esta escondida la respuesta del juez.\n\n## Límites\nEl tamaño de todo el texto ingresado será no mayor a $10^6$ caracteres.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir la verdadera respuesta del juez en una sola línea.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "iwruhfiwruACrogf\nwrgetxhryehwg\nwsrgerhber\nsu programa ha recibido un veredicto incorrecto\nvuelva a probar\n",
            "output": "AC\n"
          },
          {
            "input": "Ac ok WAwawawawawa aceptado\n",
            "output": "WA\n"
          },
          {
            "input": "este problema\nesta auspiciado\npor slurm cola\npruebe slurm cola!\nslurpslurpOKslurp\npor que sigues leyendo?\nNo hay otro veredicto aqui\n",
            "output": "OK\n"
          },
          {
            "input": "OK\n",
            "output": "OK\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a877946ea6f74412f9415"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1544",
      "name": "Escalabilidad de Servidores",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 2,
            "partial": 0,
            "description": {
              "ES": "$k=0$ es decir tener el servidor tal como esta actualmente es gratis.",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 2,
            "partial": 0,
            "description": {
              "ES": "$q=0$ es decir que aumentar RAM al servidor actual es gratis.",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 2,
            "partial": 0,
            "description": {
              "ES": "$M = N$ es decir que no se tendrá una subida de usuarios. ",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 94,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Paz, es una ingeniera de despliegue en una nueva startup de su ciudad. Como es bien sabido las startups se caracterizan por tener en su inicio un pequeño prototipo para poder probar este en sus primeros usuarios. La startup donde trabaja Paz, tiene una aplicación llamada Yingo, que permite hablar con una inteligencia artificial que te ayuda a hacer tus compras diarias.\n\nLa startup recientemente ha recibido una ronda de inversión muy muy grande (imagina que tienen casi dinero ilimitado), esta ronda de inversión principalmente se usará para escalar los servidores de la aplicación Yingo para que pueda soportar más usuarios concurrentes.\n\nSe pronostica que la aplicación Yingo tendrá un máximo de $N$ usuarios concurrentes durante el próximo mes. Y también según un estudio que realizó Paz, se sabe que por cada nuevo usuario se necesita al menos $10$ MB de memoria RAM en los servidores.\n\nActualmente la aplicación Yingo solo tiene un servidor que soporta $M$ usuarios concurrentes como máximo, este servidor le cuesta a la startup $k$ dólares por mes. \n\nComo es bien sabido en la industria existen dos formas de escalar, de forma vertical y de forma horizontal, asi que Paz propone las siguientes soluciones:\n\n- **DE FORMA VERTICAL:** Paz propone que se aumente memoria RAM al actual servidor que tiene la startup, por un costo de $q$ dólares por cada $5$ MB de memoria RAM.\n- **DE FORMA HORIZONTAL:** Paz propone que se compren nuevos servidores, iguales al servidor que tienen actualmente, el cual puede soportar $M$ usuarios nuevos por un costo de $k$ dolares al mes.\n\\end{itemize}\n\nEl CEO de la startup esta muy ocupado asi que pide tu ayuda dados $N$, $M$, $k$ y $q$ debes determinar que opción es la mas beneficiosa para la empresa en cuestión de costos, es decir debes elegir la opción más barata, si ambas opciones tienen el mismo costo asociado, debes eleegir la forma VERTICAL.",
          "EN": ""
        },
        "input": {
          "ES": "La primera y única linea de entrada contiene 4 números enteros no negativos $N$, $M$, $k$ y $q$ que representan lo descrito en en el enunciado del problema.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir **VERTICAL** en caso de que a la startup le convenga usar esta solución o imprimir **HORIZONTAL** en caso contrario.\n\n# Restricciones\n- $1 \\leq M \\leq N \\leq 10^6$\n- $0 \\leq k,q \\leq 10^3$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "110 50 30 2\n",
            "output": "HORIZONTAL"
          },
          {
            "input": "70 30 40 1",
            "output": "VERTICAL"
          },
          {
            "input": "31 20 100 3",
            "output": "VERTICAL"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a62d646ea6f74412f8c56"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1543",
      "name": "Contraseña de Seguridad",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 3,
            "partial": 0,
            "description": {
              "ES": "La contraseña solo tendrá una letra y $k=1$ ",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 8,
            "partial": 0,
            "description": {
              "ES": "$k=1$ ",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 89,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original.",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "La mayoría de las personas tiene una amplia cantidad de información almacenada en internet, en sus cuentas de redes sociales, sus cuentas de correo electrónico y en la nube, es por eso que hoy en día especialidades como la Seguridad Informática son muy requeridas.\n\nUna de las primeras temáticas que se estudia en esta área es la encriptación de texto. Daniela es una ingeniera que quiere ser una gran especialista en Seguridad Informática, sin embargo aún esta aprendiendo, ella actualmente trabaja en una empresa y es muy buena para detectar problemas y fallos de seguridad.\n\nUn día detecta dos fallos grandes en la empresa, el primero es muy complicado de reparar así que le tomará casi todo su tiempo y el segundo es algo más fácil, así que pide tu ayuda para resolver el segundo fallo. Daniela notó que muchas contraseñas almacenadas en la base de datos han sido filtradas, así que decide cambiar las contraseñas de la siguiente manera:\n1. Daniela usará un programa que desencriptará la contraseña de manera segura.\n2. Como segundo paso, Daniela seleccionará un número $k$ aleatorio entre $1$ y $25$.\n3. Como Daniela esta ocupada, te dará la contraseña desencriptada y el número $k$ y tu debes cambiar cada caracter de la contraseña desencriptada (se garantiza que la contraseña desencriptada solo tiene letras mayúsculas del alfabeto ingles) de la siguiente forma:\n\n- Por cada caracter debes encontrar el $k$-ésimo caracter siguiente, de forma circular, es decir el caracter que sigue a la letra Z es A.\n- Después de encontrar el $k$-ésimo caracter siguiente, debes reemplazar cada caracter en la contraseña desencriptada por el $k$-ésimo caracter siguiente a cada caracter.\n4. Finalmente debes devolver la contraseña cambiada a Daniela, para que ella la encripte y la guarde.\n\\end{enumerate}\n\nAyuda a Daniela a resolver este fallo.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada contendrá una cadena de caracteres que es la contraseña desencriptada. La segunda linea de entrada contiene $k$ que es el número que Daniela escogió para crear la nueva contraseña.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir, en una sola línea, la nueva contraseña que le pasaras a Daniela.\n\n# Restricciones\n- La contraseña desencriptada tendrá a lo más mil caracteres, todos los caracteres serán letras mayúsculas el alfabeto ingles y no contendrá espacios ni caracteres especiales.\n- $1 \\leq k \\leq 25$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "CONTRASENAZ\n3",
            "output": "FRQWUDVHQDC"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a5c1b46ea6f74412f8af9"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1542",
      "name": "Compra de Barbijos",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 3000,
        "memoryLimit": 512000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 3000,
            "memoryLimit": 512000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 3000,
            "memoryLimit": 512000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 3000,
            "memoryLimit": 512000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 512000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 8,
            "partial": 0,
            "description": {
              "ES": "$N=1$, es decir hay una sola tienda ",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 11,
            "partial": 0,
            "description": {
              "ES": "$N=2$, es decir hay dos tiendas.",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 19,
            "partial": 0,
            "description": {
              "ES": "Todas las tiendas están al lado derecho de la casa de Tania.",
              "EN": ""
            }
          },
          "4": {
            "group": 4,
            "points": 62,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "La reciente crisis climática en la ciudad Chukuta ha hecho que la calidad dele aire disminuya en la ciudad y es por eso que la gente ha decidido volver a utilizar barbijos.\n\nTania es una jovencita muy precavida y dada la mala calidad del aire en su ciudad ha decidido comprar $k$ barbijos de las $N$ distintas farmacias que hay en su ciudad. Para hacer este problema más sencillo (y que no sea muy difícil de resolver) supondremos que la ciudad Chukuta es como la recta de números enteros (positivos y negativos) y que la casa de Tania esta en la posición 0. Se nos da la posición de las $N$ farmacias y también cuantos barbijos hay en cada una de ellas.\n\nAyuda a Tania a determinar la distancia mínima que debe recorrer para comprar los $k$ barbijos que desea.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada contendrá 3 líneas. En la primera línea dos enteros $k$ y $N$ que representan la cantidad de barbijos que quiere Tania y la cantidad de farmacias que hay en su ciudad respectivamente.\n\nLa segunda linea de entrada tiene $N$ enteros $D_1, D_2, \\dots D_N$ donde cada entero $D_i$ representa la ubicación en la recta numérica de la tienda $i$.\n\nLa tercera linea de entrada tiene $N$ enteros $C_1, C_2, \\dots C_N$ donde cada entero $C_i$ representa la cantidad de barbijos que hay en la tienda $i$.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir la distancia mínima que debe recorrer Tania para comprar los $k$ barbijos que desea.\nO imprime $-1$ si es que no hay suficientes barbijos en toda la ciudad.\n\n# Restricciones\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq k \\leq 10^9 $\n- $0 \\leq C_i \\leq 10^9$\n- $-10^9 \\leq D_i \\leq 10^9$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 2\n-2 2\n2 2",
            "output": "6\n"
          },
          {
            "input": "10 5\n1 2 3 4 5\n1 1 1 1 1",
            "output": "-1"
          },
          {
            "input": "100 3\n-1 2 4\n90 10 100",
            "output": "4"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "652a555746ea6f74412f8994"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1541",
      "name": "Test",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/b19ba75e-6829-4a19-9c8b-656d5c308104.png",
        "nickname": "Abraham",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "DYNAMIC",
        "mode": "TOTAL",
        "byProgrammingLanguage": {},
        "pointsByGroups": {},
        "evaluatorSource": "Aaaa"
      },
      "author": "",
      "ownerNickname": "Abraham",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PRIVATE",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6522a7ae46ea6f74412ded9a"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1540",
      "name": "TypeNull parte2",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/64c2a40b-4341-4d3b-a29d-7992f6d5abf5.png",
        "nickname": "luchxDD",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "luchxDD",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "7\n5 4\n1 4 3 4 1\n4 1\n2 3 4 4\n5 6\n43 5 60 4 2\n2 5\n1 5\n4 1\n5 3 3 1\n1 3\n3\n5 3\n3 4 1 5 5",
            "output": "SI\nNO\nNO\nSI\nSI\nSI\nSI"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6513c0f3ad034126ad00044e"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1539",
      "name": "type: NULL",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/64c2a40b-4341-4d3b-a29d-7992f6d5abf5.png",
        "nickname": "luchxDD",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "luchxDD",
      "statement": {
        "description": {
          "ES": "Null we",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n2 1 1\n10 1 2\n3 7 8",
            "output": "3\n7\n5"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6513b8a5ad034126ad00029d"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1538",
      "name": "null",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f6b4f0deed17632e7683841.",
        "nickname": "Micky",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 2000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "Micky",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6513a79bad034126adffff0f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1537",
      "name": "Tienda de Juguetes",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f6b4f0deed17632e7683841.",
        "nickname": "Micky",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 2000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "Micky",
      "statement": {
        "description": {
          "ES": "Maria fue a una tienda de juguetes y quiere comprar un juguete, como Maria tiene $x$ monedas de dinero y se propuso a comprar el juguete más caro. Maria puede comprar un juguete si el valor del juguete es menor o igual a la cantidad de monedas que tiene Maria. Cuando Maria entro a la tienda el dueño de la tienda le mostro una lista de precios de los $n$ juguetes. Maria se pregunto ya que tiene $x$ monedas, ¿cual es el precio del juguete mas caro que puede comprar?",
          "EN": ""
        },
        "input": {
          "ES": "Se te dara un valor $n$, que es la cantidad de precios de juguetes en la tienda ($1 \\leq N \\leq 10^{5}$) y un valor $x$ ($1 \\leq N \\leq 10^{5}$) que es la cantidad de monedas que tiene Maria.\n\nLa siguiente fila serán los precios de los $n$ juguetes que el dueño de la tienda le dio a Maria, donde $1 \\leq a_{i} \\leq 10^{5}$.\n",
          "EN": ""
        },
        "output": {
          "ES": "Se debe imprimir el precio del juguete mas caro que puede comprar Maria. Si maria no puede comprar ningun juguete imprimir 0.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5 10\n4 3 9 5 1",
            "output": "9"
          },
          {
            "input": "10 10\n1 1 1 1 1 1 1 1 1 1",
            "output": "1"
          },
          {
            "input": "6 1\n2 3 4 5 6 7",
            "output": "0"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "650e1af5ad034126adfedacd"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1536",
      "name": "OG",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "raphaelo2307",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "Rafael Nina",
      "ownerNickname": "raphaelo2307",
      "statement": {
        "description": {
          "ES": "Og es un cavernícola que tiene muchos problemas, ya sabes, lo típico de la vida como sobrevivir a tormentas, no ser devorado por tigres dientes de sable y muchas cosas más como las matemáticas.\nEste último ejemplo es lo más complicado para OG, ya que no puede saber el total de hijos que tiene después de un ataque de dientes de sable.\nOg cuenta la cantidad de hijos que tiene con los dedos de su mano derecha y la cantidad de hijas que tiene con los dedos de su mano izquierda, ayuda a OG, a saber la cantidad total de hij@s que tiene.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada consiste en 2 números enteros, el primero representa la cantidad de hijos que ha contado con la mano derecha y el segundo número la cantidad de hijos que ha contado con la mano izquierda",
          "EN": ""
        },
        "output": {
          "ES": "Tu programa debe mostrar el total de hij@s que tiene OG",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5 3",
            "output": "8"
          },
          {
            "input": "1 2",
            "output": "3"
          },
          {
            "input": "3 1",
            "output": "4"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": "Por: Rafael Nina"
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64fb9377641bcf0936849953"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1535",
      "name": "Cono de helado",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "Fury",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "Fury",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Benjamín tiene n frascos de helado, cada uno contiene un sabor diferente de helado. Cada frasco\ncontiene una cantidad inimaginable de helado por lo que podemos considerar que hay una infinita\ncantidad de bolas de helado. Benjam´ın quiere disfrutar de un poco de helado, le gustar´ıa comer\nexactamente m bolas de helado. El problema es que Benjam´ın no sabe qu´e sabores escoger para su\nhelado. ¿De cu´antas formas puede hacerlo?"
        },
        "input": {
          "ES": "",
          "EN": "La entrada consiste de una única linea que contiene $n$ y $m$ $(1 ≤ n ≤ 100, 1 ≤ m ≤ 10^9 )$."
        },
        "output": {
          "ES": "",
          "EN": "Imprimir en una sola linea la cantidad de formas en que Benjam´ın puede elegir su helado modulo\n2023."
        },
        "sampleCases": [
          {
            "input": "2 3",
            "output": "4"
          },
          {
            "input": "4 6",
            "output": "84"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64ee119b641bcf093681a949"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1534",
      "name": "La pesadilla de Noa",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "mijatolaxd",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 512000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 512000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 512000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 512000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 512000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 512000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "Alexis Vargas",
      "ownerNickname": "mijatolaxd",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Noa el perro, tuvo una interesante pesadilla. En el mundo onírico de Noa, se despliega un paisaje conformado por $N$ montañas dispuestas en orden de izquierda a derecha. En cuanto a cada montaña $i$, se nos revela su altura $a_i$  y la cantidad de deliciosos huesos $h_i$ enterrados en la cima de dicha montaña. La aventura comienza con un salto hacia una de las montañas y se compone de múltiples pasos. En cada uno de estos, Noa puede saltar hacia una montaña que esté a la derecha de la que se encuentra en ese momento (inclusive puede saltar sobre varias montañas) siempre y cuando la altura no sea menor que la de la montaña actual. En cada montaña que Noa visite, desenterrará todos los huesos que haya.\nNoa puede escapar de la pesadilla después de cualquier cantidad de pasos (incluso podría decidir no dar ningún salto), pero es necesario que recoja al menos $C$ huesos para poder lograrlo.\nDespués de mucho Noa logra escapar de aquella pesadilla, pero la curiosidad de Noa le lleva a preguntarse cuantas formas diferentes existieron para lograr el escape. Dos formas se consideraran distintas si hay alguna montana que Noa haya visitado en un escape y que no haya sido explorada en la otra."
        },
        "input": {
          "ES": "",
          "EN": "\nLa primera linea de entrada contiene un numero entero $N, (1 ≤ N ≤ 40)$, y $C (1 ≤ C ≤ 10^{10})$. La segunda linea contiene los valores $a_i (1 ≤ a_i ≤ 10^9,1 ≤ i ≤ N)$. La tercera linea contiene los valores $h_i (1≤h_i ≤10^9,1≤i≤N)$.\n"
        },
        "output": {
          "ES": "",
          "EN": "Mostrar un número que representa el número de formas diferentes en que Noa podía escapar de la pesadilla."
        },
        "sampleCases": [
          {
            "input": "4 15 \n5 5 6 2\n5 12 10 1",
            "output": "4"
          }
        ],
        "note": {
          "ES": "",
          "EN": "### Explicación\nLas cuatro formas son:\n+ Empezar en la montaña 1, saltar a la montaña 2, y saltar a la montaña 3, acumulando $5 + 12 + 10 = 27$ huesos.\n+ Empezar en la montaña 2 y saltar a la montaña 3, acumulando $12 + 10 = 22$ huesos. \n+ Empezar en la montaña 1 y saltar a la montaña 3, acumulando $5 + 10 = 15$ huesos. \n+ Empezar en la montaña 1 y saltar a la montan ̃a 2, acumulando $5 + 12 = 17$ huesos."
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64eb928f238b060018691136"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1521",
      "name": "abacaba",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7bbc53bb30980d46c022f0.",
        "nickname": "mc_rodrix99",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {},
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "mc_rodrix99",
      "statement": {
        "description": {
          "ES": "",
          "EN": ""
        },
        "input": {
          "ES": "",
          "EN": ""
        },
        "output": {
          "ES": "",
          "EN": ""
        },
        "sampleCases": [],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64e041672eceeb02342c720f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1520",
      "name": "Mayor Binario",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Dada una lista de $N$ números, en su representación binaria. Tu tarea es saber cual de estos números es el mayor.",
          "EN": "Dada una lista de $N$ números, en su representación binaria. Tu tarea es saber cual de estos números es el mayor."
        },
        "input": {
          "ES": "La primera línea de entrada contendrá $N$ $(1 \\leq N \\leq 1000)$. Las siguientes $N$ lineas representarán la lista de $N$ números binarios. Se garantiza que estos números binarios, no tendrán mas de 30 bits.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir el número binario que se el mayor de la lista.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n1010\n100010\n100101\n1011\n100110",
            "output": "100110"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64dd5a232eceeb02342bd66a"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1519",
      "name": "Número más brillante",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "La brillantez de un número, se puede definir como la cantidad de unos que tiene la representación binaria del número. Por ejemplo el número 30, tiene como representación binaria 11110 y su brillantez es 4.\n\nComo la brillantez de un número no es tan notoria, tu tarea ahora es que dada una lista de $N$ números enteros positivos, debes indicar cual de ellos es el más brillante, en caso de existir empates, se debe imprimir el menor número.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada contiene $N$ $(1 \\leq N \\leq 10^3)$ que es la cantidad de números que se te darán. Luego siguen $N$ números enteros positivos $a_i$ tal que $(1 \\leq a_i \\leq 10^6)$, separados por espacios que son la lista de números de la cual debes hallar el número con mayor brillantez.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir un número que es el número con mas brillantez de la lista dada.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n30\n4\n10\n63\n7",
            "output": "63"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64dd47b22eceeb02342bd1ff"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1518",
      "name": "Conjetura de Goldbach",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Goldbach, era un famoso matemático, quien un día enunció una de las conjeturas (verdaderes aparentes) mas lindas de las matemáticas. Goldbach afirma que para cualquier número par mayor que 2, este se puede escribir como la suma de dos números primos. Por ejemplo el 16, se puede escribir como 3 + 13.\n\nTu tarea es que dado un número par mayor que dos, debes imprimir cuales serian los números primos que sumados dan ese número.",
          "EN": ""
        },
        "input": {
          "ES": "La primera y única linea de entrada consiste en un número entero $x$ par, tal que $(2 < x \\leq 1000)$",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir dos números primos, que sumados den el número que se te dio en la entrada. Si existen varias soluciones debes imprimir la que tenga el primer componente menor. Además debes imprimir los números primos de menor a mayor.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "28",
            "output": "5 23"
          },
          {
            "input": "100",
            "output": "3 97"
          }
        ],
        "note": {
          "ES": "Nota que el 100 tambien es igual a 11 + 89, sin embargo como 3 es menor a 11, la respuesta que debes dar es 3 y 97.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64dd290c2eceeb02342bcb5e"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1517",
      "name": "Potencias de 2",
      "tags": [
        "binario"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "En matemática existe una interesante idea, que es que todo número se puede representar como la suma de potencias de 2, de hecho esto es cierto pues la representación binaria de un número nos indica esto.\n\nTu tarea el día de hoy es la de encontrar las potencias de dos que sumadas dan un número $x$ por ejemplo, si el número es 17, las potencias de dos que dán este número son el 1 y el 16. Si el número es 30, las potencias de dos que dan este resultado son 2, 4, 8 y 16",
          "EN": ""
        },
        "input": {
          "ES": "1Un número entero postivo $x$ $(1 \\leq x \\leq 10^6)$ del cuál debes obtener las potencias de dos que sumadas dan $x$.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir en orden ascendente y separadas por un espacio las potencias de dos que sumadas dan el número $x$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "17",
            "output": "1 16"
          },
          {
            "input": "30",
            "output": "2 4 8 16"
          },
          {
            "input": "64",
            "output": "64"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64da9d912eceeb02342b45f6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1516",
      "name": "Decimal a Binario",
      "tags": [
        "binario"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "El enunciado de este problema es sencillo y conciso, recibirás un número entero positivo de máximo 18 dígitos y debes imprimir en una línea su representación binaria.",
          "EN": ""
        },
        "input": {
          "ES": "Un número entero $x$ $(1 \\leq x \\leq 10^{18})$, el cuál debes convertir a binario.",
          "EN": ""
        },
        "output": {
          "ES": "La representación binaria del número $x$ que se te dió en la entrada, la representación no debe tener ceros a la izquierda.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "10",
            "output": "1010"
          },
          {
            "input": "123456",
            "output": "11110001001000000"
          },
          {
            "input": "10000000000",
            "output": "1001010100000010111110010000000000"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64da9a1c2eceeb02342b4540"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1515",
      "name": "La Fiesta de Franco",
      "tags": [
        "matematica"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Franco esta organizando una fiesta en su lujosa mansión, él tiene a su disposición $N$ empanadas y $M$ queques, el quiere repartir esto equitativamente entre sus invitados, como Franco  tiene mucho espacio en su casa desea invitar a la mayor cantidad de personas, pero sin que falten empanadas y/o queques.\n\n¿Cuánta gente como máximo debe invitar Franco para que el pueda repartir las empandas y queques equitativamente?. Por ejemplo si Franco tiene 80 empanadas y 60 queques, Franco puede invitar a 20 personas. Por otro lado si Franco tiene 17 empanadas y 15 queques, Franco debe solo invitar una persona, pues si invita a 5 personas, por ejemplo, les dará 3 queques a cada uno pero para repartir 17 empanadas entre 5 personas, algunas quedarán con más empanadas y otras con menos, cosa qu Franco no quiere que suceda.\n\nAyuda a Franco a saber cuanta gente debe invitar como máximo a su fiesta.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada contendrá dos números enteros $N$ y $M$ que representan la cantidad de empandas y queques, que tiene Franco para su fiesta. Estos números no serán mayores que mil.",
          "EN": ""
        },
        "output": {
          "ES": "Debe imprimir un entero, la cantidad máxima de invitados que puede tener Franco en su fiesta para satisfacer las condiciones que quiere.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "15 30",
            "output": "15"
          },
          {
            "input": "25 10",
            "output": "5"
          },
          {
            "input": "100 13",
            "output": "1"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64da97312eceeb02342b44a6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1514",
      "name": "Fuerza de un número",
      "tags": [
        "matematica"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 10000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 10000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "En Naturalia, viven los números naturales, como en toda sociedad los habitantes de Naturalia han acordado entre ellos una forma de medir la fuerza de sus habitantes.\n\nPara medir la fuerza de un número natural en Naturalia se debe contar la cantidad de factores primos que tiene un número, asi por ejemplo:\n- El número 11 tiene fuerza 1, pues su único factor primo es el 11\n- El número 25 tiene fuerza 2, pues tiene dos factores primos el 5 y el 5 (note que el 5 cuenta dos veces)\n- El número 24 tiene fuerza 3, pues sus factores primos son el 2, 2 y 3\n\nComo los habitantes de Naturalia no tienen tiempo pues estan defendiendo su ciudad de los habitantes de Negacity y además necesitan saber la fuerza de sus habitantes, piden tu ayuda para que dado un número indiques la fuerza que tiene.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada contendrá un número $N$ $(1 \\leq N \\leq 1000)$ que indica la cantidad de habitantes de Naturalia. Posteriormente siguen $N$ líneas cada una con un número natural $x$ del que se desea saber su fuerza. Se sabe que $x$ es mayor o igual a 1 y menor o igual a 1 millón. ",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir $N$ lineas cada una con la fuerza del número x correspondiente de la entrada.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n10\n18\n2310\n1\n17",
            "output": "2\n3\n5\n0\n1"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64da92f5855fe5ca58785200"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1513",
      "name": "Consultar Divisores",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "Andres es un chico al que le gustan mucho las matematicas, el tiene su numero favorito que lo representamos como $X$, Maria que es su hermana se propuso un reto, que es el siguiente. Maria le dara $Q$ consultas a Andres, en cada consulta le dara un numero $Y$ a Andres y el debe responder si $Y$ es divisor de $X$. Ayuda a Andres con esta tarea."
        },
        "input": {
          "ES": "",
          "EN": "La primera linea de entrada contrendra dos enteros, $X$, $(1 \\leq X \\leq 10^6)$ el numero favorito de Andres y $Q$, $(1 \\leq Q \\leq 10^5)$ la cantidad de consultas de Maria para Andres.\n\nLas siguientes $Q$ lineas de entrada contendran el entero &Y&, $(1 \\leq Y \\leq 10^6)$ que es numero que Maria quiere saber si es divisor de $X$."
        },
        "output": {
          "ES": "",
          "EN": "La salida seran $Q$ lineas, una por consulta. debera ser \"SI\" sin comillas, si $Y$ es divisor de $X$ y $NO$ si $Y$ no es divisor de $X$."
        },
        "sampleCases": [
          {
            "input": "10 4\n2\n4\n5\n3",
            "output": "SI\nNO\nSI\nNO"
          },
          {
            "input": "24 5\n30\n2 \n3\n6\n12 ",
            "output": "NO\nSI\nSI\nSI\nSI"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64d95836855fe5ca587811d6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1512",
      "name": "Consultando Primos",
      "tags": [
        "matematica"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq Q \\leq 10$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq Q \\leq 10000$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 50,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Los números primos son aquellos números naturales mayores a 1 que tienen exactamente 2 divisores, por ejemplo el 7 es un número primo pues solo tiene como divisores a 1 y 7, en cambio el número 12, no lo es, porque tiene como divisores a 1, 2, 3, 4, 6, 12.\n\nEl presente problema te dará $Q$ números naturales, de los cuales tu debes indicar si son o no primos.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada tiene un número entero $Q$ $(1 \\leq Q \\leq 10^6)$ que indica la cantidad de consultas de números primos que se harán.\nLuego siguen $Q$ lineas cada una con un número entero $x$ tal que $ 1 \\leq x \\leq 10^7$",
          "EN": ""
        },
        "output": {
          "ES": "La salida debe contener $Q$ lineas cada una con la respuesta a la consulta. **SI** en caso de que el número consultado sea primo y **NO** en caso contrario.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "7\n11\n15\n91\n57\n43\n97\n1",
            "output": "SI\nNO\nNO\nNO\nSI\nSI\nNO"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64cac42d5213612de9f627e9"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1511",
      "name": "Maximo comun divisor",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=left\nMarco es un programador al cual le gustan las matematicas, en su clase de la semana pasada le enseñaron a realizar el maximo comun divisor entre dos numeros. Marco se encontro un array antiguo de numeros que dejo en un papel al tratar de realizar un problema pasada, este array consta de $N$ numeros enteros. Marco quiere saber el Maximo comun divisor de esta lista de $N$ numeros, ayudalo en esta tarea."
        },
        "input": {
          "ES": "",
          "EN": "\\textAlign=left\nLa primera linea de entrada tendra un entero $N$, ($$1\\leq N \\leq 10^5) $$ que es el tamaño del array que tiene Marco.\n\nLa siguiente linea de entrada tendra $N$ enteros, $a_i$, $$(1 \\leq a_i \\leq 10^5)$$. Los numeros del array de Marco. "
        },
        "output": {
          "ES": "",
          "EN": "La salida debe ser un solo numero entero que corresponde al Maximo comun divisor de todos los numeros del array."
        },
        "sampleCases": [
          {
            "input": "4\n1 2 3 4 ",
            "output": "1"
          },
          {
            "input": "6\n10 6 4 2 20 12",
            "output": "2"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64c9bd2b5213612de9f5f2d6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1510",
      "name": "Subconjuntos pares",
      "tags": [
        "subsets"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 3000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 3000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 3000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq N \\leq 20$\n- $1 \\leq A_i \\leq 10^{18}$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 70,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq N \\leq 10^6$\n- $1 \\leq A_i \\leq 10^{18}$",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "Juki",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "En matemáticas, el conjunto $A$ es un subconjunto de un conjunto $B$ si todos los elementos de $A$ son también elementos de $B$ ($A\\subseteq B$); $B$ es entonces un superconjunto de $A$ ($B\\supseteq A$). Es posible que $A$ y $B$ sean iguales; si son desiguales, entonces $A$ es un subconjunto propio de $B$.\n\n> [referencia](https://en.wikipedia.org/wiki/Subset)\n\nDado un conjunto A de enteros, Juki quiere saber la cantidad de subconjuntos que tienen a todos sus elementos pares.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada tiene un entero $N$ ($1 \\leq N \\leq 10^6$) que representa la cantidad de elementos del conjunto $A$.\n\nLa segunda linea de entrada tendra $N$ enteros $A_i$ ($1 \\leq A_i \\leq 10^{18}$) que representan los elementos de A, todos los elementos $A_i$ seran distintos.",
          "EN": ""
        },
        "output": {
          "ES": "Imprimir la cantidad modulo $1000000007$ de subconjuntos tales que todos sus elementos son pares (el subconjunto vacio tambien cumple).",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "7\n8 5 4 1 11 2 7\n",
            "output": "8\n"
          }
        ],
        "note": {
          "ES": "Los subconjuntos que tienen todos los elementos pares son {}, {8}, {4}, {8, 4}, {2}, {8, 2}, {4, 2}, {8, 4, 2}",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64c44c670a61ee24188ac0fa"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1509",
      "name": "Los 10 primeros",
      "tags": [
        "sort",
        "vector",
        "pair"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/b19ba75e-6829-4a19-9c8b-656d5c308104.png",
        "nickname": "Abraham",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2500,
        "memoryLimit": 500000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "C": {
            "language": "C",
            "timeLimit": 2500,
            "memoryLimit": 500000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "Abraham",
      "ownerNickname": "Abraham",
      "statement": {
        "description": {
          "ES": "Juan es un niño muy inteligente y hoy se encuentra muy ocupado en la escuela, la maestra de Juan decidió escoger a los 10 mejores alumnos para presentar un numero en una fecha cívica pero le dio esa tarea a Juan, por lo cual Juan se frustra mucho y decide pedir tu ayuda.\n### Ejemplo\nSi N fuera 12 y los nombres y notas fueran:   \nJuan 89   \nPedro 78   \nLuis 90   \nMarcelo 30   \nPaolo 54   \nMaria 80   \nLucia 45   \nSofia 97   \nWaldo 88   \nPaula 99   \nAlejandra 100   \nJose 96   \nEntonces los 10 mejores alumnos serian:  \n#1:Alejandra 100  \n#2:Paula 99  \n#3:Sofia 97  \n#4:Jose 96  \n#5:Luis 90  \n#6:Juan 89  \n#7:Waldo 88  \n#8:Maria 80  \n#9:Pedro 78  \n#10:Paolo 54  \n",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada contendrá un entero $N$ ($1\\leq N \\leq 40$): Que representara los $N$ alumnos del curso de Juan.   \nLas siguientes N líneas contendrán el nombre de cada alumno y su respectiva nota.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir N líneas de mayor a menor en el siguiente formato: `<#posicion> <nombre> <nota>`.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "12\nJuan 89\nPedro 78\nLuis 90\nMarcelo 30\nPaolo 54\nMaria 80\nLucia 45\nSofia 97\nWaldo 88\nPaula 99\nAlejandra 100\nJose 96",
            "output": "#1:Alejandra 100\n#2:Paula 99\n#3:Sofia 97\n#4:Jose 96\n#5:Luis 90\n#6:Juan 89\n#7:Waldo 88\n#8:Maria 80\n#9:Pedro 78\n#10:Paolo 54"
          }
        ],
        "note": {
          "ES": "> Se garantiza que la cantidad de los $N$ alumnos será mayor o igual a 10, las notas menor a 100 con sus respectivos nombres y no habrán notas repetidas.",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": "  "
      },
      "members": {
        "access": "PRIVATE",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64b5d95e0a61ee241887cf93"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1508",
      "name": "Cadenas Locas",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "chuby",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nUn creador de problemas se cansa de estar inventando historia, tras historia; Personaje en apuros, tras tarea por completar. Incluso se cansa de estar pensando el nombre del protagonista de la historia del problema. Este problema se sale de eso, ire al grano, tienes una cadena $S$ que al principio esta vacia y tienes $Q$ actualizaciones, en cada actualizacion añades una cadena $P_i$ al principio o al final de tu cadena $S$. \nSe debe imprimir la cadena resultante $S$ despues de realizar todas las actualizaciones."
        },
        "input": {
          "ES": "",
          "EN": "La primera linea de entrada contendra un entero $Q$ $(1 \\leq Q \\leq 1000)$\nLas siguientes lineas de entrada contendra una cadena $Q_i$ y un entero $p$ $(1 \\leq p \\leq 2)$. Si $p=1$ significa que debes anexar la cadena $Q_i$ al principio de la cadena $S$ (que inicialmente esta vacia) y si $p=2$ significa que debes anexar la cadena $Q_i$ al final de la cadena $S$."
        },
        "output": {
          "ES": "",
          "EN": "La salida debe ser la cadena $S$ despues de realizar todas las actualizaciones.\n\nPor ejemplo:\n\nSi tenemos $Q=4$ y las siguientes actualizaciones:\n- $Q_1$= aba, $p=1$.\n- $Q_2$= capo, $p=2$.\n- $Q_3$= ara, $p=2$.\n- $Q_4$= peta, $p=1$.\n\nEntonces primero la cadena $S$ estaria vacia, despues de la primera actualizacion la cadena $S$ seria igual a:\n\n\\textAlign=center\n$S= \"aba\"$ \n\nesto porque anexamos la cadena $\"aba\"$ al principio de la cadena $S$.\n\nDespues de la segunda actualizacion la cadena seria la siguiente:\n\n\\textAlign=center\n$S=\"abacapo\"$ \n\nEsto porque anexamos la cadena $\"capo\"$ al final de la cadena $S$.\n\nDespues de la tercera actualizacion $S$ seria igual a:\n\n\\textAlign=center\n$S=\"abacapoara\"$\n\nEsto porque anexamos la cadena $ara$ al  final de la cadena $S$.\n\nY finalmente despues de la ultima actualizacion la cadena seria:\n\n\\textAlign=center\n$S=\"petaabacapoara\"$\n\nEsto porque anexamos la cadena \"peta\" al principio de la cadena.\n\nEntonces la respuesta final es $S=\"petaabacapoara\"$"
        },
        "sampleCases": [
          {
            "input": "4\naba 1\ncapo 2\nara 2\npeta 1",
            "output": "petaabacapoara"
          },
          {
            "input": "3\na 1\nb 1\nc 1",
            "output": "cba"
          },
          {
            "input": "4\na 2\na 2\na 2\na 2",
            "output": "aaaa"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64a885da38850950ed299c44"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1507",
      "name": "Buscando a Waldo",
      "tags": [
        "busqueda"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "1": {
            "group": 1,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq N \\leq 100$\n\n$Q=1$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "$1 \\leq N,Q \\leq 1000$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 50,
            "partial": 0,
            "description": {
              "ES": "Sin restricciones adicionales al problema original ",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Buscando a Waldo es un clásico juego de los años 90 en el que en una imagen se buscaba al personaje Waldo, hoy en día como todo ya es más digitalizado y numérico, este juego ha cambiado.\n\nEl juego de buscando a Waldo ahora consiste en buscar un número en una lista de $N$ números, sin embargo como esta tarea es aburrida y dado el poder de las computadoras modernas, tu tarea será responder $Q$ consultas en las cuales se te especificará un número $x$ el cuál debes buscar en la lista.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada contiene al número $N$ que representa cuantos elementos tiene la lista de números en la que debes buscar.\n\nLa segunda linea de entrada contendrá $N$ números enteros separados por un espacio, que representan la lista de números en la que debes buscar.\n\nLa tercera línea de entrada contendrá el entero $Q$ que representa la cantidad de consultas que se te harán.\n\nLuego siguen $Q$ líneas cada una con el entero $x$ que es el entero que debes buscar.",
          "EN": ""
        },
        "output": {
          "ES": "Para cada una de las $Q$ consultas debes imprimir **SI** en caso de que el número $x$ de esa consulta este en la lista de número que te proporcionaron o **NO** en caso contrario.\n\n# Restricciones.\n\n- $1 \\leq N, Q \\leq 10^5$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "7\n5 9 1 3 7 2 5\n4\n10\n1\n5\n17\n",
            "output": "NO\nSI\nSI\nNO"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64a8840f38850950ed299be8"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1506",
      "name": "Inviertelo",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 50,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": "$(1 \\leq N \\leq 10^5)$"
            }
          },
          "2": {
            "group": 2,
            "points": 50,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": "$(1 \\leq N \\leq 10^9)$"
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "chuby",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nAngela es una fanatica de las cadenas, a ella le gusta todo lo relacionado con las cadenas, es decir: Sumar cadenas; Eliminar caracteres de las cadenas; Buscar ocurrencias en las cadeas. Pero sobre todo le encanta Invertir las cadenas. Angela estuvo jugando con una cadena y se puso a pensar y quiere saber que cadena sera la resultante, si a una cadena $S$ la invierte $N$ veces.  \nPor ejemplo si Angela tuviera la cadena $S=HOLA$ y quiere invertirla $N=2$ veces, corresponderia al siguiente procedimiento.\n\n\\textAlign=center\nCadena S = \"HOLA\"\n\n\\textAlign=center\nOperacion 1: \"ALOH\"\n\n\\textAlign=center\nOperacion 2: \"HOLA\"\n\nEntonces Angela debera imprimir \"HOLA\"."
        },
        "input": {
          "ES": "",
          "EN": "La primera linea de entrada contendra una cadena $S$ con caracteres en minuscula, sin espacios y un entero $N$, que corresponde a la cantidad de veces que se debe invertir la cadena."
        },
        "output": {
          "ES": "",
          "EN": "La salida debera ser la cadena despues de invertirla $N$ veces."
        },
        "sampleCases": [
          {
            "input": "HOLA 2",
            "output": "HOLA"
          },
          {
            "input": "OBI 1",
            "output": "IBO"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64a8753438850950ed299856"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1505",
      "name": "Suma de rangos",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "chuby",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nJuki es un oso al que le encantan los rangos, el siempre que le van una lista de numeros, trata de ver los distintos rangos en su lista de numeros. Juki tiene una lista $A$, que contiene $N$ numeros, ademas de esto Juki se dio un rango de numeros $[l , r]$ y quiere saber la suma de las casillas que van desde $l$ hasta $r$ de su lista $A$. Ayuda a Juki a realizar esta tarea.\n\nPor ejemplo:\n\nSi juki tiene el array de tamaño 5:\n\n\\textAlign=center\n4, 0, 10, -1, 5\n\nY quiere saber la suma del rango $l=2$ y $r=4$, la respuesta seria la suma de las casillas $2, 3, 4$ que seria igual a $9$"
        },
        "input": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa primera linea de entrada contendra un entero N $1 \\leq N \\leq 10^5 $, que es la cantidad de elementos que tiene en su lista Juki.\n\nLa segunda linea de entrada contiene N enteros, $a_i$ $(1 \\leq a_i \\leq 10^5)$ , que corresponden a los elementos dentro la lista de Juki.\n\nLa tercera linea de entrada contiene dos enteros, $[l,r]$,  ($1 \\leq l \\leq r \\leq N $)."
        },
        "output": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa salida debera ser un solo numero entero. La suma del rango $[l,r]$ es decir las casillas que estan dentro de este rango."
        },
        "sampleCases": [
          {
            "input": "5\n1 2 3 4 5\n2 4",
            "output": "9"
          },
          {
            "input": "7\n1 0 0 0 0 0 1\n2 6",
            "output": "0"
          },
          {
            "input": "4\n-1 2 3 1\n2 2 ",
            "output": "2"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64a786e638850950ed296730"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1504",
      "name": "Tribonacci",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "chuby",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nFabricio es un profesor de programacion muy comprometido, no hace mucho les enseño a sus estudiantes respecto a la famosa serie de fibonacci, esa serie numerica que para hallar un termino debes sumar los dos anteriores.\n\n\\textAlign=center\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...\n\n\\textAlign=left\nLa serie mostrada arriba es la serie de fibonacci. Fabricio en su busqueda de un problema desafiantes para sus estudiantes, !!invento la Serie de Tribonaci!! (No la invento, seguramente ya existia antes) Y como su nombre lo dice, exactamente para hallar un termino de esta, debes sumar los 3 terminos anteriores, ¿una locura verdad? Si tu estas leyendo este problema seguramente eres uno de los estudiantes de Fabricio  y debes tratar de resolver este problema.\n\n\\textAlign=center\n0, 1, 1, 2, 4, 7, 13, 24, 44, 81....\n\nLa serie mostrada justo arriba, muestra los primeros 10 terminos de la serie de Tribonacci."
        },
        "input": {
          "ES": "",
          "EN": "La primera linea de entrada contendra un solo entero N, que consiste en que termino de la serie de Tribonacci debes imprimir."
        },
        "output": {
          "ES": "",
          "EN": "La salida debe ser un solo entero, que corresponde al termino numero N, de la serie de Tribonacci.\n\nPor ejemplo:\n\nSi N = 5, se deberia imprimir solo 4.\n\nSi N = 10, se deberia imprimir solo 81."
        },
        "sampleCases": [
          {
            "input": "5",
            "output": "4"
          },
          {
            "input": "10",
            "output": "81"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64a77c9e38850950ed296519"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1503",
      "name": "Relojeria",
      "tags": [
        "funciones",
        "referencias",
        "pairs"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nBob es un chico al cual le encantan los relojes y su abuelo es un relojero. Una vez cuando Bob fue a visitar a su abuelo, al llegar puso su atencion a dos relojes en particular, el reloj $A$ y el reloj $B$. Cuando Bob le pregunto a su abuelo respecto a estos dos relojes su abuelo le dijo que el reloj $A$ esta adelantado $x$ minutos y el reloj $B$ esta adelantado $y$ minutos pero ambos marcarian la misma hora. Como Bob es alguien a quien le gustan los desafios, se propuso a averiguar si su abuelo dice la verdad o no. Ayuda a Bob con esta no muy dificil tarea. "
        },
        "input": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa primera linea de entrada contendra 4 enteros, $h1, m1$,que corresponde a la hora y minutos que marca el reloj $A$ y $h2, m2$. Que corresponden a la hora y minutos que marca el reloj $B$.\n\n\\textAlign=center\n$0 \\leq h1, h2<=23$, $0 \\leq m1, m2<=59$\n\nLa segunda linea de entrada contendra dos enteros $x$ que corresponde a la cantidad de minutos que esta adelantado el reloj $A$ y $y$ la cantidad de minutos que esta adelantado el reloj $B$."
        },
        "output": {
          "ES": "",
          "EN": "\\textAlign=justify\nImprimir $\"YES\"$ sin comillas, si el abuelo de Bob dice la verdad, caso contrario imprimir $\"NO\"$ sin comillas."
        },
        "sampleCases": [
          {
            "input": "2 30 4 20 \n30 140",
            "output": "YES"
          },
          {
            "input": "13 0 12 59 \n1 2",
            "output": "NO"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64a4bee638850950ed28d1f3"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1502",
      "name": "San juan",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7bbc53bb30980d46c022f0.",
        "nickname": "mc_rodrix99",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {},
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "mc_rodrix99",
      "statement": {
        "description": {
          "ES": "San Juan se acerca y has organizado una reunion con tus amigos, han reunido muchos palitos para quemarlos y realizar una fogata. Pero como son muy conscientes deciden no hacerlo y se ponen a jugar con los palitos de una manera diferente.\n\nTienen $n$ palitos con distintas longitudes, tu tarea es modificar todos los palitos de tal forma que todos tengan la misma altura.\n\nTu puedes incrementar o decrementar la longitud de un palito con un esfuerzo $x$, donde $x$ es la diferencia en valor absoluto entre la longitud inicial y la longitud deseada.\n\nPor ejemplo:\n* Si tienes un palito de longitud $x = 2$ y quieres modificar su longitud a $x = 6$, tienes que incrementar su longitud en $4$\n\n* Si tienes un palito de longitud $x = 11$ y quieres modificar su longitud a $x = 2$, tienes que decrementar su longitud en $9$\n\n\nTus amigos te han retado a descubrir cual es el minimo esfuerzo necesario para dicha cumplir dicha tarea.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea contiene un entero $n$, el numero de palitos. $(1 \\le n \\le 2*10^{5})$\n\nLuego existen $n$ enteros: $p_1,p_2,p_3,...,p_n$: las longitudes de los palitos. $(1 \\le p_i \\le 10^{9})$\n",
          "EN": ""
        },
        "output": {
          "ES": "Imprime un entero $x$ que simboliza el esfuerzo minimo total.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "10\n1 4 7 8 10 3 2 5 6 9\n",
            "output": "25\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "648923892f936d58bfea93fe"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1501",
      "name": "Buscame",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7bbc53bb30980d46c022f0.",
        "nickname": "mc_rodrix99",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {},
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "mc_rodrix99",
      "statement": {
        "description": {
          "ES": "En el reino de Arabasta han aparecido dragones y el rey ha decidido enviar caballeros para combatir con semejante fiera y como recompensa la mano de la princesa, en total el rey tiene $N$ caballeros con su respectiva fortaleza $f$. \n\nEl mago del rey le ha informado que van a llegar $D$ dragones, cada uno con su propio grado de resistencia $g$. Así que el rey debe elegir sabiamente a los caballeros que enviará a luchar. Además el mago le ha informado que un dragón puede ser derrotado solamente si envía a un caballero donde $f$ > $g$.\n\nPor ejemplo, si el rey tiene a los caballeros con fortalezas $[1,5,4,5,7,2,3]$ y llega un dragón con grado de resistencia $g=4$, el rey puede enviar a los caballeros en las posiciones $2,4,5$ que son $3$ en total. \n\n¿Cuántos caballeros podría enviar el rey para un determinado dragón?",
          "EN": ""
        },
        "input": {
          "ES": "La entrada consiste de dos enteros $N$ y $D$, donde $(1 \\le N \\le 10^{5})$ y $(1 \\le D \\le 10^{5})$.\n\nLa siguiente linea consiste de $N$ enteros positivos $f_1,f_2,f_3,...,f_n$, donde $x_i \\le 10^{9}$ la fortaleza de cada caballero\n\nLas siguientes $D$ lineas contienen un numero entero positivo $g$, donde $g \\le 10^{9}$, la fortaleza de cada dragon.",
          "EN": ""
        },
        "output": {
          "ES": "La salida consiste de $D$ lineas, donde cada linea contiene un entero $x$, simbolizando la cantidad de caballeros que el rey puede enviar para cada dragon.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "9 6\n3 5 4 5 2 10 6 5 2\n2\n5 \n10\n1\n7\n1234\n",
            "output": "7\n2\n0\n9\n1\n0\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "648921c12f936d58bfea9394"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1500",
      "name": "Auxilio",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7bbc53bb30980d46c022f0.",
        "nickname": "mc_rodrix99",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "mc_rodrix99",
      "ownerNickname": "mc_rodrix99",
      "statement": {
        "description": {
          "ES": "El sargento primero de la fuerza aérea, tiene una rutina muy singular. Anotar cuántos minutos duerme cada noche. \n\nUn día, debido a los recientes cambios de clima en la ciudad de La Paz ha caído enfermo en cama por una extraña razón con síntomas muy peculiares. El doctor que le atiende, determina que esta infectado con la Gripe-143, asi que para curarle necesita algunos datos del sargento.\n\n* Un registro de los minutos dormidos por dia de los ultimos $N$ dias\n\nDado esa informacion el doctor, recorre cada segmento de cada $k$ dias (donde $k\\leq N$), para cada segmento de dias ,obtiene el promedio de dicho segmento y lo va acumulando para obtener una suma total.\n\nEj:\nSi los minutos que durmio el sargento son: $[1,2,3,4,5,6]$ y $k=4$, \n1. El primer segmento es $[1,2,3,4]$ su promedio es: $\\frac{10}{4} = 2.5$ \n2. El segundo segmento es $[2,3,4,5]$ su promedio es: $\\frac{14}{4} = 3.5$ \n3. El tercer segmento es $[3,4,5,6]$ su promedio es: $\\frac{18}{4} = 4.5$ \n\nLa suma total es: $2.5 + 3.5 + 4.5 = 10.5$, como al doctor no le gustan decimales, solo toma la parte entera $10$.\n\nEl doctor te pide que simules este proceso por el.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea contiene dos enteros positivos $N$ y $k$, donde  $(1 \\le N \\le 5*10^{3})$, $(1 \\le k \\le N)$, la cantidad de dias y los segmentos respectivamente. \n\nAcontinuacion siguen $N$ enteros $x_1,x_2,...,x_n$ donde $1 \\le x_i \\le 10^{5}$ que simboliza la lista del sargento.\n",
          "EN": ""
        },
        "output": {
          "ES": "La salida consiste de un unico numero entero, la respuesta al problema.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "9 3\n1 5 4 5 2 10 6 1 2",
            "output": "32\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "648915512f936d58bfea90e6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1499",
      "name": "¿Camino o ciclo Euleriano?",
      "tags": [
        "graphs"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 3$\n- $1 \\leq E \\leq 6$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 100$\n- $1 \\leq E \\leq 9900$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 70,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 100000$\n- $1 \\leq E \\leq 1000000$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "Juki",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "En la teoría de grafos, un sendero euleriano (o camino euleriano) es un sendero en un grafo dirigido o no dirigido finito que visita cada arista exactamente una vez (se permite volver a visitar los vértices).\n\nDe manera similar, un circuito euleriano o ciclo euleriano es un camino euleriano que comienza y termina en el mismo vértice.\n\n[Fuente](https://en.wikipedia.org/wiki/Eulerian_path)\n\nDado un grafo no dirigido, imprimir `has eulerian cycle` si tiene un ciclo euleriano, imprimir `has eulerian path` si tiene un camino euleriano y si no tiene ni ciclo ni camino euleriano imprmir `none`.\n",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada contiene 2 enteros $V$ y $E$, donde $V$ representa la cantidad vértices del grafo y $E$ la cantidad de aristas del grafo.\n\nLas siguientes $E$ lineas contienen 2 enteros $u$ y $v$, que representa que existe una arista del vértice $u$ al vertice $v$.",
          "EN": ""
        },
        "output": {
          "ES": "Imprimir `has eulerian cycle` si tiene un ciclo euleriano, imprimir `has eulerian path` si tiene un camino euleriano y si no tiene ni ciclo ni camino euleriano imprmir `none`.\n\n\n### Subtarea 3: 70 puntos\n\n",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5 8\n0 1\n0 2\n1 2\n2 4\n4 3\n3 1\n1 4\n2 3\n",
            "output": "has eulerian path\n"
          },
          {
            "input": "6 10\n0 1\n0 2\n1 2\n2 4\n4 3\n3 1\n1 4\n2 3\n5 3\n5 4\n",
            "output": "has eulerian cycle\n"
          },
          {
            "input": "5 8\n0 1\n0 2\n0 3\n0 4\n1 2\n2 4\n4 3\n3 1\n",
            "output": "none\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "648120e489cffb00d6474188"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1498",
      "name": "¿El grafo es DAG?",
      "tags": [
        "graphs",
        "DAG"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "El grupo 0 son los casos de ejemplo los cuales no tienen puntaje.",
              "EN": "Group 0 are the sample test cases which have no score."
            }
          },
          "1": {
            "group": 1,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 3$\n- $1 \\leq E \\leq 6$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 20,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 100$\n- $1 \\leq E \\leq 9900$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 70,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 100000$\n- $1 \\leq E \\leq 1000000$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "Juki",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "En la teoría de grafos, un Grafo Dirigido Acicliclo o  DAG por sus siglas en ingles (Directed Acyclic Graph) es un grafo dirigido sin ningun ciclo.\n\n[Fuente](https://en.wikipedia.org/wiki/Directed_acyclic_graph)\n\nDado un grafo dirigido, imprimir `DAG` si se trata de un grafo aciclico dirigido o imprmir `none` caso contrario.\n",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada contiene 2 enteros $V$ y $E$, donde $V$ representa la cantidad vértices del grafo y $E$ la cantidad de aristas del grafo.\n\nLas siguientes $E$ lineas contienen 2 enteros $u$ y $v$, que representa que existe una arista del vértice $u$ al vertice $v$.",
          "EN": ""
        },
        "output": {
          "ES": "Imprimir `DAG` si se trata de un grafo aciclico dirigido o imprmir `none` caso contrario.\n",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "4 5\n1 2\n0 2\n1 3\n2 3\n1 0\n",
            "output": "DAG\n"
          },
          {
            "input": "4 6\n1 2\n0 2\n1 3\n2 3\n1 0\n3 0",
            "output": "none\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64811aab89cffb00d6473da1"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1497",
      "name": "¿El grafo es árbol?",
      "tags": [
        "graphs"
      ],
      "user": {
        "isOwner": true,
        "isManager": true,
        "isSpectator": true,
        "solved": true,
        "tried": true
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/7e6d1385-9a31-4a97-9d25-abdd7fd4f773.png",
        "nickname": "OscarGauss",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "SUBTASK",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {
          "0": {
            "group": 0,
            "points": 0,
            "partial": 0,
            "description": {
              "ES": "",
              "EN": ""
            }
          },
          "1": {
            "group": 1,
            "points": 10,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 3$\n- $0 \\leq E \\leq 6$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          },
          "2": {
            "group": 2,
            "points": 30,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 100$\n- $0 \\leq E \\leq 9900$\n- $0 \\leq u, v < V$\n- Ningun grafo sera de tipo bosque.",
              "EN": ""
            }
          },
          "3": {
            "group": 3,
            "points": 60,
            "partial": 0,
            "description": {
              "ES": "- $1 \\leq V \\leq 100000$\n- $0 \\leq E \\leq 100000$\n- $0 \\leq u, v < V$",
              "EN": ""
            }
          }
        },
        "evaluatorSource": ""
      },
      "author": "Juki",
      "ownerNickname": "OscarGauss",
      "statement": {
        "description": {
          "ES": "En la teoría de grafos, un árbol es un grafo no dirigido en el que dos vértices cualesquiera están conectados exactamente por un camino, o de manera equivalente, un grafo no dirigido acíclico conexo.\n\nUn bosque es un grafo no dirigido en el que dos vértices están conectados como máximo por un camino, o de manera equivalente un grafo no dirigido acíclico.\n\n[Fuente](https://en.wikipedia.org/wiki/Tree_(graph_theory))\n\nDado un grafo no dirigido, imprimir `tree` si se trata de un árbol, imprimir `forest` si se trata de un bosque y si no es ni arbol y bosque imprmir `none`.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada contiene 2 enteros $V$ y $E$, donde $V$ representa la cantidad vértices del grafo y $E$ la cantidad de aristas del grafo.\n\nLas siguientes $E$ lineas contienen 2 enteros $u$ y $v$, que representa que existe una arista del vértice $u$ al vertice $v$.",
          "EN": ""
        },
        "output": {
          "ES": "Imprimir `tree` si se trata de un árbol, imprimir `forest` si se trata de un bosque y si no es ni arbol y bosque imprmir `none`.\n",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5 3\n1 3\n3 4\n0 3",
            "output": "forest\n"
          },
          {
            "input": "7 6\n0 2\n6 0\n4 5\n3 5\n5 6\n1 5",
            "output": "tree\n"
          },
          {
            "input": "5 4\n0 3\n3 2\n1 4\n2 0",
            "output": "none\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6481100689cffb00d64735f1"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1496",
      "name": "Sumpar",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nDanny tiene un array de $N$ enteros, el quiere saber la suma de las posiciones pares de su array, ayuda a Danny a resolver esta dificil tarea."
        },
        "input": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa primera linea de la entrada es un numero entero $N$, ( $$ 1 \\leq N \\leq 1000 $$).\nLa segunda linea de entrada esta compuesta por los N elementos que componen el array de Danny.\n"
        },
        "output": {
          "ES": "",
          "EN": "\\textAlign=justify\nSe debe imprimir la suma de las posiciones pares del array de Danny."
        },
        "sampleCases": [
          {
            "input": "4\n1 2 3 4 ",
            "output": "6"
          },
          {
            "input": "6\n-1 2 10 -4 5 5",
            "output": "3"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6480bfd889cffb00d6470aab"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1495",
      "name": "El premio Grande",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nPedro recientemente se metio a participar en un concurso de television este concurso se trata de un array de $N$ elementos, el concurso consta de $Q$ rondas en cada ronda Pedro debe verificar si existe cierto numero entero $x$ (el numero x cambia en cada ronda). Ayuda a Pedro a poder ganar este concurso de television y llevarse el premio mayor a casa."
        },
        "input": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa primera linea de entrada consta de un numero entero $N$, ( $$ 1 \\leq N \\leq 100 $$ ) que corresponde al numero de elementos en el array y un entero $Q$ ( $$ 1 \\leq Q \\leq 100 $$ ) que corresponde al numero de rondas en el concurso.\n\nLa siguiente linea de entrada consta de $N$ enteros, los numeros del array.\n\nLas siguientes $Q$ lineas de codigo constada cada una de un entero $x$ ( $$ 0 \\leq x \\leq 100 $$ ) que corresponde al numero entero que se quiere verificar en el array para ganar la ronda.\n\n"
        },
        "output": {
          "ES": "",
          "EN": "\\textAlign=justify\nEn la salida se debe imprimir por cada ronda \"YES\", si existe el entero $x$ en el array y \"NO\", si no existe el entero $x$ en el array."
        },
        "sampleCases": [
          {
            "input": "4 4\n1 2 3 4 \n1\n2\n3\n5\n",
            "output": "YES\nYES\nYES\nNO"
          },
          {
            "input": "5 3\n1 1 1 1 1\n100\n2\n1",
            "output": "NO\nNO\nYES"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6480b42c89cffb00d64704e3"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1494",
      "name": "Eliminal O",
      "tags": [
        "strings"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7b1cd30b1c10653050431b.",
        "nickname": "chuby",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "chuby",
      "statement": {
        "description": {
          "ES": "",
          "EN": "\\textAlign=justify\nFernando recientemente aprendio a programar con cadenas. El conoce todo lo basico respecto a las Cadenas, es decir que sabe como pedirlas por entrada, como imprimirlas, como recorrerlas. Recientemente Fernando tuvo un problema con la letra ´o´, el quiere que todas las cadenas que pide por entrada se impriman sin la letra ´o´. El necesita tu ayuda para poder realizar esta dificil tarea."
        },
        "input": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa entrada sera una cadena $S$ que viene a ser la cadena que se pedira por entrada y la cual se debe imprimir sin ninguna letra ´o´. Se garantiza que las cadenas ingresadas estaran en minuscula y sin espacios."
        },
        "output": {
          "ES": "",
          "EN": "\\textAlign=justify\nLa salida debe ser la cadena $S$ pedida por entrada pero sin ninguna letra ´o´."
        },
        "sampleCases": [
          {
            "input": "motoneta",
            "output": "mtneta"
          },
          {
            "input": "paleta",
            "output": "paleta"
          },
          {
            "input": "ooooottooooo",
            "output": "tt"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6480a8bb89cffb00d646ffe8"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1493",
      "name": "Fallo de Motor",
      "tags": [
        "array"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "El ingeniero José se dió cuenta que cuando un motor empieza a fallar siempre ocurre una reducción de velocidad en las mediciones de un motor.\n\nJosé se volvió curioso con esta observación y a falta de un patrón quiere saber, para cada test del motor, cuál es el primer punto en el que se produce la reducción de velocidad, dadas las mediciones de una prueba de velocidad de un motor.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada es una prueba del motor y está dada en dos líneas. La primera línea contiene el número $N$, que es la cantidad de mediciones de velocidad realizadas $(1 < N ≤ 100)$. \n\nLa segunda línea posee $N$ enteros: las RPM del motor (revoluciones por minuto) $R_i$ de cada medición $(0 ≤ R_i ≤ 10000$, para todo $R_i$, tal que $1 ≤ i ≤ N)$. Una medición es considerada una reducción de velocidad si es menor que la medición anterior.",
          "EN": ""
        },
        "output": {
          "ES": "Tu programa deberá imprimir un único número: el índice donde ocurrió la primer reducción de velocidad del motor. Si no ocurrió ninguna reducción de velocidad, imprima 0.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3\n1 4 2",
            "output": "3"
          },
          {
            "input": "5\n100 199 199 198 0",
            "output": "4"
          },
          {
            "input": "4\n1 2 2 2",
            "output": "0"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "64808d8a89cffb00d646f8fe"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1492",
      "name": "Buena Escritura",
      "tags": [
        "strings"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": true,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Eduardo esta aprendiendo a escribir palabras y su profesora le menciona que cada palabra debe empezar con una letra mayúscula y continuar con las demás letras en minúscula. \n\nComo Eduardo aún es un novato escribiendo pide tu ayuda para que dada una palabra le digas si esta bien escrita o no.",
          "EN": ""
        },
        "input": {
          "ES": "La entrada contendrá una sola linea, que tendrá la palabra que Eduardo te dió a revisar.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir **SI** en caso de que la palabra que te dió Eduardo este bien escrita y **NO** en caso contrario.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "Manzana",
            "output": "SI"
          },
          {
            "input": "EUCALIPTO",
            "output": "NO"
          },
          {
            "input": "cuaderno",
            "output": "NO"
          },
          {
            "input": "P4148r4",
            "output": "NO"
          },
          {
            "input": "Telefono",
            "output": "SI"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "6480894789cffb00d646f7c6"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1491",
      "name": "Zombies",
      "tags": [
        "new",
        "for",
        "if"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://images.juki.pub/u/b19ba75e-6829-4a19-9c8b-656d5c308104.png",
        "nickname": "Abraham",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 2500,
        "memoryLimit": 500000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "JAVASCRIPT": {
            "language": "JAVASCRIPT",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "ICPC_C": {
            "language": "ICPC_C",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "ICPC_CPP": {
            "language": "ICPC_CPP",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "ICPC_PYTHON": {
            "language": "ICPC_PYTHON",
            "timeLimit": 2500,
            "memoryLimit": 500000
          },
          "PSEUDOCODE_PSEINT": {
            "language": "PSEUDOCODE_PSEINT",
            "timeLimit": 2500,
            "memoryLimit": 500000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "Abraham",
      "ownerNickname": "Abraham",
      "statement": {
        "description": {
          "ES": "En el año 2041 se creo un virus que es muy peligroso por lo cual muchas personas se infectaron de ese virus. Los soldados están dando armas a los pobladores para destruir a los zombies, pero todos llevan la misma ropa y los soldados no saben si la i-esima persona es zombie o no, de acuerdo a la cantidad de vida que tienen, ayuda a los soldados a saber a cuantos pobladores deben dar la arma.\n>Se garantiza que un poblador es zombie en caso que su cantidad de vida sea menor a 10, o por lo contrario esa persona no es zombie.  \n>También se garantiza que los soldados solo darán las armas a los pobladores que no sean zombies.",
          "EN": ""
        },
        "input": {
          "ES": "La primera línea de entrada contendrá un entero N ($1 \\leq N \\leq 20$): Representara a la cantidad de pobladores contando a los zombies y a los no zombies.\nLa segunda línea de entrada contendrá N números x ($1 \\leq x \\leq 100$): Representara a los N pobladores.",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir a cuantos pobladores se les dará el arma.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "5\n2 32 28 9 6",
            "output": "2"
          },
          {
            "input": "3\n0 0 0",
            "output": "0"
          },
          {
            "input": "15\n34 54 0 32 2 3 4 6 10 30 1 -10 4 7 100",
            "output": "6"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "PUBLIC",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "647e441f89cffb00d6466271"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1490",
      "name": "Transpuesta",
      "tags": [
        "matrices"
      ],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f88b3b3a552db7e9359ba49.",
        "nickname": "lordofmont",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {},
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "lordofmont",
      "ownerNickname": "lordofmont",
      "statement": {
        "description": {
          "ES": "Matias es un niño al cuál le gustan mucho las matrices e investiga acerca de ellas bastante en internet. Un día Matias descubrió una operación interesante en matrices llamada la transpuesta, la transpuesta de una matriz, es la misma matriz pero recorrida de distinta manera.\n\nPor ejemplo la matriz mostrada en la siguiente imagen:\n\n![image alt](https://images.juki.pub/o/6ff95d3d-8c34-4916-82fc-3c72596f7015.png)\n\nTiene como transpuesta a la siguiente matriz:\n\n![image alt](https://images.juki.pub/o/7020c8cb-e932-4203-8fcc-c9a76ec5a748.png)\n\nAyuda a Matias a hacer un programa que dada una matriz le muestre la transpuesta de esa matriz.",
          "EN": ""
        },
        "input": {
          "ES": "La primera linea de entrada tendrá dos números enteros $N$ $(1 \\leq N \\leq 100) $ y $M$ $(1 \\leq M \\leq 100)$ que representan la cantidad de filas y columnas de la matriz respectivamente.\n\nLuego siguen $N$ linas cada una con $M$ números enteros que representan la matriz.\n",
          "EN": ""
        },
        "output": {
          "ES": "Debes imprimir la matriz transpuesta de la matriz ingresada como entrada. Nota que esta matriz tendra $M$ filas y $N$ columnas.",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "3 5\n5 6 1 2 3\n4 2 3 10 1\n8 4 7 2 3",
            "output": "5 4 8\n6 2 4\n1 3 7\n2 10 2\n3 1 3"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "647e0e9c89cffb00d646565f"
    },
    {
      "companyKey": "juki-app",
      "judge": "JUKI_JUDGE",
      "key": "1489",
      "name": "Ordena tu suma",
      "tags": [],
      "user": {
        "isOwner": false,
        "isManager": true,
        "isSpectator": true,
        "solved": false,
        "tried": false
      },
      "owner": {
        "imageUrl": "https://juki-judge.s3.us-east-2.amazonaws.com/public/user/image/5f7bbc53bb30980d46c022f0.",
        "nickname": "mc_rodrix99",
        "companyKey": "juki-app"
      },
      "settings": {
        "timeLimit": 1000,
        "memoryLimit": 256000,
        "withPE": false,
        "type": "STANDARD",
        "mode": "TOTAL",
        "byProgrammingLanguage": {
          "C": {
            "language": "C",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP11": {
            "language": "CPP11",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP14": {
            "language": "CPP14",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "CPP17": {
            "language": "CPP17",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "JAVA": {
            "language": "JAVA",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON": {
            "language": "PYTHON",
            "timeLimit": 1000,
            "memoryLimit": 256000
          },
          "PYTHON3": {
            "language": "PYTHON3",
            "timeLimit": 1000,
            "memoryLimit": 256000
          }
        },
        "pointsByGroups": {},
        "evaluatorSource": ""
      },
      "author": "",
      "ownerNickname": "mc_rodrix99",
      "statement": {
        "description": {
          "ES": "\\textAlign=justify\nA rodrix le gustan mucho los problemas con preguntas sobre arrays.\n\n\\textAlign=justify\nUn dia le presentaron un problema: Te dan un array de $n$ elementos (Los elementos estan indexados desde 1); tambien, hay $q$ consultas, cada consulta esta definida por un par $l_i, r_i$ $(1 \\le l_i \\le r_i\\le n)$.\n\n\\textAlign=justify\nTu necesitas encontrar para cada consulta, la suma de los elementos del array entre los indices $[l_i, r_i]$.\n\n\\textAlign=justify\nRodrix resolvio el problema rapidamente y le parecio algo aburrido. Entonces decide reordenar los elementos del array antes de ejecutar las consultas de tal forma que la suma de las consultas sea la maxima posible.\n\nTu tarea es encontrar ese valor maximo con el formato especificado en la salida. ",
          "EN": ""
        },
        "input": {
          "ES": "\\textAlign=justify\n* La primera linea contiene un simple entero $T$ $(1 \\le T \\le 100000)$, denotando el numero de casos de prueba.\n\n* Cada caso de prueba consiste de multiples lineas.\n\n  * La primera linea de cada caso de prueba consiste de dos enteros separados $N$ $(1 \\le N \\le 100000)$ y $Q$ $(1 \\le Q \\le 200000)$ $-$ la longitud del array y el numero de consultas.\n  * La siguiente linea contiene $N$ enteros $A_i$ $(1 \\le A_i \\le 100000)$ separados por espacios denotando los elementos del array.\n  * Las siguientes $Q$ lineas describen las consultas. La $i$-th de estas $Q$ lineas contiene dos enteros separados por espacios $l_i$ y $r_i$ que describen el rango para la $i$-th consulta.\n\n####  Nota\nLa suma de $N$ sobre todos los casos de prueba no es mayor que $2*10^5$\n\nLa suma de $Q$ sobre todos los casos de prueba no es mayor que $2*10^5$",
          "EN": ""
        },
        "output": {
          "ES": "\\textAlign=justify\nPara cada caso de prueba, la salida es una nueva linea con el valor maximo de $X$. Con el formato $La$ $suma$ $maxima$ $es:$ $X$",
          "EN": ""
        },
        "sampleCases": [
          {
            "input": "2\n5 2\n1 2 3 4 5\n1 4\n2 3\n2 3\n1 1\n1 1\n1 2\n2 2\n",
            "output": "La suma maxima es: 23\nLa suma maxima es: 4\n"
          }
        ],
        "note": {
          "ES": "",
          "EN": ""
        },
        "html": {
          "ES": "",
          "EN": ""
        }
      },
      "editorial": {
        "ES": "",
        "EN": ""
      },
      "members": {
        "access": "RESTRICTED",
        "managers": {},
        "spectators": {}
      },
      "isManager": true,
      "state": "RELEASED",
      "id": "647ca423e7e44c22a0f9d599"
    }
  ],
  "meta": {
    "sort": [
      {
        "createdAt": -1
      }
    ],
    "page": 1,
    "size": 100,
    "totalElements": 543
  }
}
