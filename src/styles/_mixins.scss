@use "sass:color";
@use "sass:string";
/* ********************************          BREAK POINTS          ******************************** */
// sync with variables
$screen-sm-min: 320px; /* Phones      [320,  768  )  0px |  320px ( 7c 32|16) |  0px */
/* +320 */
$screen-md-min: 640px; /* Tablets     [640,  1280 ) 40px |  560px (12c 32|16) | 40px */
/* +640 */
$screen-lg-min: 1280px; /* PCs        [1280, 1920O) 80px | 1120px (12c 64|32) | 80px */
/* +640 */
$screen-hg-min: 1920px; /* Large PCs  [1920, INF  ] 80px | 1760px (15c 80|40) | 80px */

// We can't use css variables in a media query

@mixin sm { // Small devices [0, 640px)
  @media (max-width: calc(#{$screen-md-min} - 1px)) {
    @content;
  }
}

@mixin md { // Medium devices [640px, 1280px)
  @media (min-width: $screen-md-min) and (max-width: calc(#{$screen-lg-min} - 1px)) {
    @content;
  }
}

@mixin lg { // Large devices [1280px, 1920px)
  @media (min-width: $screen-lg-min) and (max-width: calc(#{$screen-hg-min} - 1px)) {
    @content;
  }
}

@mixin hg { // Very large devices [1920px, INF]
  @media (min-width: $screen-hg-min) {
    @content;
  }
}

@mixin lg-hg { // [1280, INF]
  @media (min-width: $screen-lg-min) {
    @content;
  }
}

@mixin md-hg { // [640px, INF]
  @media (min-width: $screen-md-min) {
    @content;
  }
}

@mixin sm-md { // [0, 1280px)
  @media (max-width: calc(#{$screen-lg-min} - 1px)) {
    @content;
  }
}

@mixin sm-lg { // [0, 1920px)
  @media (max-width: calc(#{$screen-hg-min} - 1px)) {
    @content;
  }
}

@mixin transition-handler($time, $prop1: false, $prop2: false, $prop3: false, $prop4: false, $prop5: false) {
  @if $prop1 {
    @if $prop2 {
      @if $prop3 {
        @if $prop4 {
          @if $prop5 {
            & {
              transition: $prop1 $time, $prop2 $time, $prop3 $time, $prop4 $time, $prop5 $time;
            }
          } @else {
            & {
              transition: $prop1 $time, $prop2 $time, $prop3 $time, $prop4 $time;
            }
          }
        } @else {
          & {
            transition: $prop1 $time, $prop2 $time, $prop3 $time;
          }
        }
      } @else {
        & {
          transition: $prop1 $time, $prop2 $time;
        }
      }
    } @else {
      & {
        transition: $prop1 $time;
      }
    }
  }
}


@mixin transition-slow($prop1: false, $prop2: false, $prop3: false, $prop4: false, $prop5: false) {
  $time: 400ms;
  @include transition-handler($time, $prop1, $prop2, $prop3, $prop4, $prop5);
}

@mixin transition($prop1: false, $prop2: false, $prop3: false, $prop4: false, $prop5: false) {
  $time: 250ms;
  @include transition-handler($time, $prop1, $prop2, $prop3, $prop4, $prop5);
}

@mixin transition-fast($prop1: false, $prop2: false, $prop3: false, $prop4: false, $prop5: false) {
  $time: 100ms;
  @include transition-handler($time, $prop1, $prop2, $prop3, $prop4, $prop5);
}

@mixin box-size($size) {
  width: $size;
  min-width: $size;
  height: $size;
  min-height: $size;
}

// https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable
@mixin defineColor($color-name, $value) {
  $red: color.red($value);
  $green: color.green($value);
  $blue: color.blue($value);
  #{$color-name}: string.unquote("rgb(#{$red}, #{$green}, #{$blue})");
  #{$color-name}-rgb: $red, $green, $blue;
  //#{$color-name}-r: $red;
  //#{$color-name}-g: $green;
  //#{$color-name}-b: $blue;
}

@mixin look($look) {
  & {
    background-color: string.unquote("var(--t-color-#{$look});");
  }
  @if $look == primary-dark or $look == primary or $look == primary-light {
    & {
      color: var(--t-color-primary-text);
    }
  } @else if $look == secondary-dark or $look == secondary or $look == secondary-light {
    & {
      color: var(--t-color-secondary-text);
    }
  } @else if $look == accent-light or $look == success-light or $look == info-light or $look == warning-light or $look == error-light or $look== gray-4 or $look == gray-5 or $look == gray-6 {
    & {
      color: var(--t-color-black);
    }
  } @else if $look == white {
    & {
      color: var(--t-color-black-light);
    }
  } @else {
    & {
      color: var(--t-color-white);
    }
  }
}

@mixin font-size($size) {
  & {
    font-size: string.unquote("var(--text-#{$size}-size);");
    line-height: string.unquote("var(--text-#{$size}-height);");
  }
}

@mixin elevation($level) {
  @if $level == 1 {
    & {
      box-shadow: 0 0 2px 0 var(--t-color-highlight-light), 0 1px 3px 1px var(--t-color-highlight-light);
    }
  }
  @if $level == 2 {
    & {
      box-shadow: 0 2px 4px 0 var(--t-color-highlight), 0 1.25px 4px 1px var(--t-color-highlight);
    }
  }
  @if $level == 3 {
    & {
      box-shadow: 0 4px 6px 2px var(--t-color-highlight), 0 1.5px 5px 1px var(--t-color-highlight-dark);
    }
  }
}
