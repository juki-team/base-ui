"use strict";(self.webpackChunk_juki_team_base_ui=self.webpackChunk_juki_team_base_ui||[]).push([[95090],{"./node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BX2VUAB.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function populateCommonDb(ast,db){ast.accDescr&&db.setAccDescription?.(ast.accDescr),ast.accTitle&&db.setAccTitle?.(ast.accTitle),ast.title&&db.setDiagramTitle?.(ast.title)}__webpack_require__.d(__webpack_exports__,{S:()=>populateCommonDb}),(0,__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-AGHRB4JF.mjs").K2)(populateCommonDb,"populateCommonDb")},"./node_modules/mermaid/dist/chunks/mermaid.core/chunk-QZHKN3VN.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>ImperativeState});var _chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-AGHRB4JF.mjs"),ImperativeState=class{constructor(init){this.init=init,this.records=this.init()}static{(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(this,"ImperativeState")}reset(){this.records=this.init()}}},"./node_modules/mermaid/dist/chunks/mermaid.core/gitGraphDiagram-NY62KEGX.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{diagram:()=>diagram});var _chunk_4BX2VUAB_mjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BX2VUAB.mjs"),_chunk_QZHKN3VN_mjs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-QZHKN3VN.mjs"),_chunk_S3R3BYOJ_mjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-S3R3BYOJ.mjs"),_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-ABZYJK2D.mjs"),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-AGHRB4JF.mjs"),_mermaid_js_parser__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs"),d3__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/d3/src/index.js"),commitType={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},DEFAULT_GITGRAPH_CONFIG=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.UI.gitGraph,getConfig3=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(()=>(0,_chunk_S3R3BYOJ_mjs__WEBPACK_IMPORTED_MODULE_2__.$t)({...DEFAULT_GITGRAPH_CONFIG,...(0,_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.zj)().gitGraph}),"getConfig"),state=new _chunk_QZHKN3VN_mjs__WEBPACK_IMPORTED_MODULE_1__.m(()=>{const config=getConfig3(),mainBranchName=config.mainBranchName,mainBranchOrder=config.mainBranchOrder;return{mainBranchName,commits:new Map,head:null,branchConfig:new Map([[mainBranchName,{name:mainBranchName,order:mainBranchOrder}]]),branches:new Map([[mainBranchName,null]]),currBranch:mainBranchName,direction:"LR",seq:0,options:{}}});function getID(){return(0,_chunk_S3R3BYOJ_mjs__WEBPACK_IMPORTED_MODULE_2__.yT)({length:7})}function uniqBy(list,fn){const recordMap=Object.create(null);return list.reduce((out,item)=>{const key=fn(item);return recordMap[key]||(recordMap[key]=!0,out.push(item)),out},[])}(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(getID,"getID"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(uniqBy,"uniqBy");var setDirection=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(dir2){state.records.direction=dir2},"setDirection"),setOptions=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(rawOptString){_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("options str",rawOptString),rawOptString=rawOptString?.trim(),rawOptString=rawOptString||"{}";try{state.records.options=JSON.parse(rawOptString)}catch(e){_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.error("error while parsing gitGraph options",e.message)}},"setOptions"),getOptions=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return state.records.options},"getOptions"),commit=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(commitDB){let msg=commitDB.msg,id=commitDB.id;const type=commitDB.type;let tags=commitDB.tags;_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.info("commit",msg,id,type,tags),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("Entering commit:",msg,id,type,tags);const config=getConfig3();id=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(id,config),msg=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(msg,config),tags=tags?.map(tag=>_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(tag,config));const newCommit={id:id||state.records.seq+"-"+getID(),message:msg,seq:state.records.seq++,type:type??commitType.NORMAL,tags:tags??[],parents:null==state.records.head?[]:[state.records.head.id],branch:state.records.currBranch};state.records.head=newCommit,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.info("main branch",config.mainBranchName),state.records.commits.has(newCommit.id)&&_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.warn(`Commit ID ${newCommit.id} already exists`),state.records.commits.set(newCommit.id,newCommit),state.records.branches.set(state.records.currBranch,newCommit.id),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("in pushCommit "+newCommit.id)},"commit"),branch=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(branchDB){let name=branchDB.name;const order=branchDB.order;if(name=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(name,getConfig3()),state.records.branches.has(name))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${name}")`);state.records.branches.set(name,null!=state.records.head?state.records.head.id:null),state.records.branchConfig.set(name,{name,order}),checkout(name),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("in createBranch")},"branch"),merge=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(mergeDB=>{let otherBranch=mergeDB.branch,customId=mergeDB.id;const overrideType=mergeDB.type,customTags=mergeDB.tags,config=getConfig3();otherBranch=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(otherBranch,config),customId&&(customId=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(customId,config));const currentBranchCheck=state.records.branches.get(state.records.currBranch),otherBranchCheck=state.records.branches.get(otherBranch),currentCommit=currentBranchCheck?state.records.commits.get(currentBranchCheck):void 0,otherCommit=otherBranchCheck?state.records.commits.get(otherBranchCheck):void 0;if(currentCommit&&otherCommit&&currentCommit.branch===otherBranch)throw new Error(`Cannot merge branch '${otherBranch}' into itself.`);if(state.records.currBranch===otherBranch){const error=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw error.hash={text:`merge ${otherBranch}`,token:`merge ${otherBranch}`,expected:["branch abc"]},error}if(void 0===currentCommit||!currentCommit){const error=new Error(`Incorrect usage of "merge". Current branch (${state.records.currBranch})has no commits`);throw error.hash={text:`merge ${otherBranch}`,token:`merge ${otherBranch}`,expected:["commit"]},error}if(!state.records.branches.has(otherBranch)){const error=new Error('Incorrect usage of "merge". Branch to be merged ('+otherBranch+") does not exist");throw error.hash={text:`merge ${otherBranch}`,token:`merge ${otherBranch}`,expected:[`branch ${otherBranch}`]},error}if(void 0===otherCommit||!otherCommit){const error=new Error('Incorrect usage of "merge". Branch to be merged ('+otherBranch+") has no commits");throw error.hash={text:`merge ${otherBranch}`,token:`merge ${otherBranch}`,expected:['"commit"']},error}if(currentCommit===otherCommit){const error=new Error('Incorrect usage of "merge". Both branches have same head');throw error.hash={text:`merge ${otherBranch}`,token:`merge ${otherBranch}`,expected:["branch abc"]},error}if(customId&&state.records.commits.has(customId)){const error=new Error('Incorrect usage of "merge". Commit with id:'+customId+" already exists, use different custom id");throw error.hash={text:`merge ${otherBranch} ${customId} ${overrideType} ${customTags?.join(" ")}`,token:`merge ${otherBranch} ${customId} ${overrideType} ${customTags?.join(" ")}`,expected:[`merge ${otherBranch} ${customId}_UNIQUE ${overrideType} ${customTags?.join(" ")}`]},error}const verifiedBranch=otherBranchCheck||"",commit2={id:customId||`${state.records.seq}-${getID()}`,message:`merged branch ${otherBranch} into ${state.records.currBranch}`,seq:state.records.seq++,parents:null==state.records.head?[]:[state.records.head.id,verifiedBranch],branch:state.records.currBranch,type:commitType.MERGE,customType:overrideType,customId:!!customId,tags:customTags??[]};state.records.head=commit2,state.records.commits.set(commit2.id,commit2),state.records.branches.set(state.records.currBranch,commit2.id),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug(state.records.branches),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("in mergeBranch")},"merge"),cherryPick=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(cherryPickDB){let sourceId=cherryPickDB.id,targetId=cherryPickDB.targetId,tags=cherryPickDB.tags,parentCommitId=cherryPickDB.parent;_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("Entering cherryPick:",sourceId,targetId,tags);const config=getConfig3();if(sourceId=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(sourceId,config),targetId=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(targetId,config),tags=tags?.map(tag=>_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(tag,config)),parentCommitId=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(parentCommitId,config),!sourceId||!state.records.commits.has(sourceId)){const error=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw error.hash={text:`cherryPick ${sourceId} ${targetId}`,token:`cherryPick ${sourceId} ${targetId}`,expected:["cherry-pick abc"]},error}const sourceCommit=state.records.commits.get(sourceId);if(void 0===sourceCommit||!sourceCommit)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(parentCommitId&&(!Array.isArray(sourceCommit.parents)||!sourceCommit.parents.includes(parentCommitId))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const sourceCommitBranch=sourceCommit.branch;if(sourceCommit.type===commitType.MERGE&&!parentCommitId){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!targetId||!state.records.commits.has(targetId)){if(sourceCommitBranch===state.records.currBranch){const error=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw error.hash={text:`cherryPick ${sourceId} ${targetId}`,token:`cherryPick ${sourceId} ${targetId}`,expected:["cherry-pick abc"]},error}const currentCommitId=state.records.branches.get(state.records.currBranch);if(void 0===currentCommitId||!currentCommitId){const error=new Error(`Incorrect usage of "cherry-pick". Current branch (${state.records.currBranch})has no commits`);throw error.hash={text:`cherryPick ${sourceId} ${targetId}`,token:`cherryPick ${sourceId} ${targetId}`,expected:["cherry-pick abc"]},error}const currentCommit=state.records.commits.get(currentCommitId);if(void 0===currentCommit||!currentCommit){const error=new Error(`Incorrect usage of "cherry-pick". Current branch (${state.records.currBranch})has no commits`);throw error.hash={text:`cherryPick ${sourceId} ${targetId}`,token:`cherryPick ${sourceId} ${targetId}`,expected:["cherry-pick abc"]},error}const commit2={id:state.records.seq+"-"+getID(),message:`cherry-picked ${sourceCommit?.message} into ${state.records.currBranch}`,seq:state.records.seq++,parents:null==state.records.head?[]:[state.records.head.id,sourceCommit.id],branch:state.records.currBranch,type:commitType.CHERRY_PICK,tags:tags?tags.filter(Boolean):[`cherry-pick:${sourceCommit.id}${sourceCommit.type===commitType.MERGE?`|parent:${parentCommitId}`:""}`]};state.records.head=commit2,state.records.commits.set(commit2.id,commit2),state.records.branches.set(state.records.currBranch,commit2.id),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug(state.records.branches),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("in cherryPick")}},"cherryPick"),checkout=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(branch2){if(branch2=_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.Y2.sanitizeText(branch2,getConfig3()),!state.records.branches.has(branch2)){const error=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${branch2}")`);throw error.hash={text:`checkout ${branch2}`,token:`checkout ${branch2}`,expected:[`branch ${branch2}`]},error}{state.records.currBranch=branch2;const id=state.records.branches.get(state.records.currBranch);state.records.head=void 0!==id&&id?state.records.commits.get(id)??null:null}},"checkout");function upsert(arr,key,newVal){const index=arr.indexOf(key);-1===index?arr.push(newVal):arr.splice(index,1,newVal)}function prettyPrintCommitHistory(commitArr){const commit2=commitArr.reduce((out,commit3)=>out.seq>commit3.seq?out:commit3,commitArr[0]);let line="";commitArr.forEach(function(c){line+=c===commit2?"\t*":"\t|"});const label=[line,commit2.id,commit2.seq];for(const branch2 in state.records.branches)state.records.branches.get(branch2)===commit2.id&&label.push(branch2);if(_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug(label.join(" ")),commit2.parents&&2==commit2.parents.length&&commit2.parents[0]&&commit2.parents[1]){const newCommit=state.records.commits.get(commit2.parents[0]);upsert(commitArr,commit2,newCommit),commit2.parents[1]&&commitArr.push(state.records.commits.get(commit2.parents[1]))}else{if(0==commit2.parents.length)return;if(commit2.parents[0]){const newCommit=state.records.commits.get(commit2.parents[0]);upsert(commitArr,commit2,newCommit)}}prettyPrintCommitHistory(commitArr=uniqBy(commitArr,c=>c.id))}(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(upsert,"upsert"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(prettyPrintCommitHistory,"prettyPrintCommitHistory");var prettyPrint=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug(state.records.commits);prettyPrintCommitHistory([getCommitsArray()[0]])},"prettyPrint"),clear2=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){state.reset(),(0,_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.IU)()},"clear"),getBranchesAsObjArray=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return[...state.records.branchConfig.values()].map((branchConfig,i)=>null!==branchConfig.order&&void 0!==branchConfig.order?branchConfig:{...branchConfig,order:parseFloat(`0.${i}`)}).sort((a,b)=>(a.order??0)-(b.order??0)).map(({name})=>({name}))},"getBranchesAsObjArray"),getBranches=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return state.records.branches},"getBranches"),getCommits=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return state.records.commits},"getCommits"),getCommitsArray=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){const commitArr=[...state.records.commits.values()];return commitArr.forEach(function(o){_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug(o.id)}),commitArr.sort((a,b)=>a.seq-b.seq),commitArr},"getCommitsArray"),db={commitType,getConfig:getConfig3,setDirection,setOptions,getOptions,commit,branch,merge,cherryPick,checkout,prettyPrint,clear:clear2,getBranchesAsObjArray,getBranches,getCommits,getCommitsArray,getCurrentBranch:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return state.records.currBranch},"getCurrentBranch"),getDirection:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return state.records.direction},"getDirection"),getHead:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(){return state.records.head},"getHead"),setAccTitle:_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.SV,getAccTitle:_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.iN,getAccDescription:_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.m7,setAccDescription:_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.EI,setDiagramTitle:_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.ke,getDiagramTitle:_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.ab},populate=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((ast,db2)=>{(0,_chunk_4BX2VUAB_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(ast,db2),ast.dir&&db2.setDirection(ast.dir);for(const statement of ast.statements)parseStatement(statement,db2)},"populate"),parseStatement=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((statement,db2)=>{const parser2={Commit:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(stmt=>db2.commit(parseCommit(stmt)),"Commit"),Branch:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(stmt=>db2.branch(parseBranch(stmt)),"Branch"),Merge:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(stmt=>db2.merge(parseMerge(stmt)),"Merge"),Checkout:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(stmt=>db2.checkout(parseCheckout(stmt)),"Checkout"),CherryPicking:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(stmt=>db2.cherryPick(parseCherryPicking(stmt)),"CherryPicking")}[statement.$type];parser2?parser2(statement):_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.error(`Unknown statement type: ${statement.$type}`)},"parseStatement"),parseCommit=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(commit2=>({id:commit2.id,msg:commit2.message??"",type:void 0!==commit2.type?commitType[commit2.type]:commitType.NORMAL,tags:commit2.tags??void 0}),"parseCommit"),parseBranch=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(branch2=>({name:branch2.name,order:branch2.order??0}),"parseBranch"),parseMerge=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(merge2=>({branch:merge2.branch,id:merge2.id??"",type:void 0!==merge2.type?commitType[merge2.type]:void 0,tags:merge2.tags??void 0}),"parseMerge"),parseCheckout=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(checkout2=>checkout2.branch,"parseCheckout"),parseCherryPicking=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(cherryPicking=>({id:cherryPicking.id,targetId:"",tags:0===cherryPicking.tags?.length?void 0:cherryPicking.tags,parent:cherryPicking.parent}),"parseCherryPicking"),parser={parse:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(async input=>{const ast=await(0,_mermaid_js_parser__WEBPACK_IMPORTED_MODULE_5__.qg)("gitGraph",input);_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug(ast),populate(ast,db)},"parse")};var DEFAULT_CONFIG=(0,_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.D7)(),DEFAULT_GITGRAPH_CONFIG2=DEFAULT_CONFIG?.gitGraph,branchPos=new Map,commitPos=new Map,allCommitsDict=new Map,lanes=[],maxPos=0,dir="LR",clear3=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(()=>{branchPos.clear(),commitPos.clear(),allCommitsDict.clear(),maxPos=0,lanes=[],dir="LR"},"clear"),drawText=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(txt=>{const svgLabel=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof txt?txt.split(/\\n|\n|<br\s*\/?>/gi):txt).forEach(row=>{const tspan=document.createElementNS("http://www.w3.org/2000/svg","tspan");tspan.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),tspan.setAttribute("dy","1em"),tspan.setAttribute("x","0"),tspan.setAttribute("class","row"),tspan.textContent=row.trim(),svgLabel.appendChild(tspan)}),svgLabel},"drawText"),findClosestParent=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(parents=>{let closestParent,comparisonFunc,targetPosition;return"BT"===dir?(comparisonFunc=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((a,b)=>a<=b,"comparisonFunc"),targetPosition=1/0):(comparisonFunc=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((a,b)=>a>=b,"comparisonFunc"),targetPosition=0),parents.forEach(parent=>{const parentPosition="TB"===dir||"BT"==dir?commitPos.get(parent)?.y:commitPos.get(parent)?.x;void 0!==parentPosition&&comparisonFunc(parentPosition,targetPosition)&&(closestParent=parent,targetPosition=parentPosition)}),closestParent},"findClosestParent"),findClosestParentBT=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(parents=>{let closestParent="",maxPosition=1/0;return parents.forEach(parent=>{const parentPosition=commitPos.get(parent).y;parentPosition<=maxPosition&&(closestParent=parent,maxPosition=parentPosition)}),closestParent||void 0},"findClosestParentBT"),setParallelBTPos=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((sortedKeys,commits,defaultPos2)=>{let curPos=defaultPos2,maxPosition=defaultPos2;const roots=[];sortedKeys.forEach(key=>{const commit2=commits.get(key);if(!commit2)throw new Error(`Commit not found for key ${key}`);commit2.parents.length?(curPos=calculateCommitPosition(commit2),maxPosition=Math.max(curPos,maxPosition)):roots.push(commit2),setCommitPosition(commit2,curPos)}),curPos=maxPosition,roots.forEach(commit2=>{setRootPosition(commit2,curPos,defaultPos2)}),sortedKeys.forEach(key=>{const commit2=commits.get(key);if(commit2?.parents.length){const closestParent=findClosestParentBT(commit2.parents);curPos=commitPos.get(closestParent).y-40,curPos<=maxPosition&&(maxPosition=curPos);const x=branchPos.get(commit2.branch).pos,y=curPos-10;commitPos.set(commit2.id,{x,y})}})},"setParallelBTPos"),findClosestParentPos=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(commit2=>{const closestParent=findClosestParent(commit2.parents.filter(p=>null!==p));if(!closestParent)throw new Error(`Closest parent not found for commit ${commit2.id}`);const closestParentPos=commitPos.get(closestParent)?.y;if(void 0===closestParentPos)throw new Error(`Closest parent position not found for commit ${commit2.id}`);return closestParentPos},"findClosestParentPos"),calculateCommitPosition=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(commit2=>findClosestParentPos(commit2)+40,"calculateCommitPosition"),setCommitPosition=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((commit2,curPos)=>{const branch2=branchPos.get(commit2.branch);if(!branch2)throw new Error(`Branch not found for commit ${commit2.id}`);const x=branch2.pos,y=curPos+10;return commitPos.set(commit2.id,{x,y}),{x,y}},"setCommitPosition"),setRootPosition=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((commit2,curPos,defaultPos2)=>{const branch2=branchPos.get(commit2.branch);if(!branch2)throw new Error(`Branch not found for commit ${commit2.id}`);const y=curPos+defaultPos2,x=branch2.pos;commitPos.set(commit2.id,{x,y})},"setRootPosition"),drawCommitBullet=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((gBullets,commit2,commitPosition,typeClass,branchIndex,commitSymbolType)=>{if(commitSymbolType===commitType.HIGHLIGHT)gBullets.append("rect").attr("x",commitPosition.x-10).attr("y",commitPosition.y-10).attr("width",20).attr("height",20).attr("class",`commit ${commit2.id} commit-highlight${branchIndex%8} ${typeClass}-outer`),gBullets.append("rect").attr("x",commitPosition.x-6).attr("y",commitPosition.y-6).attr("width",12).attr("height",12).attr("class",`commit ${commit2.id} commit${branchIndex%8} ${typeClass}-inner`);else if(commitSymbolType===commitType.CHERRY_PICK)gBullets.append("circle").attr("cx",commitPosition.x).attr("cy",commitPosition.y).attr("r",10).attr("class",`commit ${commit2.id} ${typeClass}`),gBullets.append("circle").attr("cx",commitPosition.x-3).attr("cy",commitPosition.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${commit2.id} ${typeClass}`),gBullets.append("circle").attr("cx",commitPosition.x+3).attr("cy",commitPosition.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${commit2.id} ${typeClass}`),gBullets.append("line").attr("x1",commitPosition.x+3).attr("y1",commitPosition.y+1).attr("x2",commitPosition.x).attr("y2",commitPosition.y-5).attr("stroke","#fff").attr("class",`commit ${commit2.id} ${typeClass}`),gBullets.append("line").attr("x1",commitPosition.x-3).attr("y1",commitPosition.y+1).attr("x2",commitPosition.x).attr("y2",commitPosition.y-5).attr("stroke","#fff").attr("class",`commit ${commit2.id} ${typeClass}`);else{const circle=gBullets.append("circle");if(circle.attr("cx",commitPosition.x),circle.attr("cy",commitPosition.y),circle.attr("r",commit2.type===commitType.MERGE?9:10),circle.attr("class",`commit ${commit2.id} commit${branchIndex%8}`),commitSymbolType===commitType.MERGE){const circle2=gBullets.append("circle");circle2.attr("cx",commitPosition.x),circle2.attr("cy",commitPosition.y),circle2.attr("r",6),circle2.attr("class",`commit ${typeClass} ${commit2.id} commit${branchIndex%8}`)}if(commitSymbolType===commitType.REVERSE){gBullets.append("path").attr("d",`M ${commitPosition.x-5},${commitPosition.y-5}L${commitPosition.x+5},${commitPosition.y+5}M${commitPosition.x-5},${commitPosition.y+5}L${commitPosition.x+5},${commitPosition.y-5}`).attr("class",`commit ${typeClass} ${commit2.id} commit${branchIndex%8}`)}}},"drawCommitBullet"),drawCommitLabel=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((gLabels,commit2,commitPosition,pos)=>{if(commit2.type!==commitType.CHERRY_PICK&&(commit2.customId&&commit2.type===commitType.MERGE||commit2.type!==commitType.MERGE)&&DEFAULT_GITGRAPH_CONFIG2?.showCommitLabel){const wrapper=gLabels.append("g"),labelBkg=wrapper.insert("rect").attr("class","commit-label-bkg"),text=wrapper.append("text").attr("x",pos).attr("y",commitPosition.y+25).attr("class","commit-label").text(commit2.id),bbox=text.node()?.getBBox();if(bbox&&(labelBkg.attr("x",commitPosition.posWithOffset-bbox.width/2-2).attr("y",commitPosition.y+13.5).attr("width",bbox.width+4).attr("height",bbox.height+4),"TB"===dir||"BT"===dir?(labelBkg.attr("x",commitPosition.x-(bbox.width+16+5)).attr("y",commitPosition.y-12),text.attr("x",commitPosition.x-(bbox.width+16)).attr("y",commitPosition.y+bbox.height-12)):text.attr("x",commitPosition.posWithOffset-bbox.width/2),DEFAULT_GITGRAPH_CONFIG2.rotateCommitLabel))if("TB"===dir||"BT"===dir)text.attr("transform","rotate(-45, "+commitPosition.x+", "+commitPosition.y+")"),labelBkg.attr("transform","rotate(-45, "+commitPosition.x+", "+commitPosition.y+")");else{const r_x=-7.5-(bbox.width+10)/25*9.5,r_y=10+bbox.width/25*8.5;wrapper.attr("transform","translate("+r_x+", "+r_y+") rotate(-45, "+pos+", "+commitPosition.y+")")}}},"drawCommitLabel"),drawCommitTags=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((gLabels,commit2,commitPosition,pos)=>{if(commit2.tags.length>0){let yOffset=0,maxTagBboxWidth=0,maxTagBboxHeight=0;const tagElements=[];for(const tagValue of commit2.tags.reverse()){const rect=gLabels.insert("polygon"),hole=gLabels.append("circle"),tag=gLabels.append("text").attr("y",commitPosition.y-16-yOffset).attr("class","tag-label").text(tagValue),tagBbox=tag.node()?.getBBox();if(!tagBbox)throw new Error("Tag bbox not found");maxTagBboxWidth=Math.max(maxTagBboxWidth,tagBbox.width),maxTagBboxHeight=Math.max(maxTagBboxHeight,tagBbox.height),tag.attr("x",commitPosition.posWithOffset-tagBbox.width/2),tagElements.push({tag,hole,rect,yOffset}),yOffset+=20}for(const{tag,hole,rect,yOffset:yOffset2}of tagElements){const h2=maxTagBboxHeight/2,ly=commitPosition.y-19.2-yOffset2;if(rect.attr("class","tag-label-bkg").attr("points",`\n      ${pos-maxTagBboxWidth/2-2},${ly+2}  \n      ${pos-maxTagBboxWidth/2-2},${ly-2}\n      ${commitPosition.posWithOffset-maxTagBboxWidth/2-4},${ly-h2-2}\n      ${commitPosition.posWithOffset+maxTagBboxWidth/2+4},${ly-h2-2}\n      ${commitPosition.posWithOffset+maxTagBboxWidth/2+4},${ly+h2+2}\n      ${commitPosition.posWithOffset-maxTagBboxWidth/2-4},${ly+h2+2}`),hole.attr("cy",ly).attr("cx",pos-maxTagBboxWidth/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===dir||"BT"===dir){const yOrigin=pos+yOffset2;rect.attr("class","tag-label-bkg").attr("points",`\n        ${commitPosition.x},${yOrigin+2}\n        ${commitPosition.x},${yOrigin-2}\n        ${commitPosition.x+10},${yOrigin-h2-2}\n        ${commitPosition.x+10+maxTagBboxWidth+4},${yOrigin-h2-2}\n        ${commitPosition.x+10+maxTagBboxWidth+4},${yOrigin+h2+2}\n        ${commitPosition.x+10},${yOrigin+h2+2}`).attr("transform","translate(12,12) rotate(45, "+commitPosition.x+","+pos+")"),hole.attr("cx",commitPosition.x+2).attr("cy",yOrigin).attr("transform","translate(12,12) rotate(45, "+commitPosition.x+","+pos+")"),tag.attr("x",commitPosition.x+5).attr("y",yOrigin+3).attr("transform","translate(14,14) rotate(45, "+commitPosition.x+","+pos+")")}}}},"drawCommitTags"),getCommitClassType=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(commit2=>{switch(commit2.customType??commit2.type){case commitType.NORMAL:return"commit-normal";case commitType.REVERSE:return"commit-reverse";case commitType.HIGHLIGHT:return"commit-highlight";case commitType.MERGE:return"commit-merge";case commitType.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),calculatePosition=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((commit2,dir2,pos,commitPos2)=>{const defaultCommitPosition={x:0,y:0};if(!(commit2.parents.length>0)){if("TB"===dir2)return 30;if("BT"===dir2){return(commitPos2.get(commit2.id)??defaultCommitPosition).y-40}return 0}{const closestParent=findClosestParent(commit2.parents);if(closestParent){const parentPosition=commitPos2.get(closestParent)??defaultCommitPosition;if("TB"===dir2)return parentPosition.y+40;if("BT"===dir2){return(commitPos2.get(commit2.id)??defaultCommitPosition).y-40}return parentPosition.x+40}}return 0},"calculatePosition"),getCommitPosition=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((commit2,pos,isParallelCommits)=>{const posWithOffset="BT"===dir&&isParallelCommits?pos:pos+10,y="TB"===dir||"BT"===dir?posWithOffset:branchPos.get(commit2.branch)?.pos,x="TB"===dir||"BT"===dir?branchPos.get(commit2.branch)?.pos:posWithOffset;if(void 0===x||void 0===y)throw new Error(`Position were undefined for commit ${commit2.id}`);return{x,y,posWithOffset}},"getCommitPosition"),drawCommits=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((svg,commits,modifyGraph)=>{if(!DEFAULT_GITGRAPH_CONFIG2)throw new Error("GitGraph config not found");const gBullets=svg.append("g").attr("class","commit-bullets"),gLabels=svg.append("g").attr("class","commit-labels");let pos="TB"===dir||"BT"===dir?30:0;const keys=[...commits.keys()],isParallelCommits=DEFAULT_GITGRAPH_CONFIG2?.parallelCommits??!1,sortKeys=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((a,b)=>{const seqA=commits.get(a)?.seq,seqB=commits.get(b)?.seq;return void 0!==seqA&&void 0!==seqB?seqA-seqB:0},"sortKeys");let sortedKeys=keys.sort(sortKeys);"BT"===dir&&(isParallelCommits&&setParallelBTPos(sortedKeys,commits,pos),sortedKeys=sortedKeys.reverse()),sortedKeys.forEach(key=>{const commit2=commits.get(key);if(!commit2)throw new Error(`Commit not found for key ${key}`);isParallelCommits&&(pos=calculatePosition(commit2,dir,pos,commitPos));const commitPosition=getCommitPosition(commit2,pos,isParallelCommits);if(modifyGraph){const typeClass=getCommitClassType(commit2),commitSymbolType=commit2.customType??commit2.type,branchIndex=branchPos.get(commit2.branch)?.index??0;drawCommitBullet(gBullets,commit2,commitPosition,typeClass,branchIndex,commitSymbolType),drawCommitLabel(gLabels,commit2,commitPosition,pos),drawCommitTags(gLabels,commit2,commitPosition,pos)}"TB"===dir||"BT"===dir?commitPos.set(commit2.id,{x:commitPosition.x,y:commitPosition.posWithOffset}):commitPos.set(commit2.id,{x:commitPosition.posWithOffset,y:commitPosition.y}),pos="BT"===dir&&isParallelCommits?pos+40:pos+40+10,pos>maxPos&&(maxPos=pos)})},"drawCommits"),shouldRerouteArrow=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((commitA,commitB,p1,p2,allCommits)=>{const branchToGetCurve=("TB"===dir||"BT"===dir?p1.x<p2.x:p1.y<p2.y)?commitB.branch:commitA.branch,isOnBranchToGetCurve=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(x=>x.branch===branchToGetCurve,"isOnBranchToGetCurve"),isBetweenCommits=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(x=>x.seq>commitA.seq&&x.seq<commitB.seq,"isBetweenCommits");return[...allCommits.values()].some(commitX=>isBetweenCommits(commitX)&&isOnBranchToGetCurve(commitX))},"shouldRerouteArrow"),findLane=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((y1,y2,depth=0)=>{const candidate=y1+Math.abs(y1-y2)/2;if(depth>5)return candidate;if(lanes.every(lane=>Math.abs(lane-candidate)>=10))return lanes.push(candidate),candidate;const diff=Math.abs(y1-y2);return findLane(y1,y2-diff/5,depth+1)},"findLane"),drawArrow=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((svg,commitA,commitB,allCommits)=>{const p1=commitPos.get(commitA.id),p2=commitPos.get(commitB.id);if(void 0===p1||void 0===p2)throw new Error(`Commit positions not found for commits ${commitA.id} and ${commitB.id}`);const arrowNeedsRerouting=shouldRerouteArrow(commitA,commitB,p1,p2,allCommits);let lineDef,arc="",arc2="",radius=0,offset=0,colorClassNum=branchPos.get(commitB.branch)?.index;if(commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]&&(colorClassNum=branchPos.get(commitA.branch)?.index),arrowNeedsRerouting){arc="A 10 10, 0, 0, 0,",arc2="A 10 10, 0, 0, 1,",radius=10,offset=10;const lineY=p1.y<p2.y?findLane(p1.y,p2.y):findLane(p2.y,p1.y),lineX=p1.x<p2.x?findLane(p1.x,p2.x):findLane(p2.x,p1.x);"TB"===dir?p1.x<p2.x?lineDef=`M ${p1.x} ${p1.y} L ${lineX-radius} ${p1.y} ${arc2} ${lineX} ${p1.y+offset} L ${lineX} ${p2.y-radius} ${arc} ${lineX+offset} ${p2.y} L ${p2.x} ${p2.y}`:(colorClassNum=branchPos.get(commitA.branch)?.index,lineDef=`M ${p1.x} ${p1.y} L ${lineX+radius} ${p1.y} ${arc} ${lineX} ${p1.y+offset} L ${lineX} ${p2.y-radius} ${arc2} ${lineX-offset} ${p2.y} L ${p2.x} ${p2.y}`):"BT"===dir?p1.x<p2.x?lineDef=`M ${p1.x} ${p1.y} L ${lineX-radius} ${p1.y} ${arc} ${lineX} ${p1.y-offset} L ${lineX} ${p2.y+radius} ${arc2} ${lineX+offset} ${p2.y} L ${p2.x} ${p2.y}`:(colorClassNum=branchPos.get(commitA.branch)?.index,lineDef=`M ${p1.x} ${p1.y} L ${lineX+radius} ${p1.y} ${arc2} ${lineX} ${p1.y-offset} L ${lineX} ${p2.y+radius} ${arc} ${lineX-offset} ${p2.y} L ${p2.x} ${p2.y}`):p1.y<p2.y?lineDef=`M ${p1.x} ${p1.y} L ${p1.x} ${lineY-radius} ${arc} ${p1.x+offset} ${lineY} L ${p2.x-radius} ${lineY} ${arc2} ${p2.x} ${lineY+offset} L ${p2.x} ${p2.y}`:(colorClassNum=branchPos.get(commitA.branch)?.index,lineDef=`M ${p1.x} ${p1.y} L ${p1.x} ${lineY+radius} ${arc2} ${p1.x+offset} ${lineY} L ${p2.x-radius} ${lineY} ${arc} ${p2.x} ${lineY-offset} L ${p2.x} ${p2.y}`)}else arc="A 20 20, 0, 0, 0,",arc2="A 20 20, 0, 0, 1,",radius=20,offset=20,"TB"===dir?(p1.x<p2.x&&(lineDef=commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]?`M ${p1.x} ${p1.y} L ${p1.x} ${p2.y-radius} ${arc} ${p1.x+offset} ${p2.y} L ${p2.x} ${p2.y}`:`M ${p1.x} ${p1.y} L ${p2.x-radius} ${p1.y} ${arc2} ${p2.x} ${p1.y+offset} L ${p2.x} ${p2.y}`),p1.x>p2.x&&(arc="A 20 20, 0, 0, 0,",arc2="A 20 20, 0, 0, 1,",radius=20,offset=20,lineDef=commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]?`M ${p1.x} ${p1.y} L ${p1.x} ${p2.y-radius} ${arc2} ${p1.x-offset} ${p2.y} L ${p2.x} ${p2.y}`:`M ${p1.x} ${p1.y} L ${p2.x+radius} ${p1.y} ${arc} ${p2.x} ${p1.y+offset} L ${p2.x} ${p2.y}`),p1.x===p2.x&&(lineDef=`M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`)):"BT"===dir?(p1.x<p2.x&&(lineDef=commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]?`M ${p1.x} ${p1.y} L ${p1.x} ${p2.y+radius} ${arc2} ${p1.x+offset} ${p2.y} L ${p2.x} ${p2.y}`:`M ${p1.x} ${p1.y} L ${p2.x-radius} ${p1.y} ${arc} ${p2.x} ${p1.y-offset} L ${p2.x} ${p2.y}`),p1.x>p2.x&&(arc="A 20 20, 0, 0, 0,",arc2="A 20 20, 0, 0, 1,",radius=20,offset=20,lineDef=commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]?`M ${p1.x} ${p1.y} L ${p1.x} ${p2.y+radius} ${arc} ${p1.x-offset} ${p2.y} L ${p2.x} ${p2.y}`:`M ${p1.x} ${p1.y} L ${p2.x-radius} ${p1.y} ${arc} ${p2.x} ${p1.y-offset} L ${p2.x} ${p2.y}`),p1.x===p2.x&&(lineDef=`M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`)):(p1.y<p2.y&&(lineDef=commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]?`M ${p1.x} ${p1.y} L ${p2.x-radius} ${p1.y} ${arc2} ${p2.x} ${p1.y+offset} L ${p2.x} ${p2.y}`:`M ${p1.x} ${p1.y} L ${p1.x} ${p2.y-radius} ${arc} ${p1.x+offset} ${p2.y} L ${p2.x} ${p2.y}`),p1.y>p2.y&&(lineDef=commitB.type===commitType.MERGE&&commitA.id!==commitB.parents[0]?`M ${p1.x} ${p1.y} L ${p2.x-radius} ${p1.y} ${arc} ${p2.x} ${p1.y-offset} L ${p2.x} ${p2.y}`:`M ${p1.x} ${p1.y} L ${p1.x} ${p2.y+radius} ${arc2} ${p1.x+offset} ${p2.y} L ${p2.x} ${p2.y}`),p1.y===p2.y&&(lineDef=`M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`));if(void 0===lineDef)throw new Error("Line definition not found");svg.append("path").attr("d",lineDef).attr("class","arrow arrow"+colorClassNum%8)},"drawArrow"),drawArrows=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((svg,commits)=>{const gArrows=svg.append("g").attr("class","commit-arrows");[...commits.keys()].forEach(key=>{const commit2=commits.get(key);commit2.parents&&commit2.parents.length>0&&commit2.parents.forEach(parent=>{drawArrow(gArrows,commits.get(parent),commit2,commits)})})},"drawArrows"),drawBranches=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)((svg,branches)=>{const g=svg.append("g");branches.forEach((branch2,index)=>{const adjustIndexForTheme=index%8,pos=branchPos.get(branch2.name)?.pos;if(void 0===pos)throw new Error(`Position not found for branch ${branch2.name}`);const line=g.append("line");line.attr("x1",0),line.attr("y1",pos),line.attr("x2",maxPos),line.attr("y2",pos),line.attr("class","branch branch"+adjustIndexForTheme),"TB"===dir?(line.attr("y1",30),line.attr("x1",pos),line.attr("y2",maxPos),line.attr("x2",pos)):"BT"===dir&&(line.attr("y1",maxPos),line.attr("x1",pos),line.attr("y2",30),line.attr("x2",pos)),lanes.push(pos);const name=branch2.name,labelElement=drawText(name),bkg=g.insert("rect"),label=g.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+adjustIndexForTheme);label.node().appendChild(labelElement);const bbox=labelElement.getBBox();bkg.attr("class","branchLabelBkg label"+adjustIndexForTheme).attr("rx",4).attr("ry",4).attr("x",-bbox.width-4-(!0===DEFAULT_GITGRAPH_CONFIG2?.rotateCommitLabel?30:0)).attr("y",-bbox.height/2+8).attr("width",bbox.width+18).attr("height",bbox.height+4),label.attr("transform","translate("+(-bbox.width-14-(!0===DEFAULT_GITGRAPH_CONFIG2?.rotateCommitLabel?30:0))+", "+(pos-bbox.height/2-1)+")"),"TB"===dir?(bkg.attr("x",pos-bbox.width/2-10).attr("y",0),label.attr("transform","translate("+(pos-bbox.width/2-5)+", 0)")):"BT"===dir?(bkg.attr("x",pos-bbox.width/2-10).attr("y",maxPos),label.attr("transform","translate("+(pos-bbox.width/2-5)+", "+maxPos+")")):bkg.attr("transform","translate(-19, "+(pos-bbox.height/2)+")")})},"drawBranches"),setBranchPosition=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(name,pos,index,bbox,rotateCommitLabel){return branchPos.set(name,{pos,index}),pos+=50+(rotateCommitLabel?40:0)+("TB"===dir||"BT"===dir?bbox.width/2:0)},"setBranchPosition");var diagram={parser,db,renderer:{draw:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(function(txt,id,ver,diagObj){if(clear3(),_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.Rm.debug("in gitgraph renderer",txt+"\n","id:",id,ver),!DEFAULT_GITGRAPH_CONFIG2)throw new Error("GitGraph config not found");const rotateCommitLabel=DEFAULT_GITGRAPH_CONFIG2.rotateCommitLabel??!1,db2=diagObj.db;allCommitsDict=db2.getCommits();const branches=db2.getBranchesAsObjArray();dir=db2.getDirection();const diagram2=(0,d3__WEBPACK_IMPORTED_MODULE_6__.Ltv)(`[id="${id}"]`);let pos=0;branches.forEach((branch2,index)=>{const labelElement=drawText(branch2.name),g=diagram2.append("g"),branchLabel=g.insert("g").attr("class","branchLabel"),label=branchLabel.insert("g").attr("class","label branch-label");label.node()?.appendChild(labelElement);const bbox=labelElement.getBBox();pos=setBranchPosition(branch2.name,pos,index,bbox,rotateCommitLabel),label.remove(),branchLabel.remove(),g.remove()}),drawCommits(diagram2,allCommitsDict,!1),DEFAULT_GITGRAPH_CONFIG2.showBranches&&drawBranches(diagram2,branches),drawArrows(diagram2,allCommitsDict),drawCommits(diagram2,allCommitsDict,!0),_chunk_S3R3BYOJ_mjs__WEBPACK_IMPORTED_MODULE_2__._K.insertTitle(diagram2,"gitTitleText",DEFAULT_GITGRAPH_CONFIG2.titleTopMargin??0,db2.getDiagramTitle()),(0,_chunk_ABZYJK2D_mjs__WEBPACK_IMPORTED_MODULE_3__.mj)(void 0,diagram2,DEFAULT_GITGRAPH_CONFIG2.diagramPadding,DEFAULT_GITGRAPH_CONFIG2.useMaxWidth)},"draw")},styles:(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_4__.K2)(options=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map(i=>`\n        .branch-label${i} { fill: ${options["gitBranchLabel"+i]}; }\n        .commit${i} { stroke: ${options["git"+i]}; fill: ${options["git"+i]}; }\n        .commit-highlight${i} { stroke: ${options["gitInv"+i]}; fill: ${options["gitInv"+i]}; }\n        .label${i}  { fill: ${options["git"+i]}; }\n        .arrow${i} { stroke: ${options["git"+i]}; }\n        `).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${options.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${options.commitLabelFontSize}; fill: ${options.commitLabelColor};}\n  .commit-label-bkg { font-size: ${options.commitLabelFontSize}; fill: ${options.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${options.tagLabelFontSize}; fill: ${options.tagLabelColor};}\n  .tag-label-bkg { fill: ${options.tagLabelBackground}; stroke: ${options.tagLabelBorder}; }\n  .tag-hole { fill: ${options.textColor}; }\n\n  .commit-merge {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`,"getStyles")}}}]);