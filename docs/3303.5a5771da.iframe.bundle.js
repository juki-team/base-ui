"use strict";(self.webpackChunk_juki_team_base_ui=self.webpackChunk_juki_team_base_ui||[]).push([[3303],{"./node_modules/@codemirror/legacy-modes/mode/protobuf.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{protobuf:()=>protobuf});var keywordArray=["package","message","import","syntax","required","optional","repeated","reserved","default","extensions","packed","bool","bytes","double","enum","float","string","int32","int64","uint32","uint64","sint32","sint64","fixed32","fixed64","sfixed32","sfixed64","option","service","rpc","returns"],keywords=function wordRegexp(words){return new RegExp("^(("+words.join(")|(")+"))\\b","i")}(keywordArray),identifiers=new RegExp("^[_A-Za-z¡-￿][_A-Za-z0-9¡-￿]*");const protobuf={name:"protobuf",token:function tokenBase(stream){if(stream.eatSpace())return null;if(stream.match("//"))return stream.skipToEnd(),"comment";if(stream.match(/^[0-9\.+-]/,!1)){if(stream.match(/^[+-]?0x[0-9a-fA-F]+/))return"number";if(stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))return"number";if(stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))return"number"}return stream.match(/^"([^"]|(""))*"/)||stream.match(/^'([^']|(''))*'/)?"string":stream.match(keywords)?"keyword":stream.match(identifiers)?"variable":(stream.next(),null)},languageData:{autocomplete:keywordArray}}}}]);