"use strict";(self.webpackChunk_juki_team_base_ui=self.webpackChunk_juki_team_base_ui||[]).push([[88705],{"./node_modules/lodash-es/clone.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _baseClone_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/lodash-es/_baseClone.js");const __WEBPACK_DEFAULT_EXPORT__=function clone(value){return(0,_baseClone_js__WEBPACK_IMPORTED_MODULE_0__.A)(value,4)}},"./node_modules/mermaid/dist/chunks/mermaid.core/dagre-6UL2VRFP.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{render:()=>render});var chunk_QXUST7PY=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-QXUST7PY.mjs"),chunk_JZLCHNYA=(__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HN2XXSSU.mjs"),__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-JZLCHNYA.mjs")),chunk_CVBHYZKI=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-CVBHYZKI.mjs"),chunk_ABZYJK2D=(__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-ATLVNIR6.mjs"),__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-JA3XYJ7Z.mjs"),__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-S3R3BYOJ.mjs"),__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-ABZYJK2D.mjs")),chunk_AGHRB4JF=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-AGHRB4JF.mjs"),dagre=__webpack_require__("./node_modules/dagre-d3-es/src/dagre/index.js"),isUndefined=__webpack_require__("./node_modules/lodash-es/isUndefined.js"),clone=__webpack_require__("./node_modules/lodash-es/clone.js"),map=__webpack_require__("./node_modules/lodash-es/map.js");__webpack_require__("./node_modules/dagre-d3-es/src/graphlib/graph.js");function write(g){var json={options:{directed:g.isDirected(),multigraph:g.isMultigraph(),compound:g.isCompound()},nodes:writeNodes(g),edges:writeEdges(g)};return isUndefined.A(g.graph())||(json.value=clone.A(g.graph())),json}function writeNodes(g){return map.A(g.nodes(),function(v){var nodeValue=g.node(v),parent=g.parent(v),node={v};return isUndefined.A(nodeValue)||(node.value=nodeValue),isUndefined.A(parent)||(node.parent=parent),node})}function writeEdges(g){return map.A(g.edges(),function(e){var edgeValue=g.edge(e),edge={v:e.v,w:e.w};return isUndefined.A(e.name)||(edge.name=e.name),isUndefined.A(edgeValue)||(edge.value=edgeValue),edge})}var graphlib=__webpack_require__("./node_modules/dagre-d3-es/src/graphlib/index.js"),clusterDb=new Map,descendants=new Map,parents=new Map,clear4=(0,chunk_AGHRB4JF.K2)(()=>{descendants.clear(),parents.clear(),clusterDb.clear()},"clear"),isDescendant=(0,chunk_AGHRB4JF.K2)((id,ancestorId)=>{const ancestorDescendants=descendants.get(ancestorId)||[];return chunk_AGHRB4JF.Rm.trace("In isDescendant",ancestorId," ",id," = ",ancestorDescendants.includes(id)),ancestorDescendants.includes(id)},"isDescendant"),edgeInCluster=(0,chunk_AGHRB4JF.K2)((edge,clusterId)=>{const clusterDescendants=descendants.get(clusterId)||[];return chunk_AGHRB4JF.Rm.info("Descendants of ",clusterId," is ",clusterDescendants),chunk_AGHRB4JF.Rm.info("Edge is ",edge),edge.v!==clusterId&&edge.w!==clusterId&&(clusterDescendants?clusterDescendants.includes(edge.v)||isDescendant(edge.v,clusterId)||isDescendant(edge.w,clusterId)||clusterDescendants.includes(edge.w):(chunk_AGHRB4JF.Rm.debug("Tilt, ",clusterId,",not in descendants"),!1))},"edgeInCluster"),copy=(0,chunk_AGHRB4JF.K2)((clusterId,graph,newGraph,rootId)=>{chunk_AGHRB4JF.Rm.warn("Copying children of ",clusterId,"root",rootId,"data",graph.node(clusterId),rootId);const nodes=graph.children(clusterId)||[];clusterId!==rootId&&nodes.push(clusterId),chunk_AGHRB4JF.Rm.warn("Copying (nodes) clusterId",clusterId,"nodes",nodes),nodes.forEach(node=>{if(graph.children(node).length>0)copy(node,graph,newGraph,rootId);else{const data=graph.node(node);chunk_AGHRB4JF.Rm.info("cp ",node," to ",rootId," with parent ",clusterId),newGraph.setNode(node,data),rootId!==graph.parent(node)&&(chunk_AGHRB4JF.Rm.warn("Setting parent",node,graph.parent(node)),newGraph.setParent(node,graph.parent(node))),clusterId!==rootId&&node!==clusterId?(chunk_AGHRB4JF.Rm.debug("Setting parent",node,clusterId),newGraph.setParent(node,clusterId)):(chunk_AGHRB4JF.Rm.info("In copy ",clusterId,"root",rootId,"data",graph.node(clusterId),rootId),chunk_AGHRB4JF.Rm.debug("Not Setting parent for node=",node,"cluster!==rootId",clusterId!==rootId,"node!==clusterId",node!==clusterId));const edges=graph.edges(node);chunk_AGHRB4JF.Rm.debug("Copying Edges",edges),edges.forEach(edge=>{chunk_AGHRB4JF.Rm.info("Edge",edge);const data2=graph.edge(edge.v,edge.w,edge.name);chunk_AGHRB4JF.Rm.info("Edge data",data2,rootId);try{edgeInCluster(edge,rootId)?(chunk_AGHRB4JF.Rm.info("Copying as ",edge.v,edge.w,data2,edge.name),newGraph.setEdge(edge.v,edge.w,data2,edge.name),chunk_AGHRB4JF.Rm.info("newGraph edges ",newGraph.edges(),newGraph.edge(newGraph.edges()[0]))):chunk_AGHRB4JF.Rm.info("Skipping copy of edge ",edge.v,"--\x3e",edge.w," rootId: ",rootId," clusterId:",clusterId)}catch(e){chunk_AGHRB4JF.Rm.error(e)}})}chunk_AGHRB4JF.Rm.debug("Removing node",node),graph.removeNode(node)})},"copy"),extractDescendants=(0,chunk_AGHRB4JF.K2)((id,graph)=>{const children=graph.children(id);let res=[...children];for(const child of children)parents.set(child,id),res=[...res,...extractDescendants(child,graph)];return res},"extractDescendants"),findCommonEdges=(0,chunk_AGHRB4JF.K2)((graph,id1,id2)=>{const edges1=graph.edges().filter(edge=>edge.v===id1||edge.w===id1),edges2=graph.edges().filter(edge=>edge.v===id2||edge.w===id2),edges1Prim=edges1.map(edge=>({v:edge.v===id1?id2:edge.v,w:edge.w===id1?id1:edge.w})),edges2Prim=edges2.map(edge=>({v:edge.v,w:edge.w}));return edges1Prim.filter(edgeIn1=>edges2Prim.some(edge=>edgeIn1.v===edge.v&&edgeIn1.w===edge.w))},"findCommonEdges"),findNonClusterChild=(0,chunk_AGHRB4JF.K2)((id,graph,clusterId)=>{const children=graph.children(id);if(chunk_AGHRB4JF.Rm.trace("Searching children of id ",id,children),children.length<1)return id;let reserve;for(const child of children){const _id=findNonClusterChild(child,graph,clusterId),commonEdges=findCommonEdges(graph,clusterId,_id);if(_id){if(!(commonEdges.length>0))return _id;reserve=_id}}return reserve},"findNonClusterChild"),getAnchorId=(0,chunk_AGHRB4JF.K2)(id=>clusterDb.has(id)&&clusterDb.get(id).externalConnections&&clusterDb.has(id)?clusterDb.get(id).id:id,"getAnchorId"),adjustClustersAndEdges=(0,chunk_AGHRB4JF.K2)((graph,depth)=>{if(!graph||depth>10)chunk_AGHRB4JF.Rm.debug("Opting out, no graph ");else{chunk_AGHRB4JF.Rm.debug("Opting in, graph "),graph.nodes().forEach(function(id){graph.children(id).length>0&&(chunk_AGHRB4JF.Rm.warn("Cluster identified",id," Replacement id in edges: ",findNonClusterChild(id,graph,id)),descendants.set(id,extractDescendants(id,graph)),clusterDb.set(id,{id:findNonClusterChild(id,graph,id),clusterData:graph.node(id)}))}),graph.nodes().forEach(function(id){const children=graph.children(id),edges=graph.edges();children.length>0?(chunk_AGHRB4JF.Rm.debug("Cluster identified",id,descendants),edges.forEach(edge=>{isDescendant(edge.v,id)^isDescendant(edge.w,id)&&(chunk_AGHRB4JF.Rm.warn("Edge: ",edge," leaves cluster ",id),chunk_AGHRB4JF.Rm.warn("Descendants of XXX ",id,": ",descendants.get(id)),clusterDb.get(id).externalConnections=!0)})):chunk_AGHRB4JF.Rm.debug("Not a cluster ",id,descendants)});for(let id of clusterDb.keys()){const nonClusterChild=clusterDb.get(id).id,parent=graph.parent(nonClusterChild);parent!==id&&clusterDb.has(parent)&&!clusterDb.get(parent).externalConnections&&(clusterDb.get(id).id=parent)}graph.edges().forEach(function(e){const edge=graph.edge(e);chunk_AGHRB4JF.Rm.warn("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),chunk_AGHRB4JF.Rm.warn("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(graph.edge(e)));let v=e.v,w=e.w;if(chunk_AGHRB4JF.Rm.warn("Fix XXX",clusterDb,"ids:",e.v,e.w,"Translating: ",clusterDb.get(e.v)," --- ",clusterDb.get(e.w)),clusterDb.get(e.v)||clusterDb.get(e.w)){if(chunk_AGHRB4JF.Rm.warn("Fixing and trying - removing XXX",e.v,e.w,e.name),v=getAnchorId(e.v),w=getAnchorId(e.w),graph.removeEdge(e.v,e.w,e.name),v!==e.v){const parent=graph.parent(v);clusterDb.get(parent).externalConnections=!0,edge.fromCluster=e.v}if(w!==e.w){const parent=graph.parent(w);clusterDb.get(parent).externalConnections=!0,edge.toCluster=e.w}chunk_AGHRB4JF.Rm.warn("Fix Replacing with XXX",v,w,e.name),graph.setEdge(v,w,edge,e.name)}}),chunk_AGHRB4JF.Rm.warn("Adjusted Graph",write(graph)),extractor(graph,0),chunk_AGHRB4JF.Rm.trace(clusterDb)}},"adjustClustersAndEdges"),extractor=(0,chunk_AGHRB4JF.K2)((graph,depth)=>{if(chunk_AGHRB4JF.Rm.warn("extractor - ",depth,write(graph),graph.children("D")),depth>10)return void chunk_AGHRB4JF.Rm.error("Bailing out");let nodes=graph.nodes(),hasChildren=!1;for(const node of nodes){const children=graph.children(node);hasChildren=hasChildren||children.length>0}if(hasChildren){chunk_AGHRB4JF.Rm.debug("Nodes = ",nodes,depth);for(const node of nodes)if(chunk_AGHRB4JF.Rm.debug("Extracting node",node,clusterDb,clusterDb.has(node)&&!clusterDb.get(node).externalConnections,!graph.parent(node),graph.node(node),graph.children("D")," Depth ",depth),clusterDb.has(node))if(!clusterDb.get(node).externalConnections&&graph.children(node)&&graph.children(node).length>0){chunk_AGHRB4JF.Rm.warn("Cluster without external connections, without a parent and with children",node,depth);let dir="TB"===graph.graph().rankdir?"LR":"TB";clusterDb.get(node)?.clusterData?.dir&&(dir=clusterDb.get(node).clusterData.dir,chunk_AGHRB4JF.Rm.warn("Fixing dir",clusterDb.get(node).clusterData.dir,dir));const clusterGraph=new graphlib.T({multigraph:!0,compound:!0}).setGraph({rankdir:dir,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});chunk_AGHRB4JF.Rm.warn("Old graph before copy",write(graph)),copy(node,graph,clusterGraph,node),graph.setNode(node,{clusterNode:!0,id:node,clusterData:clusterDb.get(node).clusterData,label:clusterDb.get(node).label,graph:clusterGraph}),chunk_AGHRB4JF.Rm.warn("New graph after copy node: (",node,")",write(clusterGraph)),chunk_AGHRB4JF.Rm.debug("Old graph after copy",write(graph))}else chunk_AGHRB4JF.Rm.warn("Cluster ** ",node," **not meeting the criteria !externalConnections:",!clusterDb.get(node).externalConnections," no parent: ",!graph.parent(node)," children ",graph.children(node)&&graph.children(node).length>0,graph.children("D"),depth),chunk_AGHRB4JF.Rm.debug(clusterDb);else chunk_AGHRB4JF.Rm.debug("Not a cluster",node,depth);nodes=graph.nodes(),chunk_AGHRB4JF.Rm.warn("New list of nodes",nodes);for(const node of nodes){const data=graph.node(node);chunk_AGHRB4JF.Rm.warn(" Now next level",node,data),data?.clusterNode&&extractor(data.graph,depth+1)}}else chunk_AGHRB4JF.Rm.debug("Done, no node has children",graph.nodes())},"extractor"),sorter=(0,chunk_AGHRB4JF.K2)((graph,nodes)=>{if(0===nodes.length)return[];let result=Object.assign([],nodes);return nodes.forEach(node=>{const children=graph.children(node),sorted=sorter(graph,children);result=[...result,...sorted]}),result},"sorter"),sortNodesByHierarchy=(0,chunk_AGHRB4JF.K2)(graph=>sorter(graph,graph.children()),"sortNodesByHierarchy"),recursiveRender=(0,chunk_AGHRB4JF.K2)(async(_elem,graph,diagramType,id,parentCluster,siteConfig)=>{chunk_AGHRB4JF.Rm.warn("Graph in recursive render:XAX",write(graph),parentCluster);const dir=graph.graph().rankdir;chunk_AGHRB4JF.Rm.trace("Dir in recursive render - dir:",dir);const elem=_elem.insert("g").attr("class","root");graph.nodes()?chunk_AGHRB4JF.Rm.info("Recursive render XXX",graph.nodes()):chunk_AGHRB4JF.Rm.info("No nodes found for",graph),graph.edges().length>0&&chunk_AGHRB4JF.Rm.info("Recursive edges",graph.edge(graph.edges()[0]));const clusters=elem.insert("g").attr("class","clusters"),edgePaths=elem.insert("g").attr("class","edgePaths"),edgeLabels=elem.insert("g").attr("class","edgeLabels"),nodes=elem.insert("g").attr("class","nodes");await Promise.all(graph.nodes().map(async function(v){const node=graph.node(v);if(void 0!==parentCluster){const data=JSON.parse(JSON.stringify(parentCluster.clusterData));chunk_AGHRB4JF.Rm.trace("Setting data for parent cluster XXX\n Node.id = ",v,"\n data=",data.height,"\nParent cluster",parentCluster.height),graph.setNode(parentCluster.id,data),graph.parent(v)||(chunk_AGHRB4JF.Rm.trace("Setting parent",v,parentCluster.id),graph.setParent(v,parentCluster.id,data))}if(chunk_AGHRB4JF.Rm.info("(Insert) Node XXX"+v+": "+JSON.stringify(graph.node(v))),node?.clusterNode){chunk_AGHRB4JF.Rm.info("Cluster identified XBX",v,node.width,graph.node(v));const{ranksep,nodesep}=graph.graph();node.graph.setGraph({...node.graph.graph(),ranksep:ranksep+25,nodesep});const o=await recursiveRender(nodes,node.graph,diagramType,id,graph.node(v),siteConfig),newEl=o.elem;(0,chunk_JZLCHNYA.lC)(node,newEl),node.diff=o.diff||0,chunk_AGHRB4JF.Rm.info("New compound node after recursive render XAX",v,"width",node.width,"height",node.height),(0,chunk_JZLCHNYA.U7)(newEl,node)}else graph.children(v).length>0?(chunk_AGHRB4JF.Rm.trace("Cluster - the non recursive path XBX",v,node.id,node,node.width,"Graph:",graph),chunk_AGHRB4JF.Rm.trace(findNonClusterChild(node.id,graph)),clusterDb.set(node.id,{id:findNonClusterChild(node.id,graph),node})):(chunk_AGHRB4JF.Rm.trace("Node - the non recursive path XAX",v,nodes,graph.node(v),dir),await(0,chunk_JZLCHNYA.on)(nodes,graph.node(v),{config:siteConfig,dir}))}));const processEdges=(0,chunk_AGHRB4JF.K2)(async()=>{const edgePromises=graph.edges().map(async function(e){const edge=graph.edge(e.v,e.w,e.name);chunk_AGHRB4JF.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),chunk_AGHRB4JF.Rm.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(graph.edge(e))),chunk_AGHRB4JF.Rm.info("Fix",clusterDb,"ids:",e.v,e.w,"Translating: ",clusterDb.get(e.v),clusterDb.get(e.w)),await(0,chunk_QXUST7PY.jP)(edgeLabels,edge)});await Promise.all(edgePromises)},"processEdges");await processEdges(),chunk_AGHRB4JF.Rm.info("Graph before layout:",JSON.stringify(write(graph))),chunk_AGHRB4JF.Rm.info("############################################# XXX"),chunk_AGHRB4JF.Rm.info("###                Layout                 ### XXX"),chunk_AGHRB4JF.Rm.info("############################################# XXX"),(0,dagre.Zp)(graph),chunk_AGHRB4JF.Rm.info("Graph after layout:",JSON.stringify(write(graph)));let diff=0,{subGraphTitleTotalMargin}=(0,chunk_CVBHYZKI.O)(siteConfig);return await Promise.all(sortNodesByHierarchy(graph).map(async function(v){const node=graph.node(v);if(chunk_AGHRB4JF.Rm.info("Position XBX => "+v+": ("+node.x,","+node.y,") width: ",node.width," height: ",node.height),node?.clusterNode)node.y+=subGraphTitleTotalMargin,chunk_AGHRB4JF.Rm.info("A tainted cluster node XBX1",v,node.id,node.width,node.height,node.x,node.y,graph.parent(v)),clusterDb.get(node.id).node=node,(0,chunk_JZLCHNYA.U_)(node);else if(graph.children(v).length>0){chunk_AGHRB4JF.Rm.info("A pure cluster node XBX1",v,node.id,node.x,node.y,node.width,node.height,graph.parent(v)),node.height+=subGraphTitleTotalMargin,graph.node(node.parentId);const halfPadding=node?.padding/2||0,labelHeight=node?.labelBBox?.height||0,offsetY=labelHeight-halfPadding||0;chunk_AGHRB4JF.Rm.debug("OffsetY",offsetY,"labelHeight",labelHeight,"halfPadding",halfPadding),await(0,chunk_JZLCHNYA.U)(clusters,node),clusterDb.get(node.id).node=node}else{const parent=graph.node(node.parentId);node.y+=subGraphTitleTotalMargin/2,chunk_AGHRB4JF.Rm.info("A regular node XBX1 - using the padding",node.id,"parent",node.parentId,node.width,node.height,node.x,node.y,"offsetY",node.offsetY,"parent",parent,parent?.offsetY,node),(0,chunk_JZLCHNYA.U_)(node)}})),graph.edges().forEach(function(e){const edge=graph.edge(e);chunk_AGHRB4JF.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(edge),edge),edge.points.forEach(point=>point.y+=subGraphTitleTotalMargin/2);const startNode=graph.node(e.v);var endNode=graph.node(e.w);const paths=(0,chunk_QXUST7PY.Jo)(edgePaths,edge,clusterDb,diagramType,startNode,endNode,id);(0,chunk_QXUST7PY.T_)(edge,paths)}),graph.nodes().forEach(function(v){const n=graph.node(v);chunk_AGHRB4JF.Rm.info(v,n.type,n.diff),n.isGroup&&(diff=n.diff)}),chunk_AGHRB4JF.Rm.warn("Returning from recursive render XAX",elem,diff),{elem,diff}},"recursiveRender"),render=(0,chunk_AGHRB4JF.K2)(async(data4Layout,svg)=>{const graph=new graphlib.T({multigraph:!0,compound:!0}).setGraph({rankdir:data4Layout.direction,nodesep:data4Layout.config?.nodeSpacing||data4Layout.config?.flowchart?.nodeSpacing||data4Layout.nodeSpacing,ranksep:data4Layout.config?.rankSpacing||data4Layout.config?.flowchart?.rankSpacing||data4Layout.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),element=svg.select("g");(0,chunk_QXUST7PY.g0)(element,data4Layout.markers,data4Layout.type,data4Layout.diagramId),(0,chunk_JZLCHNYA.gh)(),(0,chunk_QXUST7PY.IU)(),(0,chunk_JZLCHNYA.IU)(),clear4(),data4Layout.nodes.forEach(node=>{graph.setNode(node.id,{...node}),node.parentId&&graph.setParent(node.id,node.parentId)}),chunk_AGHRB4JF.Rm.debug("Edges:",data4Layout.edges),data4Layout.edges.forEach(edge=>{if(edge.start===edge.end){const nodeId=edge.start,specialId1=nodeId+"---"+nodeId+"---1",specialId2=nodeId+"---"+nodeId+"---2",node=graph.node(nodeId);graph.setNode(specialId1,{domId:specialId1,id:specialId1,parentId:node.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),graph.setParent(specialId1,node.parentId),graph.setNode(specialId2,{domId:specialId2,id:specialId2,parentId:node.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),graph.setParent(specialId2,node.parentId);const edge1=structuredClone(edge),edgeMid=structuredClone(edge),edge2=structuredClone(edge);edge1.label="",edge1.arrowTypeEnd="none",edge1.id=nodeId+"-cyclic-special-1",edgeMid.arrowTypeStart="none",edgeMid.arrowTypeEnd="none",edgeMid.id=nodeId+"-cyclic-special-mid",edge2.label="",node.isGroup&&(edge1.fromCluster=nodeId,edge2.toCluster=nodeId),edge2.id=nodeId+"-cyclic-special-2",edge2.arrowTypeStart="none",graph.setEdge(nodeId,specialId1,edge1,nodeId+"-cyclic-special-0"),graph.setEdge(specialId1,specialId2,edgeMid,nodeId+"-cyclic-special-1"),graph.setEdge(specialId2,nodeId,edge2,nodeId+"-cyc<lic-special-2")}else graph.setEdge(edge.start,edge.end,{...edge},edge.id)}),chunk_AGHRB4JF.Rm.warn("Graph at first:",JSON.stringify(write(graph))),adjustClustersAndEdges(graph),chunk_AGHRB4JF.Rm.warn("Graph after XAX:",JSON.stringify(write(graph)));const siteConfig=(0,chunk_ABZYJK2D.D7)();await recursiveRender(element,graph,data4Layout.type,data4Layout.diagramId,void 0,siteConfig)},"render")}}]);