"use strict";(self.webpackChunk_juki_team_base_ui=self.webpackChunk_juki_team_base_ui||[]).push([[2280],{"./node_modules/@codemirror/legacy-modes/mode/solr.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{solr:()=>solr});var isStringChar=/[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/,isOperatorChar=/[\|\!\+\-\*\?\~\^\&]/,isOperatorString=/^(OR|AND|NOT|TO)$/;function tokenWord(ch){return function(stream,state){for(var word=ch;(ch=stream.peek())&&null!=ch.match(isStringChar);)word+=stream.next();return state.tokenize=tokenBase,isOperatorString.test(word)?"operator":function isNumber(word){return parseFloat(word).toString()===word}(word)?"number":":"==stream.peek()?"propertyName":"string"}}function tokenBase(stream,state){var ch=stream.next();return'"'==ch?state.tokenize=function tokenString(quote){return function(stream,state){for(var next,escaped=!1;null!=(next=stream.next())&&(next!=quote||escaped);)escaped=!escaped&&"\\"==next;return escaped||(state.tokenize=tokenBase),"string"}}(ch):isOperatorChar.test(ch)?state.tokenize=function tokenOperator(operator){return function(stream,state){return"|"==operator?stream.eat(/\|/):"&"==operator&&stream.eat(/\&/),state.tokenize=tokenBase,"operator"}}(ch):isStringChar.test(ch)&&(state.tokenize=tokenWord(ch)),state.tokenize!=tokenBase?state.tokenize(stream,state):null}const solr={name:"solr",startState:function(){return{tokenize:tokenBase}},token:function(stream,state){return stream.eatSpace()?null:state.tokenize(stream,state)}}}}]);