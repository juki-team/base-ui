"use strict";(self.webpackChunk_juki_team_base_ui=self.webpackChunk_juki_team_base_ui||[]).push([[95007],{"./node_modules/mermaid/dist/chunks/mermaid.core/cose-bilkent-S5V4N54A.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{render:()=>render2});var _chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/mermaid/dist/chunks/mermaid.core/chunk-AGHRB4JF.mjs"),cytoscape__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/cytoscape/dist/cytoscape.esm.mjs"),cytoscape_cose_bilkent__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/cytoscape-cose-bilkent/cytoscape-cose-bilkent.js"),cytoscape_cose_bilkent__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(cytoscape_cose_bilkent__WEBPACK_IMPORTED_MODULE_2__),d3__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/d3/src/index.js");function addNodes(nodes,cy){nodes.forEach(node=>{const nodeData={id:node.id,labelText:node.label,height:node.height,width:node.width,padding:node.padding??0};Object.keys(node).forEach(key=>{["id","label","height","width","padding","x","y"].includes(key)||(nodeData[key]=node[key])}),cy.add({group:"nodes",data:nodeData,position:{x:node.x??0,y:node.y??0}})})}function addEdges(edges,cy){edges.forEach(edge=>{const edgeData={id:edge.id,source:edge.start,target:edge.end};Object.keys(edge).forEach(key=>{["id","start","end"].includes(key)||(edgeData[key]=edge[key])}),cy.add({group:"edges",data:edgeData})})}function createCytoscapeInstance(data){return new Promise(resolve=>{const renderEl=(0,d3__WEBPACK_IMPORTED_MODULE_3__.Ltv)("body").append("div").attr("id","cy").attr("style","display:none"),cy=(0,cytoscape__WEBPACK_IMPORTED_MODULE_1__.A)({container:document.getElementById("cy"),style:[{selector:"edge",style:{"curve-style":"bezier"}}]});renderEl.remove(),addNodes(data.nodes,cy),addEdges(data.edges,cy),cy.nodes().forEach(function(n){n.layoutDimensions=()=>{const nodeData=n.data();return{w:nodeData.width,h:nodeData.height}}});cy.layout({name:"cose-bilkent",quality:"proof",styleEnabled:!1,animate:!1}).run(),cy.ready(e=>{_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.Rm.info("Cytoscape ready",e),resolve(cy)})})}function extractPositionedNodes(cy){return cy.nodes().map(node=>{const data=node.data(),position=node.position(),positionedNode={id:data.id,x:position.x,y:position.y};return Object.keys(data).forEach(key=>{"id"!==key&&(positionedNode[key]=data[key])}),positionedNode})}function extractPositionedEdges(cy){return cy.edges().map(edge=>{const data=edge.data(),rscratch=edge._private.rscratch,positionedEdge={id:data.id,source:data.source,target:data.target,startX:rscratch.startX,startY:rscratch.startY,midX:rscratch.midX,midY:rscratch.midY,endX:rscratch.endX,endY:rscratch.endY};return Object.keys(data).forEach(key=>{["id","source","target"].includes(key)||(positionedEdge[key]=data[key])}),positionedEdge})}async function executeCoseBilkentLayout(data,_config){_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.Rm.debug("Starting cose-bilkent layout algorithm");try{validateLayoutData(data);const cy=await createCytoscapeInstance(data),positionedNodes=extractPositionedNodes(cy),positionedEdges=extractPositionedEdges(cy);return _chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.Rm.debug(`Layout completed: ${positionedNodes.length} nodes, ${positionedEdges.length} edges`),{nodes:positionedNodes,edges:positionedEdges}}catch(error){throw _chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.Rm.error("Error in cose-bilkent layout algorithm:",error),error}}function validateLayoutData(data){if(!data)throw new Error("Layout data is required");if(!data.config)throw new Error("Configuration is required in layout data");if(!data.rootNode)throw new Error("Root node is required");if(!data.nodes||!Array.isArray(data.nodes))throw new Error("No nodes found in layout data");if(!Array.isArray(data.edges))throw new Error("Edges array is required in layout data");return!0}cytoscape__WEBPACK_IMPORTED_MODULE_1__.A.use(cytoscape_cose_bilkent__WEBPACK_IMPORTED_MODULE_2___default()),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(addNodes,"addNodes"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(addEdges,"addEdges"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(createCytoscapeInstance,"createCytoscapeInstance"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(extractPositionedNodes,"extractPositionedNodes"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(extractPositionedEdges,"extractPositionedEdges"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(executeCoseBilkentLayout,"executeCoseBilkentLayout"),(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(validateLayoutData,"validateLayoutData");var render2=(0,_chunk_AGHRB4JF_mjs__WEBPACK_IMPORTED_MODULE_0__.K2)(async(data4Layout,svg,{insertCluster,insertEdge,insertEdgeLabel,insertMarkers,insertNode,log:log2,positionEdgeLabel},{algorithm:_algorithm})=>{const nodeDb={},clusterDb={},element=svg.select("g");insertMarkers(element,data4Layout.markers,data4Layout.type,data4Layout.diagramId);const subGraphsEl=element.insert("g").attr("class","subgraphs"),edgePaths=element.insert("g").attr("class","edgePaths"),edgeLabels=element.insert("g").attr("class","edgeLabels"),nodes=element.insert("g").attr("class","nodes");log2.debug("Inserting nodes into DOM for dimension calculation"),await Promise.all(data4Layout.nodes.map(async node=>{if(node.isGroup){const clusterNode={...node};clusterDb[node.id]=clusterNode,nodeDb[node.id]=clusterNode,await insertCluster(subGraphsEl,node)}else{const nodeWithPosition={...node};nodeDb[node.id]=nodeWithPosition;const nodeEl=await insertNode(nodes,node,{config:data4Layout.config,dir:data4Layout.direction||"TB"}),boundingBox=nodeEl.node().getBBox();nodeWithPosition.width=boundingBox.width,nodeWithPosition.height=boundingBox.height,nodeWithPosition.domId=nodeEl,log2.debug(`Node ${node.id} dimensions: ${boundingBox.width}x${boundingBox.height}`)}})),log2.debug("Running cose-bilkent layout algorithm");const updatedLayoutData={...data4Layout,nodes:data4Layout.nodes.map(node=>{const nodeWithDimensions=nodeDb[node.id];return{...node,width:nodeWithDimensions.width,height:nodeWithDimensions.height}})},layoutResult=await executeCoseBilkentLayout(updatedLayoutData,data4Layout.config);log2.debug("Positioning nodes based on layout results"),layoutResult.nodes.forEach(positionedNode=>{const node=nodeDb[positionedNode.id];node?.domId&&(node.domId.attr("transform",`translate(${positionedNode.x}, ${positionedNode.y})`),node.x=positionedNode.x,node.y=positionedNode.y,log2.debug(`Positioned node ${node.id} at center (${positionedNode.x}, ${positionedNode.y})`))}),layoutResult.edges.forEach(positionedEdge=>{const edge=data4Layout.edges.find(e=>e.id===positionedEdge.id);edge&&(edge.points=[{x:positionedEdge.startX,y:positionedEdge.startY},{x:positionedEdge.midX,y:positionedEdge.midY},{x:positionedEdge.endX,y:positionedEdge.endY}])}),log2.debug("Inserting and positioning edges"),await Promise.all(data4Layout.edges.map(async edge=>{await insertEdgeLabel(edgeLabels,edge);const startNode=nodeDb[edge.start??""],endNode=nodeDb[edge.end??""];if(startNode&&endNode){const positionedEdge=layoutResult.edges.find(e=>e.id===edge.id);if(positionedEdge){log2.debug("APA01 positionedEdge",positionedEdge);const edgeWithPath={...edge},paths=insertEdge(edgePaths,edgeWithPath,clusterDb,data4Layout.type,startNode,endNode,data4Layout.diagramId);positionEdgeLabel(edgeWithPath,paths)}else{const edgeWithPath={...edge,points:[{x:startNode.x||0,y:startNode.y||0},{x:endNode.x||0,y:endNode.y||0}]},paths=insertEdge(edgePaths,edgeWithPath,clusterDb,data4Layout.type,startNode,endNode,data4Layout.diagramId);positionEdgeLabel(edgeWithPath,paths)}}})),log2.debug("Cose-bilkent rendering completed")},"render")}}]);